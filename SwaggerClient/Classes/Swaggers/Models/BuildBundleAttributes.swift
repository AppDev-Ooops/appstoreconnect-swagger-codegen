//
// BuildBundleAttributes.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct BuildBundleAttributes: Codable {

    public enum BundleType: String, Codable { 
        case app = "APP"
        case appClip = "APP_CLIP"
    }
    public var bundleId: String?
    public var bundleType: BundleType?
    public var sdkBuild: String?
    public var platformBuild: String?
    public var fileName: String?
    public var hasSirikit: Bool?
    public var hasOnDemandResources: Bool?
    public var hasPrerenderedIcon: Bool?
    public var usesLocationServices: Bool?
    public var isIosBuildMacAppStoreCompatible: Bool?
    public var includesSymbols: Bool?
    public var dSYMUrl: String?
    public var supportedArchitectures: [String]?
    public var requiredCapabilities: [String]?
    public var deviceProtocols: [String]?
    public var locales: [String]?
    public var entitlements: [String:[String:String]]?

    public init(bundleId: String? = nil, bundleType: BundleType? = nil, sdkBuild: String? = nil, platformBuild: String? = nil, fileName: String? = nil, hasSirikit: Bool? = nil, hasOnDemandResources: Bool? = nil, hasPrerenderedIcon: Bool? = nil, usesLocationServices: Bool? = nil, isIosBuildMacAppStoreCompatible: Bool? = nil, includesSymbols: Bool? = nil, dSYMUrl: String? = nil, supportedArchitectures: [String]? = nil, requiredCapabilities: [String]? = nil, deviceProtocols: [String]? = nil, locales: [String]? = nil, entitlements: [String:[String:String]]? = nil) {
        self.bundleId = bundleId
        self.bundleType = bundleType
        self.sdkBuild = sdkBuild
        self.platformBuild = platformBuild
        self.fileName = fileName
        self.hasSirikit = hasSirikit
        self.hasOnDemandResources = hasOnDemandResources
        self.hasPrerenderedIcon = hasPrerenderedIcon
        self.usesLocationServices = usesLocationServices
        self.isIosBuildMacAppStoreCompatible = isIosBuildMacAppStoreCompatible
        self.includesSymbols = includesSymbols
        self.dSYMUrl = dSYMUrl
        self.supportedArchitectures = supportedArchitectures
        self.requiredCapabilities = requiredCapabilities
        self.deviceProtocols = deviceProtocols
        self.locales = locales
        self.entitlements = entitlements
    }


}
