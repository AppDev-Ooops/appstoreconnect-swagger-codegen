//
// SubscriptionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SubscriptionsAPI {
    /**
     * enum for parameter fieldsSubscriptionAppStoreReviewScreenshots
     */
    public enum FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsAppStoreReviewScreenshotGetToOneRelated: String { 
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case sourcefilechecksum = "sourceFileChecksum"
        case subscription = "subscription"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsAppStoreReviewScreenshotGetToOneRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsAppStoreReviewScreenshotGetToOneRelated: String { 
        case subscription = "subscription"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsAppStoreReviewScreenshotGetToOneRelated(_id: String, fieldsSubscriptionAppStoreReviewScreenshots: [String]? = nil, fieldsSubscriptions: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionAppStoreReviewScreenshotResponse?,_ error: Error?) -> Void)) {
        subscriptionsAppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(_id: _id, fieldsSubscriptionAppStoreReviewScreenshots: fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions: fieldsSubscriptions, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/appStoreReviewScreenshot
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "fileName" : "fileName",
      "fileSize" : 0,
      "assetDeliveryState" : {
        "warnings" : [ null, null ],
        "state" : "AWAITING_UPLOAD",
        "errors" : [ {
          "code" : "code",
          "description" : "description"
        }, {
          "code" : "code",
          "description" : "description"
        } ]
      },
      "imageAsset" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "sourceFileChecksum" : "sourceFileChecksum",
      "assetToken" : "assetToken",
      "uploadOperations" : [ {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      }, {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      } ],
      "assetType" : "assetType"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionAppStoreReviewScreenshots"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  }, {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse> 
     */
    open class func subscriptionsAppStoreReviewScreenshotGetToOneRelatedWithRequestBuilder(_id: String, fieldsSubscriptionAppStoreReviewScreenshots: [String]? = nil, fieldsSubscriptions: [String]? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse> {
        var path = "/v1/subscriptions/{id}/appStoreReviewScreenshot"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptionAppStoreReviewScreenshots]": fieldsSubscriptionAppStoreReviewScreenshots, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionAppStoreReviewScreenshotResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) Subscription representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsCreateInstance(body: SubscriptionCreateRequest, completion: @escaping ((_ data: SubscriptionResponse?,_ error: Error?) -> Void)) {
        subscriptionsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/subscriptions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) Subscription representation 

     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsCreateInstanceWithRequestBuilder(body: SubscriptionCreateRequest) -> RequestBuilder<SubscriptionResponse> {
        let path = "/v1/subscriptions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        subscriptionsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/subscriptions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/subscriptions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsGetInstance: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsGetInstance: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case subscriptionlocalizations = "subscriptionLocalizations"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_subscriptionsGetInstance: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionsGetInstance: String { 
        case customerprice = "customerPrice"
        case equalizations = "equalizations"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case subscription = "subscription"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOffers
     */
    public enum FieldsSubscriptionPromotionalOffers_subscriptionsGetInstance: String { 
        case duration = "duration"
        case name = "name"
        case numberofperiods = "numberOfPeriods"
        case offercode = "offerCode"
        case offermode = "offerMode"
        case prices = "prices"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodes
     */
    public enum FieldsSubscriptionOfferCodes_subscriptionsGetInstance: String { 
        case active = "active"
        case customcodes = "customCodes"
        case customereligibilities = "customerEligibilities"
        case duration = "duration"
        case name = "name"
        case numberofperiods = "numberOfPeriods"
        case offereligibility = "offerEligibility"
        case offermode = "offerMode"
        case onetimeusecodes = "oneTimeUseCodes"
        case prices = "prices"
        case subscription = "subscription"
        case totalnumberofcodes = "totalNumberOfCodes"
    }

    /**
     * enum for parameter fieldsSubscriptionAppStoreReviewScreenshots
     */
    public enum FieldsSubscriptionAppStoreReviewScreenshots_subscriptionsGetInstance: String { 
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case sourcefilechecksum = "sourceFileChecksum"
        case subscription = "subscription"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsSubscriptionPrices
     */
    public enum FieldsSubscriptionPrices_subscriptionsGetInstance: String { 
        case preservecurrentprice = "preserveCurrentPrice"
        case preserved = "preserved"
        case startdate = "startDate"
        case subscription = "subscription"
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsSubscriptionIntroductoryOffers
     */
    public enum FieldsSubscriptionIntroductoryOffers_subscriptionsGetInstance: String { 
        case duration = "duration"
        case enddate = "endDate"
        case numberofperiods = "numberOfPeriods"
        case offermode = "offerMode"
        case startdate = "startDate"
        case subscription = "subscription"
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsSubscriptionLocalizations
     */
    public enum FieldsSubscriptionLocalizations_subscriptionsGetInstance: String { 
        case _description = "description"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscription = "subscription"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter limitIntroductoryOffers: (query) maximum number of related introductoryOffers returned (when they are included) (optional)
     - parameter limitOfferCodes: (query) maximum number of related offerCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotionalOffers: (query) maximum number of related promotionalOffers returned (when they are included) (optional)
     - parameter limitSubscriptionLocalizations: (query) maximum number of related subscriptionLocalizations returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsGetInstance(_id: String, fieldsSubscriptions: [String]? = nil, include: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsSubscriptionPromotionalOffers: [String]? = nil, fieldsSubscriptionOfferCodes: [String]? = nil, fieldsSubscriptionAppStoreReviewScreenshots: [String]? = nil, fieldsSubscriptionPrices: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [String]? = nil, fieldsSubscriptionLocalizations: [String]? = nil, limitIntroductoryOffers: Int? = nil, limitOfferCodes: Int? = nil, limitPrices: Int? = nil, limitPromotionalOffers: Int? = nil, limitSubscriptionLocalizations: Int? = nil, completion: @escaping ((_ data: SubscriptionResponse?,_ error: Error?) -> Void)) {
        subscriptionsGetInstanceWithRequestBuilder(_id: _id, fieldsSubscriptions: fieldsSubscriptions, include: include, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, fieldsSubscriptionPromotionalOffers: fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes: fieldsSubscriptionOfferCodes, fieldsSubscriptionAppStoreReviewScreenshots: fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptionPrices: fieldsSubscriptionPrices, fieldsSubscriptionIntroductoryOffers: fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionLocalizations: fieldsSubscriptionLocalizations, limitIntroductoryOffers: limitIntroductoryOffers, limitOfferCodes: limitOfferCodes, limitPrices: limitPrices, limitPromotionalOffers: limitPromotionalOffers, limitSubscriptionLocalizations: limitSubscriptionLocalizations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter limitIntroductoryOffers: (query) maximum number of related introductoryOffers returned (when they are included) (optional)
     - parameter limitOfferCodes: (query) maximum number of related offerCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotionalOffers: (query) maximum number of related promotionalOffers returned (when they are included) (optional)
     - parameter limitSubscriptionLocalizations: (query) maximum number of related subscriptionLocalizations returned (when they are included) (optional)

     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsGetInstanceWithRequestBuilder(_id: String, fieldsSubscriptions: [String]? = nil, include: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsSubscriptionPromotionalOffers: [String]? = nil, fieldsSubscriptionOfferCodes: [String]? = nil, fieldsSubscriptionAppStoreReviewScreenshots: [String]? = nil, fieldsSubscriptionPrices: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [String]? = nil, fieldsSubscriptionLocalizations: [String]? = nil, limitIntroductoryOffers: Int? = nil, limitOfferCodes: Int? = nil, limitPrices: Int? = nil, limitPromotionalOffers: Int? = nil, limitSubscriptionLocalizations: Int? = nil) -> RequestBuilder<SubscriptionResponse> {
        var path = "/v1/subscriptions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "include": include, 
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[subscriptionPricePoints]": fieldsSubscriptionPricePoints, 
                        "fields[subscriptionPromotionalOffers]": fieldsSubscriptionPromotionalOffers, 
                        "fields[subscriptionOfferCodes]": fieldsSubscriptionOfferCodes, 
                        "fields[subscriptionAppStoreReviewScreenshots]": fieldsSubscriptionAppStoreReviewScreenshots, 
                        "fields[subscriptionPrices]": fieldsSubscriptionPrices, 
                        "fields[subscriptionIntroductoryOffers]": fieldsSubscriptionIntroductoryOffers, 
                        "fields[subscriptionLocalizations]": fieldsSubscriptionLocalizations, 
                        "limit[introductoryOffers]": limitIntroductoryOffers?.encodeToJSON(), 
                        "limit[offerCodes]": limitOfferCodes?.encodeToJSON(), 
                        "limit[prices]": limitPrices?.encodeToJSON(), 
                        "limit[promotionalOffers]": limitPromotionalOffers?.encodeToJSON(), 
                        "limit[subscriptionLocalizations]": limitSubscriptionLocalizations?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SubscriptionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsIntroductoryOffersDeleteToManyRelationship(body: SubscriptionIntroductoryOffersLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        subscriptionsIntroductoryOffersDeleteToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/subscriptions/{id}/relationships/introductoryOffers
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsIntroductoryOffersDeleteToManyRelationshipWithRequestBuilder(body: SubscriptionIntroductoryOffersLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/subscriptions/{id}/relationships/introductoryOffers"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionsIntroductoryOffersGetToManyRelated: String { 
        case customerprice = "customerPrice"
        case equalizations = "equalizations"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case subscription = "subscription"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsIntroductoryOffersGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionIntroductoryOffers
     */
    public enum FieldsSubscriptionIntroductoryOffers_subscriptionsIntroductoryOffersGetToManyRelated: String { 
        case duration = "duration"
        case enddate = "endDate"
        case numberofperiods = "numberOfPeriods"
        case offermode = "offerMode"
        case startdate = "startDate"
        case subscription = "subscription"
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionsIntroductoryOffersGetToManyRelated: String { 
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsIntroductoryOffersGetToManyRelated: String { 
        case subscription = "subscription"
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelated(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionIntroductoryOffersResponse?,_ error: Error?) -> Void)) {
        subscriptionsIntroductoryOffersGetToManyRelatedWithRequestBuilder(_id: _id, filterTerritory: filterTerritory, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionIntroductoryOffers: fieldsSubscriptionIntroductoryOffers, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/introductoryOffers
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionPricePoint" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionPricePoints"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "endDate" : "2000-01-23",
      "numberOfPeriods" : 0,
      "offerMode" : "PAY_AS_YOU_GO",
      "startDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionIntroductoryOffers"
  }, {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionPricePoint" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionPricePoints"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "endDate" : "2000-01-23",
      "numberOfPeriods" : 0,
      "offerMode" : "PAY_AS_YOU_GO",
      "startDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionIntroductoryOffers"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionIntroductoryOffersResponse> 
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelatedWithRequestBuilder(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionIntroductoryOffersResponse> {
        var path = "/v1/subscriptions/{id}/introductoryOffers"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[territory]": filterTerritory, 
                        "fields[subscriptionPricePoints]": fieldsSubscriptionPricePoints, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[subscriptionIntroductoryOffers]": fieldsSubscriptionIntroductoryOffers, 
                        "fields[territories]": fieldsTerritories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionIntroductoryOffersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelationship(_id: String, limit: Int? = nil, completion: @escaping ((_ data: SubscriptionIntroductoryOffersLinkagesResponse?,_ error: Error?) -> Void)) {
        subscriptionsIntroductoryOffersGetToManyRelationshipWithRequestBuilder(_id: _id, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/relationships/introductoryOffers
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "id" : "id",
    "type" : "subscriptionIntroductoryOffers"
  }, {
    "id" : "id",
    "type" : "subscriptionIntroductoryOffers"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse> 
     */
    open class func subscriptionsIntroductoryOffersGetToManyRelationshipWithRequestBuilder(_id: String, limit: Int? = nil) -> RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse> {
        var path = "/v1/subscriptions/{id}/relationships/introductoryOffers"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SubscriptionIntroductoryOffersLinkagesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptionOfferCodeCustomCodes
     */
    public enum FieldsSubscriptionOfferCodeCustomCodes_subscriptionsOfferCodesGetToManyRelated: String { 
        case active = "active"
        case createddate = "createdDate"
        case customcode = "customCode"
        case expirationdate = "expirationDate"
        case numberofcodes = "numberOfCodes"
        case offercode = "offerCode"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodes
     */
    public enum FieldsSubscriptionOfferCodes_subscriptionsOfferCodesGetToManyRelated: String { 
        case active = "active"
        case customcodes = "customCodes"
        case customereligibilities = "customerEligibilities"
        case duration = "duration"
        case name = "name"
        case numberofperiods = "numberOfPeriods"
        case offereligibility = "offerEligibility"
        case offermode = "offerMode"
        case onetimeusecodes = "oneTimeUseCodes"
        case prices = "prices"
        case subscription = "subscription"
        case totalnumberofcodes = "totalNumberOfCodes"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodeOneTimeUseCodes
     */
    public enum FieldsSubscriptionOfferCodeOneTimeUseCodes_subscriptionsOfferCodesGetToManyRelated: String { 
        case active = "active"
        case createddate = "createdDate"
        case expirationdate = "expirationDate"
        case numberofcodes = "numberOfCodes"
        case offercode = "offerCode"
        case values = "values"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsOfferCodesGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodePrices
     */
    public enum FieldsSubscriptionOfferCodePrices_subscriptionsOfferCodesGetToManyRelated: String { 
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsOfferCodesGetToManyRelated: String { 
        case customcodes = "customCodes"
        case onetimeusecodes = "oneTimeUseCodes"
        case prices = "prices"
        case subscription = "subscription"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionOfferCodeCustomCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionOfferCodePrices: (query) the fields to include for returned resources of type subscriptionOfferCodePrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitOneTimeUseCodes: (query) maximum number of related oneTimeUseCodes returned (when they are included) (optional)
     - parameter limitCustomCodes: (query) maximum number of related customCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsOfferCodesGetToManyRelated(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionOfferCodeCustomCodes: [String]? = nil, fieldsSubscriptionOfferCodes: [String]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodes: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionOfferCodePrices: [String]? = nil, limit: Int? = nil, limitOneTimeUseCodes: Int? = nil, limitCustomCodes: Int? = nil, limitPrices: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionOfferCodesResponse?,_ error: Error?) -> Void)) {
        subscriptionsOfferCodesGetToManyRelatedWithRequestBuilder(_id: _id, filterTerritory: filterTerritory, fieldsSubscriptionOfferCodeCustomCodes: fieldsSubscriptionOfferCodeCustomCodes, fieldsSubscriptionOfferCodes: fieldsSubscriptionOfferCodes, fieldsSubscriptionOfferCodeOneTimeUseCodes: fieldsSubscriptionOfferCodeOneTimeUseCodes, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionOfferCodePrices: fieldsSubscriptionOfferCodePrices, limit: limit, limitOneTimeUseCodes: limitOneTimeUseCodes, limitCustomCodes: limitCustomCodes, limitPrices: limitPrices, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/offerCodes
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  }, {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionOfferCodeCustomCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeCustomCodes (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionOfferCodePrices: (query) the fields to include for returned resources of type subscriptionOfferCodePrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitOneTimeUseCodes: (query) maximum number of related oneTimeUseCodes returned (when they are included) (optional)
     - parameter limitCustomCodes: (query) maximum number of related customCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionOfferCodesResponse> 
     */
    open class func subscriptionsOfferCodesGetToManyRelatedWithRequestBuilder(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionOfferCodeCustomCodes: [String]? = nil, fieldsSubscriptionOfferCodes: [String]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodes: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionOfferCodePrices: [String]? = nil, limit: Int? = nil, limitOneTimeUseCodes: Int? = nil, limitCustomCodes: Int? = nil, limitPrices: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionOfferCodesResponse> {
        var path = "/v1/subscriptions/{id}/offerCodes"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[territory]": filterTerritory, 
                        "fields[subscriptionOfferCodeCustomCodes]": fieldsSubscriptionOfferCodeCustomCodes, 
                        "fields[subscriptionOfferCodes]": fieldsSubscriptionOfferCodes, 
                        "fields[subscriptionOfferCodeOneTimeUseCodes]": fieldsSubscriptionOfferCodeOneTimeUseCodes, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[subscriptionOfferCodePrices]": fieldsSubscriptionOfferCodePrices, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[oneTimeUseCodes]": limitOneTimeUseCodes?.encodeToJSON(), 
                        "limit[customCodes]": limitCustomCodes?.encodeToJSON(), 
                        "limit[prices]": limitPrices?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionOfferCodesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionsPricePointsGetToManyRelated: String { 
        case customerprice = "customerPrice"
        case equalizations = "equalizations"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case subscription = "subscription"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionsPricePointsGetToManyRelated: String { 
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPricePointsGetToManyRelated: String { 
        case territory = "territory"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsPricePointsGetToManyRelated(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionPricePointsResponse?,_ error: Error?) -> Void)) {
        subscriptionsPricePointsGetToManyRelatedWithRequestBuilder(_id: _id, filterTerritory: filterTerritory, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/pricePoints
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "proceeds" : "proceeds",
      "proceedsYear2" : "proceedsYear2",
      "customerPrice" : "customerPrice"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionPricePoints"
  }, {
    "relationships" : {
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "proceeds" : "proceeds",
      "proceedsYear2" : "proceedsYear2",
      "customerPrice" : "customerPrice"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionPricePoints"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "attributes" : {
      "currency" : "currency"
    },
    "id" : "id",
    "type" : "territories"
  }, {
    "attributes" : {
      "currency" : "currency"
    },
    "id" : "id",
    "type" : "territories"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionPricePointsResponse> 
     */
    open class func subscriptionsPricePointsGetToManyRelatedWithRequestBuilder(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionPricePointsResponse> {
        var path = "/v1/subscriptions/{id}/pricePoints"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[territory]": filterTerritory, 
                        "fields[subscriptionPricePoints]": fieldsSubscriptionPricePoints, 
                        "fields[territories]": fieldsTerritories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionPricePointsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsPricesDeleteToManyRelationship(body: SubscriptionPricesLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        subscriptionsPricesDeleteToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/subscriptions/{id}/relationships/prices
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionsPricesDeleteToManyRelationshipWithRequestBuilder(body: SubscriptionPricesLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/subscriptions/{id}/relationships/prices"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsSubscriptionPricePoints
     */
    public enum FieldsSubscriptionPricePoints_subscriptionsPricesGetToManyRelated: String { 
        case customerprice = "customerPrice"
        case equalizations = "equalizations"
        case proceeds = "proceeds"
        case proceedsyear2 = "proceedsYear2"
        case subscription = "subscription"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsSubscriptionPrices
     */
    public enum FieldsSubscriptionPrices_subscriptionsPricesGetToManyRelated: String { 
        case preservecurrentprice = "preserveCurrentPrice"
        case preserved = "preserved"
        case startdate = "startDate"
        case subscription = "subscription"
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_subscriptionsPricesGetToManyRelated: String { 
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPricesGetToManyRelated: String { 
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterSubscriptionPricePoint: (query) filter by id(s) of related &#x27;subscriptionPricePoint&#x27; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsPricesGetToManyRelated(_id: String, filterSubscriptionPricePoint: [String]? = nil, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsSubscriptionPrices: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionPricesResponse?,_ error: Error?) -> Void)) {
        subscriptionsPricesGetToManyRelatedWithRequestBuilder(_id: _id, filterSubscriptionPricePoint: filterSubscriptionPricePoint, filterTerritory: filterTerritory, fieldsSubscriptionPricePoints: fieldsSubscriptionPricePoints, fieldsSubscriptionPrices: fieldsSubscriptionPrices, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/prices
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "subscriptionPricePoint" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionPricePoints"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "preserved" : true,
      "startDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionPrices"
  }, {
    "relationships" : {
      "subscriptionPricePoint" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionPricePoints"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "preserved" : true,
      "startDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionPrices"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterSubscriptionPricePoint: (query) filter by id(s) of related &#x27;subscriptionPricePoint&#x27; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsSubscriptionPricePoints: (query) the fields to include for returned resources of type subscriptionPricePoints (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionPricesResponse> 
     */
    open class func subscriptionsPricesGetToManyRelatedWithRequestBuilder(_id: String, filterSubscriptionPricePoint: [String]? = nil, filterTerritory: [String]? = nil, fieldsSubscriptionPricePoints: [String]? = nil, fieldsSubscriptionPrices: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionPricesResponse> {
        var path = "/v1/subscriptions/{id}/prices"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[subscriptionPricePoint]": filterSubscriptionPricePoint, 
                        "filter[territory]": filterTerritory, 
                        "fields[subscriptionPricePoints]": fieldsSubscriptionPricePoints, 
                        "fields[subscriptionPrices]": fieldsSubscriptionPrices, 
                        "fields[territories]": fieldsTerritories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionPricesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsPricesGetToManyRelationship(_id: String, limit: Int? = nil, completion: @escaping ((_ data: SubscriptionPricesLinkagesResponse?,_ error: Error?) -> Void)) {
        subscriptionsPricesGetToManyRelationshipWithRequestBuilder(_id: _id, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/relationships/prices
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "id" : "id",
    "type" : "subscriptionPrices"
  }, {
    "id" : "id",
    "type" : "subscriptionPrices"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<SubscriptionPricesLinkagesResponse> 
     */
    open class func subscriptionsPricesGetToManyRelationshipWithRequestBuilder(_id: String, limit: Int? = nil) -> RequestBuilder<SubscriptionPricesLinkagesResponse> {
        var path = "/v1/subscriptions/{id}/relationships/prices"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SubscriptionPricesLinkagesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_subscriptionsPromotedPurchaseGetToOneRelated: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsPromotedPurchaseGetToOneRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_subscriptionsPromotedPurchaseGetToOneRelated: String { 
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPromotedPurchaseImages
     */
    public enum FieldsPromotedPurchaseImages_subscriptionsPromotedPurchaseGetToOneRelated: String { 
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case promotedpurchase = "promotedPurchase"
        case sourcefilechecksum = "sourceFileChecksum"
        case state = "state"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPromotedPurchaseGetToOneRelated: String { 
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case subscription = "subscription"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsPromotedPurchaseGetToOneRelated(_id: String, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPromotedPurchaseImages: [String]? = nil, limitPromotionImages: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: PromotedPurchaseResponse?,_ error: Error?) -> Void)) {
        subscriptionsPromotedPurchaseGetToOneRelatedWithRequestBuilder(_id: _id, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsSubscriptions: fieldsSubscriptions, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPromotedPurchaseImages: fieldsPromotedPurchaseImages, limitPromotionImages: limitPromotionImages, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/promotedPurchase
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "promotionImages" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchaseImages"
        }, {
          "id" : "id",
          "type" : "promotedPurchaseImages"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "inAppPurchaseV2" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchases"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "visibleForAllUsers" : true,
      "state" : "APPROVED",
      "enabled" : true
    },
    "id" : "id",
    "type" : "promotedPurchases"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<PromotedPurchaseResponse> 
     */
    open class func subscriptionsPromotedPurchaseGetToOneRelatedWithRequestBuilder(_id: String, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPromotedPurchaseImages: [String]? = nil, limitPromotionImages: Int? = nil, include: [String]? = nil) -> RequestBuilder<PromotedPurchaseResponse> {
        var path = "/v1/subscriptions/{id}/promotedPurchase"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[promotedPurchaseImages]": fieldsPromotedPurchaseImages, 
                        "limit[promotionImages]": limitPromotionImages?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<PromotedPurchaseResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptionPromotionalOffers
     */
    public enum FieldsSubscriptionPromotionalOffers_subscriptionsPromotionalOffersGetToManyRelated: String { 
        case duration = "duration"
        case name = "name"
        case numberofperiods = "numberOfPeriods"
        case offercode = "offerCode"
        case offermode = "offerMode"
        case prices = "prices"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsPromotionalOffersGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOfferPrices
     */
    public enum FieldsSubscriptionPromotionalOfferPrices_subscriptionsPromotionalOffersGetToManyRelated: String { 
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsPromotionalOffersGetToManyRelated: String { 
        case prices = "prices"
        case subscription = "subscription"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsPromotionalOffersGetToManyRelated(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPromotionalOffers: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionPromotionalOfferPrices: [String]? = nil, limit: Int? = nil, limitPrices: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionPromotionalOffersResponse?,_ error: Error?) -> Void)) {
        subscriptionsPromotionalOffersGetToManyRelatedWithRequestBuilder(_id: _id, filterTerritory: filterTerritory, fieldsSubscriptionPromotionalOffers: fieldsSubscriptionPromotionalOffers, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionPromotionalOfferPrices: fieldsSubscriptionPromotionalOfferPrices, limit: limit, limitPrices: limitPrices, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/promotionalOffers
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOfferPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOfferPrices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerCode" : "offerCode",
      "name" : "name",
      "numberOfPeriods" : 0,
      "offerMode" : "PAY_AS_YOU_GO"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionPromotionalOffers"
  }, {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOfferPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOfferPrices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerCode" : "offerCode",
      "name" : "name",
      "numberOfPeriods" : 0,
      "offerMode" : "PAY_AS_YOU_GO"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionPromotionalOffers"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterTerritory: (query) filter by territory (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionPromotionalOfferPrices: (query) the fields to include for returned resources of type subscriptionPromotionalOfferPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionPromotionalOffersResponse> 
     */
    open class func subscriptionsPromotionalOffersGetToManyRelatedWithRequestBuilder(_id: String, filterTerritory: [String]? = nil, fieldsSubscriptionPromotionalOffers: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionPromotionalOfferPrices: [String]? = nil, limit: Int? = nil, limitPrices: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionPromotionalOffersResponse> {
        var path = "/v1/subscriptions/{id}/promotionalOffers"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[territory]": filterTerritory, 
                        "fields[subscriptionPromotionalOffers]": fieldsSubscriptionPromotionalOffers, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[subscriptionPromotionalOfferPrices]": fieldsSubscriptionPromotionalOfferPrices, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[prices]": limitPrices?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionPromotionalOffersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionsSubscriptionLocalizationsGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionLocalizations
     */
    public enum FieldsSubscriptionLocalizations_subscriptionsSubscriptionLocalizationsGetToManyRelated: String { 
        case _description = "description"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscription = "subscription"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionsSubscriptionLocalizationsGetToManyRelated: String { 
        case subscription = "subscription"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsSubscriptionLocalizationsGetToManyRelated(_id: String, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionLocalizations: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionLocalizationsResponse?,_ error: Error?) -> Void)) {
        subscriptionsSubscriptionLocalizationsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionLocalizations: fieldsSubscriptionLocalizations, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptions/{id}/subscriptionLocalizations
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "name" : "name",
      "description" : "description",
      "state" : "PREPARE_FOR_SUBMISSION",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionLocalizations"
  }, {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "name" : "name",
      "description" : "description",
      "state" : "PREPARE_FOR_SUBMISSION",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionLocalizations"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  }, {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionLocalizationsResponse> 
     */
    open class func subscriptionsSubscriptionLocalizationsGetToManyRelatedWithRequestBuilder(_id: String, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionLocalizations: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionLocalizationsResponse> {
        var path = "/v1/subscriptions/{id}/subscriptionLocalizations"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[subscriptionLocalizations]": fieldsSubscriptionLocalizations, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionLocalizationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) Subscription representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionsUpdateInstance(body: SubscriptionUpdateRequest, _id: String, completion: @escaping ((_ data: SubscriptionResponse?,_ error: Error?) -> Void)) {
        subscriptionsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/subscriptions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) Subscription representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<SubscriptionResponse> 
     */
    open class func subscriptionsUpdateInstanceWithRequestBuilder(body: SubscriptionUpdateRequest, _id: String) -> RequestBuilder<SubscriptionResponse> {
        var path = "/v1/subscriptions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
