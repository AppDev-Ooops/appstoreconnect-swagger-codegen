//
// RoutingAppCoveragesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class RoutingAppCoveragesAPI {
    /**

     - parameter body: (body) RoutingAppCoverage representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func routingAppCoveragesCreateInstance(body: RoutingAppCoverageCreateRequest, completion: @escaping ((_ data: RoutingAppCoverageResponse?,_ error: Error?) -> Void)) {
        routingAppCoveragesCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/routingAppCoverages
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "attributes" : {
      "fileName" : "fileName",
      "fileSize" : 0,
      "assetDeliveryState" : {
        "warnings" : [ null, null ],
        "state" : "AWAITING_UPLOAD",
        "errors" : [ {
          "code" : "code",
          "description" : "description"
        }, {
          "code" : "code",
          "description" : "description"
        } ]
      },
      "sourceFileChecksum" : "sourceFileChecksum",
      "uploadOperations" : [ {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      }, {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      } ]
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "routingAppCoverages"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  } ]
}}]
     - parameter body: (body) RoutingAppCoverage representation 

     - returns: RequestBuilder<RoutingAppCoverageResponse> 
     */
    open class func routingAppCoveragesCreateInstanceWithRequestBuilder(body: RoutingAppCoverageCreateRequest) -> RequestBuilder<RoutingAppCoverageResponse> {
        let path = "/v1/routingAppCoverages"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoutingAppCoverageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func routingAppCoveragesDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        routingAppCoveragesDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/routingAppCoverages/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func routingAppCoveragesDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/routingAppCoverages/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_routingAppCoveragesGetInstance: String { 
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_routingAppCoveragesGetInstance: String { 
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func routingAppCoveragesGetInstance(_id: String, fieldsRoutingAppCoverages: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: RoutingAppCoverageResponse?,_ error: Error?) -> Void)) {
        routingAppCoveragesGetInstanceWithRequestBuilder(_id: _id, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/routingAppCoverages/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "attributes" : {
      "fileName" : "fileName",
      "fileSize" : 0,
      "assetDeliveryState" : {
        "warnings" : [ null, null ],
        "state" : "AWAITING_UPLOAD",
        "errors" : [ {
          "code" : "code",
          "description" : "description"
        }, {
          "code" : "code",
          "description" : "description"
        } ]
      },
      "sourceFileChecksum" : "sourceFileChecksum",
      "uploadOperations" : [ {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      }, {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      } ]
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "routingAppCoverages"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<RoutingAppCoverageResponse> 
     */
    open class func routingAppCoveragesGetInstanceWithRequestBuilder(_id: String, fieldsRoutingAppCoverages: [String]? = nil, include: [String]? = nil) -> RequestBuilder<RoutingAppCoverageResponse> {
        var path = "/v1/routingAppCoverages/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[routingAppCoverages]": fieldsRoutingAppCoverages, 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<RoutingAppCoverageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) RoutingAppCoverage representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func routingAppCoveragesUpdateInstance(body: RoutingAppCoverageUpdateRequest, _id: String, completion: @escaping ((_ data: RoutingAppCoverageResponse?,_ error: Error?) -> Void)) {
        routingAppCoveragesUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/routingAppCoverages/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "attributes" : {
      "fileName" : "fileName",
      "fileSize" : 0,
      "assetDeliveryState" : {
        "warnings" : [ null, null ],
        "state" : "AWAITING_UPLOAD",
        "errors" : [ {
          "code" : "code",
          "description" : "description"
        }, {
          "code" : "code",
          "description" : "description"
        } ]
      },
      "sourceFileChecksum" : "sourceFileChecksum",
      "uploadOperations" : [ {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      }, {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      } ]
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "routingAppCoverages"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  } ]
}}]
     - parameter body: (body) RoutingAppCoverage representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<RoutingAppCoverageResponse> 
     */
    open class func routingAppCoveragesUpdateInstanceWithRequestBuilder(body: RoutingAppCoverageUpdateRequest, _id: String) -> RequestBuilder<RoutingAppCoverageResponse> {
        var path = "/v1/routingAppCoverages/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RoutingAppCoverageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
