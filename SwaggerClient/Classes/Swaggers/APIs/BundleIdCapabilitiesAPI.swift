//
// BundleIdCapabilitiesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BundleIdCapabilitiesAPI {
    /**

     - parameter body: (body) BundleIdCapability representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdCapabilitiesCreateInstance(body: BundleIdCapabilityCreateRequest, completion: @escaping ((_ data: BundleIdCapabilityResponse?,_ error: Error?) -> Void)) {
        bundleIdCapabilitiesCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/bundleIdCapabilities
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "settings" : [ {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      }, {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      } ],
      "capabilityType" : "ICLOUD"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIdCapabilities"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter body: (body) BundleIdCapability representation 

     - returns: RequestBuilder<BundleIdCapabilityResponse> 
     */
    open class func bundleIdCapabilitiesCreateInstanceWithRequestBuilder(body: BundleIdCapabilityCreateRequest) -> RequestBuilder<BundleIdCapabilityResponse> {
        let path = "/v1/bundleIdCapabilities"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleIdCapabilityResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdCapabilitiesDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        bundleIdCapabilitiesDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/bundleIdCapabilities/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func bundleIdCapabilitiesDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/bundleIdCapabilities/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) BundleIdCapability representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdCapabilitiesUpdateInstance(body: BundleIdCapabilityUpdateRequest, _id: String, completion: @escaping ((_ data: BundleIdCapabilityResponse?,_ error: Error?) -> Void)) {
        bundleIdCapabilitiesUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/bundleIdCapabilities/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "settings" : [ {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      }, {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      } ],
      "capabilityType" : "ICLOUD"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIdCapabilities"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter body: (body) BundleIdCapability representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<BundleIdCapabilityResponse> 
     */
    open class func bundleIdCapabilitiesUpdateInstanceWithRequestBuilder(body: BundleIdCapabilityUpdateRequest, _id: String) -> RequestBuilder<BundleIdCapabilityResponse> {
        var path = "/v1/bundleIdCapabilities/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleIdCapabilityResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
