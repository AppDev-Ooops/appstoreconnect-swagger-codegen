//
// CustomerReviewsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CustomerReviewsAPI {
    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_customerReviewsGetInstance: String { 
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter include
     */
    public enum Include_customerReviewsGetInstance: String { 
        case response = "response"
    }

    /**
     * enum for parameter fieldsCustomerReviewResponses
     */
    public enum FieldsCustomerReviewResponses_customerReviewsGetInstance: String { 
        case lastmodifieddate = "lastModifiedDate"
        case responsebody = "responseBody"
        case review = "review"
        case state = "state"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerReviewsGetInstance(_id: String, fieldsCustomerReviews: [String]? = nil, include: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil, completion: @escaping ((_ data: CustomerReviewResponse?,_ error: Error?) -> Void)) {
        customerReviewsGetInstanceWithRequestBuilder(_id: _id, fieldsCustomerReviews: fieldsCustomerReviews, include: include, fieldsCustomerReviewResponses: fieldsCustomerReviewResponses).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/customerReviews/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "response" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviewResponses"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "reviewerNickname" : "reviewerNickname",
      "rating" : 1,
      "title" : "title",
      "body" : "body",
      "territory" : "ABW"
    },
    "id" : "id",
    "type" : "customerReviews"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "review" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviews"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "responseBody" : "responseBody",
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "state" : "PUBLISHED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "customerReviewResponses"
  }, {
    "relationships" : {
      "review" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviews"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "responseBody" : "responseBody",
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "state" : "PUBLISHED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "customerReviewResponses"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)

     - returns: RequestBuilder<CustomerReviewResponse> 
     */
    open class func customerReviewsGetInstanceWithRequestBuilder(_id: String, fieldsCustomerReviews: [String]? = nil, include: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil) -> RequestBuilder<CustomerReviewResponse> {
        var path = "/v1/customerReviews/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[customerReviews]": fieldsCustomerReviews, 
                        "include": include, 
                        "fields[customerReviewResponses]": fieldsCustomerReviewResponses
        ])


        let requestBuilder: RequestBuilder<CustomerReviewResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_customerReviewsResponseGetToOneRelated: String { 
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsCustomerReviewResponses
     */
    public enum FieldsCustomerReviewResponses_customerReviewsResponseGetToOneRelated: String { 
        case lastmodifieddate = "lastModifiedDate"
        case responsebody = "responseBody"
        case review = "review"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_customerReviewsResponseGetToOneRelated: String { 
        case review = "review"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func customerReviewsResponseGetToOneRelated(_id: String, fieldsCustomerReviews: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: CustomerReviewResponseV1Response?,_ error: Error?) -> Void)) {
        customerReviewsResponseGetToOneRelatedWithRequestBuilder(_id: _id, fieldsCustomerReviews: fieldsCustomerReviews, fieldsCustomerReviewResponses: fieldsCustomerReviewResponses, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/customerReviews/{id}/response
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "review" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviews"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "responseBody" : "responseBody",
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "state" : "PUBLISHED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "customerReviewResponses"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "response" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviewResponses"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "reviewerNickname" : "reviewerNickname",
      "rating" : 1,
      "title" : "title",
      "body" : "body",
      "territory" : "ABW"
    },
    "id" : "id",
    "type" : "customerReviews"
  }, {
    "relationships" : {
      "response" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviewResponses"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "reviewerNickname" : "reviewerNickname",
      "rating" : 1,
      "title" : "title",
      "body" : "body",
      "territory" : "ABW"
    },
    "id" : "id",
    "type" : "customerReviews"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CustomerReviewResponseV1Response> 
     */
    open class func customerReviewsResponseGetToOneRelatedWithRequestBuilder(_id: String, fieldsCustomerReviews: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil, include: [String]? = nil) -> RequestBuilder<CustomerReviewResponseV1Response> {
        var path = "/v1/customerReviews/{id}/response"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[customerReviews]": fieldsCustomerReviews, 
                        "fields[customerReviewResponses]": fieldsCustomerReviewResponses, 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CustomerReviewResponseV1Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
