//
// ScmRepositoriesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ScmRepositoriesAPI {
    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_scmRepositoriesGetCollection: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_scmRepositoriesGetCollection: String { 
        case defaultbranch = "defaultBranch"
        case scmprovider = "scmProvider"
    }

    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_scmRepositoriesGetCollection: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsScmPullRequests
     */
    public enum FieldsScmPullRequests_scmRepositoriesGetCollection: String { 
        case destinationbranchname = "destinationBranchName"
        case destinationrepositoryname = "destinationRepositoryName"
        case destinationrepositoryowner = "destinationRepositoryOwner"
        case isclosed = "isClosed"
        case iscrossrepository = "isCrossRepository"
        case number = "number"
        case repository = "repository"
        case sourcebranchname = "sourceBranchName"
        case sourcerepositoryname = "sourceRepositoryName"
        case sourcerepositoryowner = "sourceRepositoryOwner"
        case title = "title"
        case weburl = "webUrl"
    }

    /**

     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scmRepositoriesGetCollection(filterId: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmPullRequests: [String]? = nil, completion: @escaping ((_ data: ScmRepositoriesResponse?,_ error: Error?) -> Void)) {
        scmRepositoriesGetCollectionWithRequestBuilder(filterId: filterId, fieldsScmRepositories: fieldsScmRepositories, limit: limit, include: include, fieldsScmGitReferences: fieldsScmGitReferences, fieldsScmPullRequests: fieldsScmPullRequests).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/scmRepositories
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  }, {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)

     - returns: RequestBuilder<ScmRepositoriesResponse> 
     */
    open class func scmRepositoriesGetCollectionWithRequestBuilder(filterId: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmPullRequests: [String]? = nil) -> RequestBuilder<ScmRepositoriesResponse> {
        let path = "/v1/scmRepositories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[id]": filterId, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[scmPullRequests]": fieldsScmPullRequests
        ])


        let requestBuilder: RequestBuilder<ScmRepositoriesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_scmRepositoriesGetInstance: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_scmRepositoriesGetInstance: String { 
        case defaultbranch = "defaultBranch"
        case scmprovider = "scmProvider"
    }

    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_scmRepositoriesGetInstance: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsScmPullRequests
     */
    public enum FieldsScmPullRequests_scmRepositoriesGetInstance: String { 
        case destinationbranchname = "destinationBranchName"
        case destinationrepositoryname = "destinationRepositoryName"
        case destinationrepositoryowner = "destinationRepositoryOwner"
        case isclosed = "isClosed"
        case iscrossrepository = "isCrossRepository"
        case number = "number"
        case repository = "repository"
        case sourcebranchname = "sourceBranchName"
        case sourcerepositoryname = "sourceRepositoryName"
        case sourcerepositoryowner = "sourceRepositoryOwner"
        case title = "title"
        case weburl = "webUrl"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scmRepositoriesGetInstance(_id: String, fieldsScmRepositories: [String]? = nil, include: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmPullRequests: [String]? = nil, completion: @escaping ((_ data: ScmRepositoryResponse?,_ error: Error?) -> Void)) {
        scmRepositoriesGetInstanceWithRequestBuilder(_id: _id, fieldsScmRepositories: fieldsScmRepositories, include: include, fieldsScmGitReferences: fieldsScmGitReferences, fieldsScmPullRequests: fieldsScmPullRequests).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/scmRepositories/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)

     - returns: RequestBuilder<ScmRepositoryResponse> 
     */
    open class func scmRepositoriesGetInstanceWithRequestBuilder(_id: String, fieldsScmRepositories: [String]? = nil, include: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmPullRequests: [String]? = nil) -> RequestBuilder<ScmRepositoryResponse> {
        var path = "/v1/scmRepositories/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "include": include, 
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[scmPullRequests]": fieldsScmPullRequests
        ])


        let requestBuilder: RequestBuilder<ScmRepositoryResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_scmRepositoriesGitReferencesGetToManyRelated: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_scmRepositoriesGitReferencesGetToManyRelated: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_scmRepositoriesGitReferencesGetToManyRelated: String { 
        case repository = "repository"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scmRepositoriesGitReferencesGetToManyRelated(_id: String, fieldsScmGitReferences: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: ScmGitReferencesResponse?,_ error: Error?) -> Void)) {
        scmRepositoriesGitReferencesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsScmGitReferences: fieldsScmGitReferences, fieldsScmRepositories: fieldsScmRepositories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/scmRepositories/{id}/gitReferences
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "isDeleted" : true,
      "kind" : "BRANCH",
      "name" : "name",
      "canonicalName" : "canonicalName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "scmGitReferences"
  }, {
    "relationships" : {
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "isDeleted" : true,
      "kind" : "BRANCH",
      "name" : "name",
      "canonicalName" : "canonicalName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "scmGitReferences"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  }, {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ScmGitReferencesResponse> 
     */
    open class func scmRepositoriesGitReferencesGetToManyRelatedWithRequestBuilder(_id: String, fieldsScmGitReferences: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<ScmGitReferencesResponse> {
        var path = "/v1/scmRepositories/{id}/gitReferences"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ScmGitReferencesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsScmPullRequests
     */
    public enum FieldsScmPullRequests_scmRepositoriesPullRequestsGetToManyRelated: String { 
        case destinationbranchname = "destinationBranchName"
        case destinationrepositoryname = "destinationRepositoryName"
        case destinationrepositoryowner = "destinationRepositoryOwner"
        case isclosed = "isClosed"
        case iscrossrepository = "isCrossRepository"
        case number = "number"
        case repository = "repository"
        case sourcebranchname = "sourceBranchName"
        case sourcerepositoryname = "sourceRepositoryName"
        case sourcerepositoryowner = "sourceRepositoryOwner"
        case title = "title"
        case weburl = "webUrl"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_scmRepositoriesPullRequestsGetToManyRelated: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_scmRepositoriesPullRequestsGetToManyRelated: String { 
        case repository = "repository"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scmRepositoriesPullRequestsGetToManyRelated(_id: String, fieldsScmPullRequests: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: ScmPullRequestsResponse?,_ error: Error?) -> Void)) {
        scmRepositoriesPullRequestsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsScmPullRequests: fieldsScmPullRequests, fieldsScmRepositories: fieldsScmRepositories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/scmRepositories/{id}/pullRequests
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "number" : 0,
      "destinationBranchName" : "destinationBranchName",
      "isClosed" : true,
      "isCrossRepository" : true,
      "webUrl" : "http://example.com/aeiou",
      "sourceRepositoryOwner" : "sourceRepositoryOwner",
      "sourceBranchName" : "sourceBranchName",
      "title" : "title",
      "destinationRepositoryOwner" : "destinationRepositoryOwner",
      "destinationRepositoryName" : "destinationRepositoryName",
      "sourceRepositoryName" : "sourceRepositoryName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "scmPullRequests"
  }, {
    "relationships" : {
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "number" : 0,
      "destinationBranchName" : "destinationBranchName",
      "isClosed" : true,
      "isCrossRepository" : true,
      "webUrl" : "http://example.com/aeiou",
      "sourceRepositoryOwner" : "sourceRepositoryOwner",
      "sourceBranchName" : "sourceBranchName",
      "title" : "title",
      "destinationRepositoryOwner" : "destinationRepositoryOwner",
      "destinationRepositoryName" : "destinationRepositoryName",
      "sourceRepositoryName" : "sourceRepositoryName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "scmPullRequests"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  }, {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ScmPullRequestsResponse> 
     */
    open class func scmRepositoriesPullRequestsGetToManyRelatedWithRequestBuilder(_id: String, fieldsScmPullRequests: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<ScmPullRequestsResponse> {
        var path = "/v1/scmRepositories/{id}/pullRequests"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[scmPullRequests]": fieldsScmPullRequests, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ScmPullRequestsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
