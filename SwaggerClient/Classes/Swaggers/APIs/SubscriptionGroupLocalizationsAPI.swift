//
// SubscriptionGroupLocalizationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SubscriptionGroupLocalizationsAPI {
    /**

     - parameter body: (body) SubscriptionGroupLocalization representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupLocalizationsCreateInstance(body: SubscriptionGroupLocalizationCreateRequest, completion: @escaping ((_ data: SubscriptionGroupLocalizationResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupLocalizationsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/subscriptionGroupLocalizations
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscriptionGroup" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      }
    },
    "attributes" : {
      "customAppName" : "customAppName",
      "name" : "name",
      "state" : "PREPARE_FOR_SUBMISSION",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionGroupLocalizations"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  }, {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  } ]
}}]
     - parameter body: (body) SubscriptionGroupLocalization representation 

     - returns: RequestBuilder<SubscriptionGroupLocalizationResponse> 
     */
    open class func subscriptionGroupLocalizationsCreateInstanceWithRequestBuilder(body: SubscriptionGroupLocalizationCreateRequest) -> RequestBuilder<SubscriptionGroupLocalizationResponse> {
        let path = "/v1/subscriptionGroupLocalizations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionGroupLocalizationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupLocalizationsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        subscriptionGroupLocalizationsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/subscriptionGroupLocalizations/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionGroupLocalizationsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/subscriptionGroupLocalizations/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptionGroupLocalizations
     */
    public enum FieldsSubscriptionGroupLocalizations_subscriptionGroupLocalizationsGetInstance: String { 
        case customappname = "customAppName"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscriptiongroup = "subscriptionGroup"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionGroupLocalizationsGetInstance: String { 
        case subscriptiongroup = "subscriptionGroup"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupLocalizationsGetInstance(_id: String, fieldsSubscriptionGroupLocalizations: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionGroupLocalizationResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupLocalizationsGetInstanceWithRequestBuilder(_id: _id, fieldsSubscriptionGroupLocalizations: fieldsSubscriptionGroupLocalizations, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptionGroupLocalizations/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscriptionGroup" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      }
    },
    "attributes" : {
      "customAppName" : "customAppName",
      "name" : "name",
      "state" : "PREPARE_FOR_SUBMISSION",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionGroupLocalizations"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  }, {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionGroupLocalizationResponse> 
     */
    open class func subscriptionGroupLocalizationsGetInstanceWithRequestBuilder(_id: String, fieldsSubscriptionGroupLocalizations: [String]? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionGroupLocalizationResponse> {
        var path = "/v1/subscriptionGroupLocalizations/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptionGroupLocalizations]": fieldsSubscriptionGroupLocalizations, 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionGroupLocalizationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) SubscriptionGroupLocalization representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupLocalizationsUpdateInstance(body: SubscriptionGroupLocalizationUpdateRequest, _id: String, completion: @escaping ((_ data: SubscriptionGroupLocalizationResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupLocalizationsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/subscriptionGroupLocalizations/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscriptionGroup" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      }
    },
    "attributes" : {
      "customAppName" : "customAppName",
      "name" : "name",
      "state" : "PREPARE_FOR_SUBMISSION",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionGroupLocalizations"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  }, {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  } ]
}}]
     - parameter body: (body) SubscriptionGroupLocalization representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<SubscriptionGroupLocalizationResponse> 
     */
    open class func subscriptionGroupLocalizationsUpdateInstanceWithRequestBuilder(body: SubscriptionGroupLocalizationUpdateRequest, _id: String) -> RequestBuilder<SubscriptionGroupLocalizationResponse> {
        var path = "/v1/subscriptionGroupLocalizations/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionGroupLocalizationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
