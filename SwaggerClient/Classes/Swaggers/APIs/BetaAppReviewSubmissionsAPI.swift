//
// BetaAppReviewSubmissionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BetaAppReviewSubmissionsAPI {
    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaAppReviewSubmissionsBuildGetToOneRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func betaAppReviewSubmissionsBuildGetToOneRelated(_id: String, fieldsBuilds: [String]? = nil, completion: @escaping ((_ data: BuildResponse?,_ error: Error?) -> Void)) {
        betaAppReviewSubmissionsBuildGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBuilds: fieldsBuilds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/betaAppReviewSubmissions/{id}/build
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)

     - returns: RequestBuilder<BuildResponse> 
     */
    open class func betaAppReviewSubmissionsBuildGetToOneRelatedWithRequestBuilder(_id: String, fieldsBuilds: [String]? = nil) -> RequestBuilder<BuildResponse> {
        var path = "/v1/betaAppReviewSubmissions/{id}/build"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[builds]": fieldsBuilds
        ])


        let requestBuilder: RequestBuilder<BuildResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) BetaAppReviewSubmission representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func betaAppReviewSubmissionsCreateInstance(body: BetaAppReviewSubmissionCreateRequest, completion: @escaping ((_ data: BetaAppReviewSubmissionResponse?,_ error: Error?) -> Void)) {
        betaAppReviewSubmissionsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/betaAppReviewSubmissions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "betaReviewState" : "WAITING_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppReviewSubmissions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ]
}}]
     - parameter body: (body) BetaAppReviewSubmission representation 

     - returns: RequestBuilder<BetaAppReviewSubmissionResponse> 
     */
    open class func betaAppReviewSubmissionsCreateInstanceWithRequestBuilder(body: BetaAppReviewSubmissionCreateRequest) -> RequestBuilder<BetaAppReviewSubmissionResponse> {
        let path = "/v1/betaAppReviewSubmissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BetaAppReviewSubmissionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter filterBetaReviewState
     */
    public enum FilterBetaReviewState_betaAppReviewSubmissionsGetCollection: String { 
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case rejected = "REJECTED"
        case approved = "APPROVED"
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_betaAppReviewSubmissionsGetCollection: String { 
        case betareviewstate = "betaReviewState"
        case build = "build"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter include
     */
    public enum Include_betaAppReviewSubmissionsGetCollection: String { 
        case build = "build"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaAppReviewSubmissionsGetCollection: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter filterBuild: (query) filter by id(s) of related &#x27;build&#x27; 
     - parameter filterBetaReviewState: (query) filter by attribute &#x27;betaReviewState&#x27; (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func betaAppReviewSubmissionsGetCollection(filterBuild: [String], filterBetaReviewState: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsBuilds: [String]? = nil, completion: @escaping ((_ data: BetaAppReviewSubmissionsResponse?,_ error: Error?) -> Void)) {
        betaAppReviewSubmissionsGetCollectionWithRequestBuilder(filterBuild: filterBuild, filterBetaReviewState: filterBetaReviewState, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, limit: limit, include: include, fieldsBuilds: fieldsBuilds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/betaAppReviewSubmissions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "betaReviewState" : "WAITING_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppReviewSubmissions"
  }, {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "betaReviewState" : "WAITING_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppReviewSubmissions"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ]
}}]
     - parameter filterBuild: (query) filter by id(s) of related &#x27;build&#x27; 
     - parameter filterBetaReviewState: (query) filter by attribute &#x27;betaReviewState&#x27; (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)

     - returns: RequestBuilder<BetaAppReviewSubmissionsResponse> 
     */
    open class func betaAppReviewSubmissionsGetCollectionWithRequestBuilder(filterBuild: [String], filterBetaReviewState: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsBuilds: [String]? = nil) -> RequestBuilder<BetaAppReviewSubmissionsResponse> {
        let path = "/v1/betaAppReviewSubmissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[betaReviewState]": filterBetaReviewState, 
                        "filter[build]": filterBuild, 
                        "fields[betaAppReviewSubmissions]": fieldsBetaAppReviewSubmissions, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[builds]": fieldsBuilds
        ])


        let requestBuilder: RequestBuilder<BetaAppReviewSubmissionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_betaAppReviewSubmissionsGetInstance: String { 
        case betareviewstate = "betaReviewState"
        case build = "build"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter include
     */
    public enum Include_betaAppReviewSubmissionsGetInstance: String { 
        case build = "build"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_betaAppReviewSubmissionsGetInstance: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func betaAppReviewSubmissionsGetInstance(_id: String, fieldsBetaAppReviewSubmissions: [String]? = nil, include: [String]? = nil, fieldsBuilds: [String]? = nil, completion: @escaping ((_ data: BetaAppReviewSubmissionResponse?,_ error: Error?) -> Void)) {
        betaAppReviewSubmissionsGetInstanceWithRequestBuilder(_id: _id, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, include: include, fieldsBuilds: fieldsBuilds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/betaAppReviewSubmissions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "betaReviewState" : "WAITING_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppReviewSubmissions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)

     - returns: RequestBuilder<BetaAppReviewSubmissionResponse> 
     */
    open class func betaAppReviewSubmissionsGetInstanceWithRequestBuilder(_id: String, fieldsBetaAppReviewSubmissions: [String]? = nil, include: [String]? = nil, fieldsBuilds: [String]? = nil) -> RequestBuilder<BetaAppReviewSubmissionResponse> {
        var path = "/v1/betaAppReviewSubmissions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaAppReviewSubmissions]": fieldsBetaAppReviewSubmissions, 
                        "include": include, 
                        "fields[builds]": fieldsBuilds
        ])


        let requestBuilder: RequestBuilder<BetaAppReviewSubmissionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
