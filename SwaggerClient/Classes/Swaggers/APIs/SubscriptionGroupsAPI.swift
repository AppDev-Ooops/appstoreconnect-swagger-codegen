//
// SubscriptionGroupsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SubscriptionGroupsAPI {
    /**

     - parameter body: (body) SubscriptionGroup representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupsCreateInstance(body: SubscriptionGroupCreateRequest, completion: @escaping ((_ data: SubscriptionGroupResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/subscriptionGroups
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) SubscriptionGroup representation 

     - returns: RequestBuilder<SubscriptionGroupResponse> 
     */
    open class func subscriptionGroupsCreateInstanceWithRequestBuilder(body: SubscriptionGroupCreateRequest) -> RequestBuilder<SubscriptionGroupResponse> {
        let path = "/v1/subscriptionGroups"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionGroupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        subscriptionGroupsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/subscriptionGroups/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func subscriptionGroupsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/subscriptionGroups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_subscriptionGroupsGetInstance: String { 
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionGroupsGetInstance: String { 
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionGroupsGetInstance: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionGroupLocalizations
     */
    public enum FieldsSubscriptionGroupLocalizations_subscriptionGroupsGetInstance: String { 
        case customappname = "customAppName"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscriptiongroup = "subscriptionGroup"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limitSubscriptionGroupLocalizations: (query) maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)
     - parameter limitSubscriptions: (query) maximum number of related subscriptions returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupsGetInstance(_id: String, fieldsSubscriptionGroups: [String]? = nil, include: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionGroupLocalizations: [String]? = nil, limitSubscriptionGroupLocalizations: Int? = nil, limitSubscriptions: Int? = nil, completion: @escaping ((_ data: SubscriptionGroupResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupsGetInstanceWithRequestBuilder(_id: _id, fieldsSubscriptionGroups: fieldsSubscriptionGroups, include: include, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionGroupLocalizations: fieldsSubscriptionGroupLocalizations, limitSubscriptionGroupLocalizations: limitSubscriptionGroupLocalizations, limitSubscriptions: limitSubscriptions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptionGroups/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limitSubscriptionGroupLocalizations: (query) maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)
     - parameter limitSubscriptions: (query) maximum number of related subscriptions returned (when they are included) (optional)

     - returns: RequestBuilder<SubscriptionGroupResponse> 
     */
    open class func subscriptionGroupsGetInstanceWithRequestBuilder(_id: String, fieldsSubscriptionGroups: [String]? = nil, include: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionGroupLocalizations: [String]? = nil, limitSubscriptionGroupLocalizations: Int? = nil, limitSubscriptions: Int? = nil) -> RequestBuilder<SubscriptionGroupResponse> {
        var path = "/v1/subscriptionGroups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptionGroups]": fieldsSubscriptionGroups, 
                        "include": include, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[subscriptionGroupLocalizations]": fieldsSubscriptionGroupLocalizations, 
                        "limit[subscriptionGroupLocalizations]": limitSubscriptionGroupLocalizations?.encodeToJSON(), 
                        "limit[subscriptions]": limitSubscriptions?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<SubscriptionGroupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated: String { 
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsSubscriptionGroupLocalizations
     */
    public enum FieldsSubscriptionGroupLocalizations_subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated: String { 
        case customappname = "customAppName"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscriptiongroup = "subscriptionGroup"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated: String { 
        case subscriptiongroup = "subscriptionGroup"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated(_id: String, fieldsSubscriptionGroups: [String]? = nil, fieldsSubscriptionGroupLocalizations: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionGroupLocalizationsResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsSubscriptionGroupLocalizations: fieldsSubscriptionGroupLocalizations, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptionGroups/{id}/subscriptionGroupLocalizations
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "subscriptionGroup" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      }
    },
    "attributes" : {
      "customAppName" : "customAppName",
      "name" : "name",
      "state" : "PREPARE_FOR_SUBMISSION",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionGroupLocalizations"
  }, {
    "relationships" : {
      "subscriptionGroup" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      }
    },
    "attributes" : {
      "customAppName" : "customAppName",
      "name" : "name",
      "state" : "PREPARE_FOR_SUBMISSION",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionGroupLocalizations"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  }, {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionGroupLocalizationsResponse> 
     */
    open class func subscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedWithRequestBuilder(_id: String, fieldsSubscriptionGroups: [String]? = nil, fieldsSubscriptionGroupLocalizations: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionGroupLocalizationsResponse> {
        var path = "/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptionGroups]": fieldsSubscriptionGroups, 
                        "fields[subscriptionGroupLocalizations]": fieldsSubscriptionGroupLocalizations, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionGroupLocalizationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterState
     */
    public enum FilterState_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case missingMetadata = "MISSING_METADATA"
        case readyToSubmit = "READY_TO_SUBMIT"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
        case pendingBinaryApproval = "PENDING_BINARY_APPROVAL"
        case approved = "APPROVED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case removedFromSale = "REMOVED_FROM_SALE"
        case rejected = "REJECTED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case name = "name"
        case name_1 = "-name"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsSubscriptionPromotionalOffers
     */
    public enum FieldsSubscriptionPromotionalOffers_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case duration = "duration"
        case name = "name"
        case numberofperiods = "numberOfPeriods"
        case offercode = "offerCode"
        case offermode = "offerMode"
        case prices = "prices"
        case subscription = "subscription"
    }

    /**
     * enum for parameter fieldsSubscriptionOfferCodes
     */
    public enum FieldsSubscriptionOfferCodes_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case active = "active"
        case customcodes = "customCodes"
        case customereligibilities = "customerEligibilities"
        case duration = "duration"
        case name = "name"
        case numberofperiods = "numberOfPeriods"
        case offereligibility = "offerEligibility"
        case offermode = "offerMode"
        case onetimeusecodes = "oneTimeUseCodes"
        case prices = "prices"
        case subscription = "subscription"
        case totalnumberofcodes = "totalNumberOfCodes"
    }

    /**
     * enum for parameter fieldsSubscriptionAppStoreReviewScreenshots
     */
    public enum FieldsSubscriptionAppStoreReviewScreenshots_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case sourcefilechecksum = "sourceFileChecksum"
        case subscription = "subscription"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsSubscriptionIntroductoryOffers
     */
    public enum FieldsSubscriptionIntroductoryOffers_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case duration = "duration"
        case enddate = "endDate"
        case numberofperiods = "numberOfPeriods"
        case offermode = "offerMode"
        case startdate = "startDate"
        case subscription = "subscription"
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsSubscriptionPrices
     */
    public enum FieldsSubscriptionPrices_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case preservecurrentprice = "preserveCurrentPrice"
        case preserved = "preserved"
        case startdate = "startDate"
        case subscription = "subscription"
        case subscriptionpricepoint = "subscriptionPricePoint"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsSubscriptionLocalizations
     */
    public enum FieldsSubscriptionLocalizations_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case _description = "description"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscription = "subscription"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionGroupsSubscriptionsGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case group = "group"
        case introductoryoffers = "introductoryOffers"
        case offercodes = "offerCodes"
        case prices = "prices"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case subscriptionlocalizations = "subscriptionLocalizations"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterProductId: (query) filter by attribute &#x27;productId&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitSubscriptionLocalizations: (query) maximum number of related subscriptionLocalizations returned (when they are included) (optional)
     - parameter limitIntroductoryOffers: (query) maximum number of related introductoryOffers returned (when they are included) (optional)
     - parameter limitPromotionalOffers: (query) maximum number of related promotionalOffers returned (when they are included) (optional)
     - parameter limitOfferCodes: (query) maximum number of related offerCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupsSubscriptionsGetToManyRelated(_id: String, filterName: [String]? = nil, filterProductId: [String]? = nil, filterState: [String]? = nil, sort: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptionPromotionalOffers: [String]? = nil, fieldsSubscriptionOfferCodes: [String]? = nil, fieldsSubscriptionAppStoreReviewScreenshots: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [String]? = nil, fieldsSubscriptionPrices: [String]? = nil, fieldsSubscriptionLocalizations: [String]? = nil, limit: Int? = nil, limitSubscriptionLocalizations: Int? = nil, limitIntroductoryOffers: Int? = nil, limitPromotionalOffers: Int? = nil, limitOfferCodes: Int? = nil, limitPrices: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionsResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupsSubscriptionsGetToManyRelatedWithRequestBuilder(_id: _id, filterName: filterName, filterProductId: filterProductId, filterState: filterState, sort: sort, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsSubscriptionPromotionalOffers: fieldsSubscriptionPromotionalOffers, fieldsSubscriptionOfferCodes: fieldsSubscriptionOfferCodes, fieldsSubscriptionAppStoreReviewScreenshots: fieldsSubscriptionAppStoreReviewScreenshots, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsSubscriptionIntroductoryOffers: fieldsSubscriptionIntroductoryOffers, fieldsSubscriptionPrices: fieldsSubscriptionPrices, fieldsSubscriptionLocalizations: fieldsSubscriptionLocalizations, limit: limit, limitSubscriptionLocalizations: limitSubscriptionLocalizations, limitIntroductoryOffers: limitIntroductoryOffers, limitPromotionalOffers: limitPromotionalOffers, limitOfferCodes: limitOfferCodes, limitPrices: limitPrices, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptionGroups/{id}/subscriptions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  }, {
    "relationships" : {
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionAppStoreReviewScreenshots"
        }
      },
      "promotionalOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionPromotionalOffers"
        } ]
      },
      "introductoryOffers" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        }, {
          "id" : "id",
          "type" : "subscriptionIntroductoryOffers"
        } ]
      },
      "offerCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionPrices"
        }, {
          "id" : "id",
          "type" : "subscriptionPrices"
        } ]
      },
      "subscriptionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "group" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGroups"
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "subscriptionPeriod" : "ONE_WEEK",
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "state" : "MISSING_METADATA",
      "groupLevel" : 0,
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "subscriptions"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterProductId: (query) filter by attribute &#x27;productId&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptionPromotionalOffers: (query) the fields to include for returned resources of type subscriptionPromotionalOffers (optional)
     - parameter fieldsSubscriptionOfferCodes: (query) the fields to include for returned resources of type subscriptionOfferCodes (optional)
     - parameter fieldsSubscriptionAppStoreReviewScreenshots: (query) the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionIntroductoryOffers: (query) the fields to include for returned resources of type subscriptionIntroductoryOffers (optional)
     - parameter fieldsSubscriptionPrices: (query) the fields to include for returned resources of type subscriptionPrices (optional)
     - parameter fieldsSubscriptionLocalizations: (query) the fields to include for returned resources of type subscriptionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitSubscriptionLocalizations: (query) maximum number of related subscriptionLocalizations returned (when they are included) (optional)
     - parameter limitIntroductoryOffers: (query) maximum number of related introductoryOffers returned (when they are included) (optional)
     - parameter limitPromotionalOffers: (query) maximum number of related promotionalOffers returned (when they are included) (optional)
     - parameter limitOfferCodes: (query) maximum number of related offerCodes returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionsResponse> 
     */
    open class func subscriptionGroupsSubscriptionsGetToManyRelatedWithRequestBuilder(_id: String, filterName: [String]? = nil, filterProductId: [String]? = nil, filterState: [String]? = nil, sort: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptionPromotionalOffers: [String]? = nil, fieldsSubscriptionOfferCodes: [String]? = nil, fieldsSubscriptionAppStoreReviewScreenshots: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsSubscriptionIntroductoryOffers: [String]? = nil, fieldsSubscriptionPrices: [String]? = nil, fieldsSubscriptionLocalizations: [String]? = nil, limit: Int? = nil, limitSubscriptionLocalizations: Int? = nil, limitIntroductoryOffers: Int? = nil, limitPromotionalOffers: Int? = nil, limitOfferCodes: Int? = nil, limitPrices: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionsResponse> {
        var path = "/v1/subscriptionGroups/{id}/subscriptions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[name]": filterName, 
                        "filter[productId]": filterProductId, 
                        "filter[state]": filterState, 
                        "sort": sort, 
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[subscriptionPromotionalOffers]": fieldsSubscriptionPromotionalOffers, 
                        "fields[subscriptionOfferCodes]": fieldsSubscriptionOfferCodes, 
                        "fields[subscriptionAppStoreReviewScreenshots]": fieldsSubscriptionAppStoreReviewScreenshots, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[subscriptionGroups]": fieldsSubscriptionGroups, 
                        "fields[subscriptionIntroductoryOffers]": fieldsSubscriptionIntroductoryOffers, 
                        "fields[subscriptionPrices]": fieldsSubscriptionPrices, 
                        "fields[subscriptionLocalizations]": fieldsSubscriptionLocalizations, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[subscriptionLocalizations]": limitSubscriptionLocalizations?.encodeToJSON(), 
                        "limit[introductoryOffers]": limitIntroductoryOffers?.encodeToJSON(), 
                        "limit[promotionalOffers]": limitPromotionalOffers?.encodeToJSON(), 
                        "limit[offerCodes]": limitOfferCodes?.encodeToJSON(), 
                        "limit[prices]": limitPrices?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) SubscriptionGroup representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionGroupsUpdateInstance(body: SubscriptionGroupUpdateRequest, _id: String, completion: @escaping ((_ data: SubscriptionGroupResponse?,_ error: Error?) -> Void)) {
        subscriptionGroupsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/subscriptionGroups/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) SubscriptionGroup representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<SubscriptionGroupResponse> 
     */
    open class func subscriptionGroupsUpdateInstanceWithRequestBuilder(body: SubscriptionGroupUpdateRequest, _id: String) -> RequestBuilder<SubscriptionGroupResponse> {
        var path = "/v1/subscriptionGroups/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionGroupResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
