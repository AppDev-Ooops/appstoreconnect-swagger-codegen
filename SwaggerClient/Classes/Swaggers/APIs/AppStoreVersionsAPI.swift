//
// AppStoreVersionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AppStoreVersionsAPI {
    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appStoreVersionsAgeRatingDeclarationGetToOneRelated: String { 
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelated(_id: String, fieldsAgeRatingDeclarations: [String]? = nil, completion: @escaping ((_ data: AgeRatingDeclarationResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/ageRatingDeclaration
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "alcoholTobaccoOrDrugUseOrReferences" : "NONE",
      "gamblingAndContests" : true,
      "gamblingSimulated" : "NONE",
      "sexualContentGraphicAndNudity" : "NONE",
      "violenceRealistic" : "NONE",
      "gambling" : true,
      "profanityOrCrudeHumor" : "NONE",
      "seventeenPlus" : true,
      "horrorOrFearThemes" : "NONE",
      "violenceRealisticProlongedGraphicOrSadistic" : "NONE",
      "contests" : "NONE",
      "matureOrSuggestiveThemes" : "NONE",
      "unrestrictedWebAccess" : true,
      "violenceCartoonOrFantasy" : "NONE",
      "kidsAgeBand" : "FIVE_AND_UNDER",
      "medicalOrTreatmentInformation" : "NONE",
      "sexualContentOrNudity" : "NONE"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ageRatingDeclarations"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)

     - returns: RequestBuilder<AgeRatingDeclarationResponse> 
     */
    open class func appStoreVersionsAgeRatingDeclarationGetToOneRelatedWithRequestBuilder(_id: String, fieldsAgeRatingDeclarations: [String]? = nil) -> RequestBuilder<AgeRatingDeclarationResponse> {
        var path = "/v1/appStoreVersions/{id}/ageRatingDeclaration"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ageRatingDeclarations]": fieldsAgeRatingDeclarations
        ])


        let requestBuilder: RequestBuilder<AgeRatingDeclarationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String { 
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsAppClipAppStoreReviewDetails
     */
    public enum FieldsAppClipAppStoreReviewDetails_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String { 
        case appclipdefaultexperience = "appClipDefaultExperience"
        case invocationurls = "invocationUrls"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String { 
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperienceLocalizations
     */
    public enum FieldsAppClipDefaultExperienceLocalizations_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String { 
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appclipheaderimage = "appClipHeaderImage"
        case locale = "locale"
        case subtitle = "subtitle"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppClipDefaultExperienceGetToOneRelated: String { 
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelated(_id: String, fieldsAppClips: [String]? = nil, fieldsAppClipAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsAppClipDefaultExperienceLocalizations: [String]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppClipDefaultExperienceResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAppClips: fieldsAppClips, fieldsAppClipAppStoreReviewDetails: fieldsAppClipAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppClipDefaultExperienceLocalizations: fieldsAppClipDefaultExperienceLocalizations, limitAppClipDefaultExperienceLocalizations: limitAppClipDefaultExperienceLocalizations, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/appClipDefaultExperience
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appClipAppStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appClipAppStoreReviewDetails"
        }
      },
      "appClip" : {
        "data" : {
          "id" : "id",
          "type" : "appClips"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperienceLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClipDefaultExperienceLocalizations"
        }, {
          "id" : "id",
          "type" : "appClipDefaultExperienceLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "releaseWithAppStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "attributes" : {
      "action" : "OPEN"
    },
    "id" : "id",
    "type" : "appClipDefaultExperiences"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppClipAppStoreReviewDetails: (query) the fields to include for returned resources of type appClipAppStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppClipDefaultExperienceLocalizations: (query) the fields to include for returned resources of type appClipDefaultExperienceLocalizations (optional)
     - parameter limitAppClipDefaultExperienceLocalizations: (query) maximum number of related appClipDefaultExperienceLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppClipDefaultExperienceResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelatedWithRequestBuilder(_id: String, fieldsAppClips: [String]? = nil, fieldsAppClipAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsAppClipDefaultExperienceLocalizations: [String]? = nil, limitAppClipDefaultExperienceLocalizations: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppClipDefaultExperienceResponse> {
        var path = "/v1/appStoreVersions/{id}/appClipDefaultExperience"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appClips]": fieldsAppClips, 
                        "fields[appClipAppStoreReviewDetails]": fieldsAppClipAppStoreReviewDetails, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[appClipDefaultExperiences]": fieldsAppClipDefaultExperiences, 
                        "fields[appClipDefaultExperienceLocalizations]": fieldsAppClipDefaultExperienceLocalizations, 
                        "limit[appClipDefaultExperienceLocalizations]": limitAppClipDefaultExperienceLocalizations?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppClipDefaultExperienceResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(_id: String, completion: @escaping ((_ data: AppStoreVersionAppClipDefaultExperienceLinkageResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "id" : "id",
    "type" : "appClipDefaultExperiences"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipWithRequestBuilder(_id: String) -> RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse> {
        var path = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AppStoreVersionAppClipDefaultExperienceLinkageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) Related linkage 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(body: AppStoreVersionAppClipDefaultExperienceLinkageRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/appClipDefaultExperience
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) Related linkage 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipWithRequestBuilder(body: AppStoreVersionAppClipDefaultExperienceLinkageRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String { 
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppStoreReviewAttachments
     */
    public enum FieldsAppStoreReviewAttachments_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String { 
        case appstorereviewdetail = "appStoreReviewDetail"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreReviewDetailGetToOneRelated: String { 
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreReviewAttachments: (query) the fields to include for returned resources of type appStoreReviewAttachments (optional)
     - parameter limitAppStoreReviewAttachments: (query) maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelated(_id: String, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppStoreReviewAttachments: [String]? = nil, limitAppStoreReviewAttachments: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppStoreReviewDetailResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppStoreReviewAttachments: fieldsAppStoreReviewAttachments, limitAppStoreReviewAttachments: limitAppStoreReviewAttachments, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/appStoreReviewDetail
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appStoreReviewAttachments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreReviewAttachments"
        }, {
          "id" : "id",
          "type" : "appStoreReviewAttachments"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "demoAccountPassword" : "demoAccountPassword",
      "notes" : "notes",
      "contactEmail" : "contactEmail",
      "contactFirstName" : "contactFirstName",
      "demoAccountRequired" : true,
      "demoAccountName" : "demoAccountName",
      "contactLastName" : "contactLastName",
      "contactPhone" : "contactPhone"
    },
    "id" : "id",
    "type" : "appStoreReviewDetails"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppStoreReviewAttachments: (query) the fields to include for returned resources of type appStoreReviewAttachments (optional)
     - parameter limitAppStoreReviewAttachments: (query) maximum number of related appStoreReviewAttachments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppStoreReviewDetailResponse> 
     */
    open class func appStoreVersionsAppStoreReviewDetailGetToOneRelatedWithRequestBuilder(_id: String, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppStoreReviewAttachments: [String]? = nil, limitAppStoreReviewAttachments: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppStoreReviewDetailResponse> {
        var path = "/v1/appStoreVersions/{id}/appStoreReviewDetail"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appStoreReviewDetails]": fieldsAppStoreReviewDetails, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[appStoreReviewAttachments]": fieldsAppStoreReviewAttachments, 
                        "limit[appStoreReviewAttachments]": limitAppStoreReviewAttachments?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppStoreReviewDetailResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterState
     */
    public enum FilterState_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String { 
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case rejected = "REJECTED"
        case completed = "COMPLETED"
        case stopped = "STOPPED"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String { 
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case enddate = "endDate"
        case name = "name"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperimentTreatments
     */
    public enum FieldsAppStoreVersionExperimentTreatments_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String { 
        case appicon = "appIcon"
        case appiconname = "appIconName"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case appstoreversionexperimenttreatmentlocalizations = "appStoreVersionExperimentTreatmentLocalizations"
        case name = "name"
        case promoteddate = "promotedDate"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionExperimentsGetToManyRelated: String { 
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(_id: String, filterState: [String]? = nil, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAppStoreVersionExperimentTreatments: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, limit: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppStoreVersionExperimentsResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(_id: _id, filterState: filterState, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersionExperimentTreatments: fieldsAppStoreVersionExperimentTreatments, fieldsAppStoreVersions: fieldsAppStoreVersions, limit: limit, limitAppStoreVersionExperimentTreatments: limitAppStoreVersionExperimentTreatments, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionExperiments
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "appStoreVersionExperimentTreatments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperimentTreatments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperimentTreatments"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "attributes" : {
      "endDate" : "2000-01-23T04:56:07.000+00:00",
      "trafficProportion" : 0,
      "name" : "name",
      "state" : "PREPARE_FOR_SUBMISSION",
      "reviewRequired" : true,
      "startDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appStoreVersionExperiments"
  }, {
    "relationships" : {
      "appStoreVersionExperimentTreatments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperimentTreatments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperimentTreatments"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "attributes" : {
      "endDate" : "2000-01-23T04:56:07.000+00:00",
      "trafficProportion" : 0,
      "name" : "name",
      "state" : "PREPARE_FOR_SUBMISSION",
      "reviewRequired" : true,
      "startDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appStoreVersionExperiments"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionExperimentTreatments: (query) the fields to include for returned resources of type appStoreVersionExperimentTreatments (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionExperimentTreatments: (query) maximum number of related appStoreVersionExperimentTreatments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppStoreVersionExperimentsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedWithRequestBuilder(_id: String, filterState: [String]? = nil, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAppStoreVersionExperimentTreatments: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, limit: Int? = nil, limitAppStoreVersionExperimentTreatments: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppStoreVersionExperimentsResponse> {
        var path = "/v1/appStoreVersions/{id}/appStoreVersionExperiments"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[state]": filterState, 
                        "fields[appStoreVersionExperiments]": fieldsAppStoreVersionExperiments, 
                        "fields[appStoreVersionExperimentTreatments]": fieldsAppStoreVersionExperimentTreatments, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[appStoreVersionExperimentTreatments]": limitAppStoreVersionExperimentTreatments?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppStoreVersionExperimentsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated: String { 
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case _description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(_id: String, fieldsAppStoreVersionLocalizations: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: AppStoreVersionLocalizationsResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionLocalizations
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "appScreenshotSets" : {
        "data" : [ {
          "id" : "id",
          "type" : "appScreenshotSets"
        }, {
          "id" : "id",
          "type" : "appScreenshotSets"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appPreviewSets" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPreviewSets"
        }, {
          "id" : "id",
          "type" : "appPreviewSets"
        } ]
      }
    },
    "attributes" : {
      "whatsNew" : "whatsNew",
      "keywords" : "keywords",
      "marketingUrl" : "http://example.com/aeiou",
      "supportUrl" : "http://example.com/aeiou",
      "description" : "description",
      "locale" : "locale",
      "promotionalText" : "promotionalText"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appStoreVersionLocalizations"
  }, {
    "relationships" : {
      "appScreenshotSets" : {
        "data" : [ {
          "id" : "id",
          "type" : "appScreenshotSets"
        }, {
          "id" : "id",
          "type" : "appScreenshotSets"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appPreviewSets" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPreviewSets"
        }, {
          "id" : "id",
          "type" : "appPreviewSets"
        } ]
      }
    },
    "attributes" : {
      "whatsNew" : "whatsNew",
      "keywords" : "keywords",
      "marketingUrl" : "http://example.com/aeiou",
      "supportUrl" : "http://example.com/aeiou",
      "description" : "description",
      "locale" : "locale",
      "promotionalText" : "promotionalText"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appStoreVersionLocalizations"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<AppStoreVersionLocalizationsResponse> 
     */
    open class func appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedWithRequestBuilder(_id: String, fieldsAppStoreVersionLocalizations: [String]? = nil, limit: Int? = nil) -> RequestBuilder<AppStoreVersionLocalizationsResponse> {
        var path = "/v1/appStoreVersions/{id}/appStoreVersionLocalizations"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appStoreVersionLocalizations]": fieldsAppStoreVersionLocalizations, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<AppStoreVersionLocalizationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(_id: String, fieldsAppStoreVersionPhasedReleases: [String]? = nil, completion: @escaping ((_ data: AppStoreVersionPhasedReleaseResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionPhasedRelease
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "currentDayNumber" : 6,
      "totalPauseDuration" : 0,
      "phasedReleaseState" : "INACTIVE",
      "startDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appStoreVersionPhasedReleases"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)

     - returns: RequestBuilder<AppStoreVersionPhasedReleaseResponse> 
     */
    open class func appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedWithRequestBuilder(_id: String, fieldsAppStoreVersionPhasedReleases: [String]? = nil) -> RequestBuilder<AppStoreVersionPhasedReleaseResponse> {
        var path = "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appStoreVersionPhasedReleases]": fieldsAppStoreVersionPhasedReleases
        ])


        let requestBuilder: RequestBuilder<AppStoreVersionPhasedReleaseResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsAppStoreVersionSubmissionGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(_id: String, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppStoreVersionSubmissionResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAppStoreVersions: fieldsAppStoreVersions, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/appStoreVersionSubmission
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appStoreVersionSubmissions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppStoreVersionSubmissionResponse> 
     */
    open class func appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedWithRequestBuilder(_id: String, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, include: [String]? = nil) -> RequestBuilder<AppStoreVersionSubmissionResponse> {
        var path = "/v1/appStoreVersions/{id}/appStoreVersionSubmission"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appStoreVersionSubmissions]": fieldsAppStoreVersionSubmissions, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppStoreVersionSubmissionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appStoreVersionsBuildGetToOneRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsBuildGetToOneRelated(_id: String, fieldsBuilds: [String]? = nil, completion: @escaping ((_ data: BuildResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBuilds: fieldsBuilds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/build
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)

     - returns: RequestBuilder<BuildResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelatedWithRequestBuilder(_id: String, fieldsBuilds: [String]? = nil) -> RequestBuilder<BuildResponse> {
        var path = "/v1/appStoreVersions/{id}/build"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[builds]": fieldsBuilds
        ])


        let requestBuilder: RequestBuilder<BuildResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsBuildGetToOneRelationship(_id: String, completion: @escaping ((_ data: AppStoreVersionBuildLinkageResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/relationships/build
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "id" : "id",
    "type" : "builds"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<AppStoreVersionBuildLinkageResponse> 
     */
    open class func appStoreVersionsBuildGetToOneRelationshipWithRequestBuilder(_id: String) -> RequestBuilder<AppStoreVersionBuildLinkageResponse> {
        var path = "/v1/appStoreVersions/{id}/relationships/build"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AppStoreVersionBuildLinkageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) Related linkage 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsBuildUpdateToOneRelationship(body: AppStoreVersionBuildLinkageRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /v1/appStoreVersions/{id}/relationships/build
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) Related linkage 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsBuildUpdateToOneRelationshipWithRequestBuilder(body: AppStoreVersionBuildLinkageRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/appStoreVersions/{id}/relationships/build"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) AppStoreVersion representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsCreateInstance(body: AppStoreVersionCreateRequest, completion: @escaping ((_ data: AppStoreVersionResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/appStoreVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) AppStoreVersion representation 

     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsCreateInstanceWithRequestBuilder(body: AppStoreVersionCreateRequest) -> RequestBuilder<AppStoreVersionResponse> {
        let path = "/v1/appStoreVersions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter filterTerritory
     */
    public enum FilterTerritory_appStoreVersionsCustomerReviewsGetToManyRelated: String { 
        case abw = "ABW"
        case afg = "AFG"
        case ago = "AGO"
        case aia = "AIA"
        case alb = "ALB"
        case and = "AND"
        case ant = "ANT"
        case are = "ARE"
        case arg = "ARG"
        case arm = "ARM"
        case asm = "ASM"
        case atg = "ATG"
        case aus = "AUS"
        case aut = "AUT"
        case aze = "AZE"
        case bdi = "BDI"
        case bel = "BEL"
        case ben = "BEN"
        case bes = "BES"
        case bfa = "BFA"
        case bgd = "BGD"
        case bgr = "BGR"
        case bhr = "BHR"
        case bhs = "BHS"
        case bih = "BIH"
        case blr = "BLR"
        case blz = "BLZ"
        case bmu = "BMU"
        case bol = "BOL"
        case bra = "BRA"
        case brb = "BRB"
        case brn = "BRN"
        case btn = "BTN"
        case bwa = "BWA"
        case caf = "CAF"
        case can = "CAN"
        case che = "CHE"
        case chl = "CHL"
        case chn = "CHN"
        case civ = "CIV"
        case cmr = "CMR"
        case cod = "COD"
        case cog = "COG"
        case cok = "COK"
        case col = "COL"
        case com = "COM"
        case cpv = "CPV"
        case cri = "CRI"
        case cub = "CUB"
        case cuw = "CUW"
        case cxr = "CXR"
        case cym = "CYM"
        case cyp = "CYP"
        case cze = "CZE"
        case deu = "DEU"
        case dji = "DJI"
        case dma = "DMA"
        case dnk = "DNK"
        case dom = "DOM"
        case dza = "DZA"
        case ecu = "ECU"
        case egy = "EGY"
        case eri = "ERI"
        case esp = "ESP"
        case est = "EST"
        case eth = "ETH"
        case fin = "FIN"
        case fji = "FJI"
        case flk = "FLK"
        case fra = "FRA"
        case fro = "FRO"
        case fsm = "FSM"
        case gab = "GAB"
        case gbr = "GBR"
        case geo = "GEO"
        case ggy = "GGY"
        case gha = "GHA"
        case gib = "GIB"
        case gin = "GIN"
        case glp = "GLP"
        case gmb = "GMB"
        case gnb = "GNB"
        case gnq = "GNQ"
        case grc = "GRC"
        case grd = "GRD"
        case grl = "GRL"
        case gtm = "GTM"
        case guf = "GUF"
        case gum = "GUM"
        case guy = "GUY"
        case hkg = "HKG"
        case hnd = "HND"
        case hrv = "HRV"
        case hti = "HTI"
        case hun = "HUN"
        case idn = "IDN"
        case imn = "IMN"
        case ind = "IND"
        case irl = "IRL"
        case irq = "IRQ"
        case isl = "ISL"
        case isr = "ISR"
        case ita = "ITA"
        case jam = "JAM"
        case jey = "JEY"
        case jor = "JOR"
        case jpn = "JPN"
        case kaz = "KAZ"
        case ken = "KEN"
        case kgz = "KGZ"
        case khm = "KHM"
        case kir = "KIR"
        case kna = "KNA"
        case kor = "KOR"
        case kwt = "KWT"
        case lao = "LAO"
        case lbn = "LBN"
        case lbr = "LBR"
        case lby = "LBY"
        case lca = "LCA"
        case lie = "LIE"
        case lka = "LKA"
        case lso = "LSO"
        case ltu = "LTU"
        case lux = "LUX"
        case lva = "LVA"
        case mac = "MAC"
        case mar = "MAR"
        case mco = "MCO"
        case mda = "MDA"
        case mdg = "MDG"
        case mdv = "MDV"
        case mex = "MEX"
        case mhl = "MHL"
        case mkd = "MKD"
        case mli = "MLI"
        case mlt = "MLT"
        case mmr = "MMR"
        case mne = "MNE"
        case mng = "MNG"
        case mnp = "MNP"
        case moz = "MOZ"
        case mrt = "MRT"
        case msr = "MSR"
        case mtq = "MTQ"
        case mus = "MUS"
        case mwi = "MWI"
        case mys = "MYS"
        case myt = "MYT"
        case nam = "NAM"
        case ncl = "NCL"
        case ner = "NER"
        case nfk = "NFK"
        case nga = "NGA"
        case nic = "NIC"
        case niu = "NIU"
        case nld = "NLD"
        case nor = "NOR"
        case npl = "NPL"
        case nru = "NRU"
        case nzl = "NZL"
        case omn = "OMN"
        case pak = "PAK"
        case pan = "PAN"
        case per = "PER"
        case phl = "PHL"
        case plw = "PLW"
        case png = "PNG"
        case pol = "POL"
        case pri = "PRI"
        case prt = "PRT"
        case pry = "PRY"
        case pse = "PSE"
        case pyf = "PYF"
        case qat = "QAT"
        case reu = "REU"
        case rou = "ROU"
        case rus = "RUS"
        case rwa = "RWA"
        case sau = "SAU"
        case sen = "SEN"
        case sgp = "SGP"
        case shn = "SHN"
        case slb = "SLB"
        case sle = "SLE"
        case slv = "SLV"
        case smr = "SMR"
        case som = "SOM"
        case spm = "SPM"
        case srb = "SRB"
        case ssd = "SSD"
        case stp = "STP"
        case sur = "SUR"
        case svk = "SVK"
        case svn = "SVN"
        case swe = "SWE"
        case swz = "SWZ"
        case sxm = "SXM"
        case syc = "SYC"
        case tca = "TCA"
        case tcd = "TCD"
        case tgo = "TGO"
        case tha = "THA"
        case tjk = "TJK"
        case tkm = "TKM"
        case tls = "TLS"
        case ton = "TON"
        case tto = "TTO"
        case tun = "TUN"
        case tur = "TUR"
        case tuv = "TUV"
        case twn = "TWN"
        case tza = "TZA"
        case uga = "UGA"
        case ukr = "UKR"
        case umi = "UMI"
        case ury = "URY"
        case usa = "USA"
        case uzb = "UZB"
        case vat = "VAT"
        case vct = "VCT"
        case ven = "VEN"
        case vgb = "VGB"
        case vir = "VIR"
        case vnm = "VNM"
        case vut = "VUT"
        case wlf = "WLF"
        case wsm = "WSM"
        case yem = "YEM"
        case zaf = "ZAF"
        case zmb = "ZMB"
        case zwe = "ZWE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appStoreVersionsCustomerReviewsGetToManyRelated: String { 
        case createddate = "createdDate"
        case createddate_1 = "-createdDate"
        case rating = "rating"
        case rating_3 = "-rating"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appStoreVersionsCustomerReviewsGetToManyRelated: String { 
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsCustomerReviewResponses
     */
    public enum FieldsCustomerReviewResponses_appStoreVersionsCustomerReviewsGetToManyRelated: String { 
        case lastmodifieddate = "lastModifiedDate"
        case responsebody = "responseBody"
        case review = "review"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsCustomerReviewsGetToManyRelated: String { 
        case response = "response"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#x27;rating&#x27; (optional)
     - parameter filterTerritory: (query) filter by attribute &#x27;territory&#x27; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsCustomerReviewsGetToManyRelated(_id: String, filterRating: [String]? = nil, filterTerritory: [String]? = nil, existsPublishedResponse: Bool? = nil, sort: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CustomerReviewsResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(_id: _id, filterRating: filterRating, filterTerritory: filterTerritory, existsPublishedResponse: existsPublishedResponse, sort: sort, fieldsCustomerReviews: fieldsCustomerReviews, fieldsCustomerReviewResponses: fieldsCustomerReviewResponses, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/customerReviews
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "response" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviewResponses"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "reviewerNickname" : "reviewerNickname",
      "rating" : 1,
      "title" : "title",
      "body" : "body",
      "territory" : "ABW"
    },
    "id" : "id",
    "type" : "customerReviews"
  }, {
    "relationships" : {
      "response" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviewResponses"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "reviewerNickname" : "reviewerNickname",
      "rating" : 1,
      "title" : "title",
      "body" : "body",
      "territory" : "ABW"
    },
    "id" : "id",
    "type" : "customerReviews"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "review" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviews"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "responseBody" : "responseBody",
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "state" : "PUBLISHED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "customerReviewResponses"
  }, {
    "relationships" : {
      "review" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviews"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "responseBody" : "responseBody",
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "state" : "PUBLISHED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "customerReviewResponses"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#x27;rating&#x27; (optional)
     - parameter filterTerritory: (query) filter by attribute &#x27;territory&#x27; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appStoreVersionsCustomerReviewsGetToManyRelatedWithRequestBuilder(_id: String, filterRating: [String]? = nil, filterTerritory: [String]? = nil, existsPublishedResponse: Bool? = nil, sort: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<CustomerReviewsResponse> {
        var path = "/v1/appStoreVersions/{id}/customerReviews"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[rating]": filterRating, 
                        "filter[territory]": filterTerritory, 
                        "exists[publishedResponse]": existsPublishedResponse, 
                        "sort": sort, 
                        "fields[customerReviews]": fieldsCustomerReviews, 
                        "fields[customerReviewResponses]": fieldsCustomerReviewResponses, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appStoreVersionsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/appStoreVersions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func appStoreVersionsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/appStoreVersions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appStoreVersionsGetInstance: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appStoreVersionsGetInstance: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case routingappcoverage = "routingAppCoverage"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appStoreVersionsGetInstance: String { 
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case enddate = "endDate"
        case name = "name"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appStoreVersionsGetInstance: String { 
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appStoreVersionsGetInstance: String { 
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appStoreVersionsGetInstance: String { 
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appStoreVersionsGetInstance: String { 
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appStoreVersionsGetInstance: String { 
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appStoreVersionsGetInstance: String { 
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appStoreVersionsGetInstance: String { 
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appStoreVersionsGetInstance: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appStoreVersionsGetInstance: String { 
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case _description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsGetInstance(_id: String, fieldsAppStoreVersions: [String]? = nil, include: [String]? = nil, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAgeRatingDeclarations: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsRoutingAppCoverages: [String]? = nil, fieldsAppStoreVersionPhasedReleases: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsAppStoreVersionLocalizations: [String]? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil, completion: @escaping ((_ data: AppStoreVersionResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsGetInstanceWithRequestBuilder(_id: _id, fieldsAppStoreVersions: fieldsAppStoreVersions, include: include, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsCustomerReviews: fieldsCustomerReviews, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsBuilds: fieldsBuilds, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)

     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsGetInstanceWithRequestBuilder(_id: String, fieldsAppStoreVersions: [String]? = nil, include: [String]? = nil, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAgeRatingDeclarations: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsRoutingAppCoverages: [String]? = nil, fieldsAppStoreVersionPhasedReleases: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsAppStoreVersionLocalizations: [String]? = nil, limitAppStoreVersionExperiments: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil) -> RequestBuilder<AppStoreVersionResponse> {
        var path = "/v1/appStoreVersions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "include": include, 
                        "fields[appStoreVersionExperiments]": fieldsAppStoreVersionExperiments, 
                        "fields[appStoreVersionSubmissions]": fieldsAppStoreVersionSubmissions, 
                        "fields[ageRatingDeclarations]": fieldsAgeRatingDeclarations, 
                        "fields[customerReviews]": fieldsCustomerReviews, 
                        "fields[appStoreReviewDetails]": fieldsAppStoreReviewDetails, 
                        "fields[appClipDefaultExperiences]": fieldsAppClipDefaultExperiences, 
                        "fields[routingAppCoverages]": fieldsRoutingAppCoverages, 
                        "fields[appStoreVersionPhasedReleases]": fieldsAppStoreVersionPhasedReleases, 
                        "fields[builds]": fieldsBuilds, 
                        "fields[appStoreVersionLocalizations]": fieldsAppStoreVersionLocalizations, 
                        "limit[appStoreVersionExperiments]": limitAppStoreVersionExperiments?.encodeToJSON(), 
                        "limit[appStoreVersionLocalizations]": limitAppStoreVersionLocalizations?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appStoreVersionsRoutingAppCoverageGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelated(_id: String, fieldsRoutingAppCoverages: [String]? = nil, completion: @escaping ((_ data: RoutingAppCoverageResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(_id: _id, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appStoreVersions/{id}/routingAppCoverage
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      }
    },
    "attributes" : {
      "fileName" : "fileName",
      "fileSize" : 0,
      "assetDeliveryState" : {
        "warnings" : [ null, null ],
        "state" : "AWAITING_UPLOAD",
        "errors" : [ {
          "code" : "code",
          "description" : "description"
        }, {
          "code" : "code",
          "description" : "description"
        } ]
      },
      "sourceFileChecksum" : "sourceFileChecksum",
      "uploadOperations" : [ {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      }, {
        "requestHeaders" : [ {
          "name" : "name",
          "value" : "value"
        }, {
          "name" : "name",
          "value" : "value"
        } ],
        "method" : "method",
        "offset" : 5,
        "length" : 5,
        "url" : "url"
      } ]
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "routingAppCoverages"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)

     - returns: RequestBuilder<RoutingAppCoverageResponse> 
     */
    open class func appStoreVersionsRoutingAppCoverageGetToOneRelatedWithRequestBuilder(_id: String, fieldsRoutingAppCoverages: [String]? = nil) -> RequestBuilder<RoutingAppCoverageResponse> {
        var path = "/v1/appStoreVersions/{id}/routingAppCoverage"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[routingAppCoverages]": fieldsRoutingAppCoverages
        ])


        let requestBuilder: RequestBuilder<RoutingAppCoverageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) AppStoreVersion representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appStoreVersionsUpdateInstance(body: AppStoreVersionUpdateRequest, _id: String, completion: @escaping ((_ data: AppStoreVersionResponse?,_ error: Error?) -> Void)) {
        appStoreVersionsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/appStoreVersions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) AppStoreVersion representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func appStoreVersionsUpdateInstanceWithRequestBuilder(body: AppStoreVersionUpdateRequest, _id: String) -> RequestBuilder<AppStoreVersionResponse> {
        var path = "/v1/appStoreVersions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
