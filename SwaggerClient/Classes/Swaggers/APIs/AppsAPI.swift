//
// AppsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AppsAPI {
    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appsAppClipsGetToManyRelated: String { 
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppClipsGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appsAppClipsGetToManyRelated: String { 
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppClipsGetToManyRelated: String { 
        case app = "app"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterBundleId: (query) filter by attribute &#x27;bundleId&#x27; (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppClipDefaultExperiences: (query) maximum number of related appClipDefaultExperiences returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsAppClipsGetToManyRelated(_id: String, filterBundleId: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsApps: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, limit: Int? = nil, limitAppClipDefaultExperiences: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppClipsResponse?,_ error: Error?) -> Void)) {
        appsAppClipsGetToManyRelatedWithRequestBuilder(_id: _id, filterBundleId: filterBundleId, fieldsAppClips: fieldsAppClips, fieldsApps: fieldsApps, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, limit: limit, limitAppClipDefaultExperiences: limitAppClipDefaultExperiences, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/appClips
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperiences" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        }, {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "bundleId" : "bundleId"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appClips"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperiences" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        }, {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "bundleId" : "bundleId"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appClips"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterBundleId: (query) filter by attribute &#x27;bundleId&#x27; (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppClipDefaultExperiences: (query) maximum number of related appClipDefaultExperiences returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppClipsResponse> 
     */
    open class func appsAppClipsGetToManyRelatedWithRequestBuilder(_id: String, filterBundleId: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsApps: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, limit: Int? = nil, limitAppClipDefaultExperiences: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppClipsResponse> {
        var path = "/v1/apps/{id}/appClips"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[bundleId]": filterBundleId, 
                        "fields[appClips]": fieldsAppClips, 
                        "fields[apps]": fieldsApps, 
                        "fields[appClipDefaultExperiences]": fieldsAppClipDefaultExperiences, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[appClipDefaultExperiences]": limitAppClipDefaultExperiences?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppClipsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_appsAppCustomProductPagesGetToManyRelated: String { 
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
        case appstoreversiontemplate = "appStoreVersionTemplate"
        case customproductpagetemplate = "customProductPageTemplate"
        case name = "name"
        case url = "url"
        case visible = "visible"
    }

    /**
     * enum for parameter fieldsAppCustomProductPageVersions
     */
    public enum FieldsAppCustomProductPageVersions_appsAppCustomProductPagesGetToManyRelated: String { 
        case appcustomproductpage = "appCustomProductPage"
        case appcustomproductpagelocalizations = "appCustomProductPageLocalizations"
        case state = "state"
        case version = "version"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppCustomProductPagesGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppCustomProductPagesGetToManyRelated: String { 
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterVisible: (query) filter by attribute &#x27;visible&#x27; (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppCustomProductPageVersions: (query) maximum number of related appCustomProductPageVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsAppCustomProductPagesGetToManyRelated(_id: String, filterVisible: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsAppCustomProductPageVersions: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitAppCustomProductPageVersions: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppCustomProductPagesResponse?,_ error: Error?) -> Void)) {
        appsAppCustomProductPagesGetToManyRelatedWithRequestBuilder(_id: _id, filterVisible: filterVisible, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsAppCustomProductPageVersions: fieldsAppCustomProductPageVersions, fieldsApps: fieldsApps, limit: limit, limitAppCustomProductPageVersions: limitAppCustomProductPageVersions, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/appCustomProductPages
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appCustomProductPageVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPageVersions"
        }, {
          "id" : "id",
          "type" : "appCustomProductPageVersions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "visible" : true,
      "name" : "name",
      "url" : "http://example.com/aeiou"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appCustomProductPages"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appCustomProductPageVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPageVersions"
        }, {
          "id" : "id",
          "type" : "appCustomProductPageVersions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "visible" : true,
      "name" : "name",
      "url" : "http://example.com/aeiou"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appCustomProductPages"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterVisible: (query) filter by attribute &#x27;visible&#x27; (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppCustomProductPageVersions: (query) maximum number of related appCustomProductPageVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppCustomProductPagesResponse> 
     */
    open class func appsAppCustomProductPagesGetToManyRelatedWithRequestBuilder(_id: String, filterVisible: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsAppCustomProductPageVersions: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitAppCustomProductPageVersions: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppCustomProductPagesResponse> {
        var path = "/v1/apps/{id}/appCustomProductPages"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[visible]": filterVisible, 
                        "fields[appCustomProductPages]": fieldsAppCustomProductPages, 
                        "fields[appCustomProductPageVersions]": fieldsAppCustomProductPageVersions, 
                        "fields[apps]": fieldsApps, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[appCustomProductPageVersions]": limitAppCustomProductPageVersions?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppCustomProductPagesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterEventState
     */
    public enum FilterEventState_appsAppEventsGetToManyRelated: String { 
        case draft = "DRAFT"
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case rejected = "REJECTED"
        case accepted = "ACCEPTED"
        case approved = "APPROVED"
        case published = "PUBLISHED"
        case past = "PAST"
        case archived = "ARCHIVED"
    }

    /**
     * enum for parameter fieldsAppEventLocalizations
     */
    public enum FieldsAppEventLocalizations_appsAppEventsGetToManyRelated: String { 
        case appevent = "appEvent"
        case appeventscreenshots = "appEventScreenshots"
        case appeventvideoclips = "appEventVideoClips"
        case locale = "locale"
        case longdescription = "longDescription"
        case name = "name"
        case shortdescription = "shortDescription"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_appsAppEventsGetToManyRelated: String { 
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppEventsGetToManyRelated: String { 
        case localizations = "localizations"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterEventState: (query) filter by attribute &#x27;eventState&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAppEventLocalizations: (query) the fields to include for returned resources of type appEventLocalizations (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsAppEventsGetToManyRelated(_id: String, filterEventState: [String]? = nil, filterId: [String]? = nil, fieldsAppEventLocalizations: [String]? = nil, fieldsAppEvents: [String]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppEventsResponse?,_ error: Error?) -> Void)) {
        appsAppEventsGetToManyRelatedWithRequestBuilder(_id: _id, filterEventState: filterEventState, filterId: filterId, fieldsAppEventLocalizations: fieldsAppEventLocalizations, fieldsAppEvents: fieldsAppEvents, limit: limit, limitLocalizations: limitLocalizations, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/appEvents
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "localizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEventLocalizations"
        }, {
          "id" : "id",
          "type" : "appEventLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "territorySchedules" : [ {
        "publishStart" : "2000-01-23T04:56:07.000+00:00",
        "eventEnd" : "2000-01-23T04:56:07.000+00:00",
        "territories" : [ "territories", "territories" ],
        "eventStart" : "2000-01-23T04:56:07.000+00:00"
      }, {
        "publishStart" : "2000-01-23T04:56:07.000+00:00",
        "eventEnd" : "2000-01-23T04:56:07.000+00:00",
        "territories" : [ "territories", "territories" ],
        "eventStart" : "2000-01-23T04:56:07.000+00:00"
      } ],
      "badge" : "LIVE_EVENT",
      "deepLink" : "http://example.com/aeiou",
      "purchaseRequirement" : "NO_COST_ASSOCIATED",
      "eventState" : "DRAFT",
      "purpose" : "APPROPRIATE_FOR_ALL_USERS",
      "archivedTerritorySchedules" : [ null, null ],
      "priority" : "HIGH",
      "primaryLocale" : "primaryLocale",
      "referenceName" : "referenceName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appEvents"
  }, {
    "relationships" : {
      "localizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEventLocalizations"
        }, {
          "id" : "id",
          "type" : "appEventLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "territorySchedules" : [ {
        "publishStart" : "2000-01-23T04:56:07.000+00:00",
        "eventEnd" : "2000-01-23T04:56:07.000+00:00",
        "territories" : [ "territories", "territories" ],
        "eventStart" : "2000-01-23T04:56:07.000+00:00"
      }, {
        "publishStart" : "2000-01-23T04:56:07.000+00:00",
        "eventEnd" : "2000-01-23T04:56:07.000+00:00",
        "territories" : [ "territories", "territories" ],
        "eventStart" : "2000-01-23T04:56:07.000+00:00"
      } ],
      "badge" : "LIVE_EVENT",
      "deepLink" : "http://example.com/aeiou",
      "purchaseRequirement" : "NO_COST_ASSOCIATED",
      "eventState" : "DRAFT",
      "purpose" : "APPROPRIATE_FOR_ALL_USERS",
      "archivedTerritorySchedules" : [ null, null ],
      "priority" : "HIGH",
      "primaryLocale" : "primaryLocale",
      "referenceName" : "referenceName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appEvents"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "appEventVideoClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEventVideoClips"
        }, {
          "id" : "id",
          "type" : "appEventVideoClips"
        } ]
      },
      "appEvent" : {
        "data" : {
          "id" : "id",
          "type" : "appEvents"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appEventScreenshots" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEventScreenshots"
        }, {
          "id" : "id",
          "type" : "appEventScreenshots"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "longDescription" : "longDescription",
      "name" : "name",
      "shortDescription" : "shortDescription",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appEventLocalizations"
  }, {
    "relationships" : {
      "appEventVideoClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEventVideoClips"
        }, {
          "id" : "id",
          "type" : "appEventVideoClips"
        } ]
      },
      "appEvent" : {
        "data" : {
          "id" : "id",
          "type" : "appEvents"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appEventScreenshots" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEventScreenshots"
        }, {
          "id" : "id",
          "type" : "appEventScreenshots"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "longDescription" : "longDescription",
      "name" : "name",
      "shortDescription" : "shortDescription",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appEventLocalizations"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterEventState: (query) filter by attribute &#x27;eventState&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAppEventLocalizations: (query) the fields to include for returned resources of type appEventLocalizations (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppEventsResponse> 
     */
    open class func appsAppEventsGetToManyRelatedWithRequestBuilder(_id: String, filterEventState: [String]? = nil, filterId: [String]? = nil, fieldsAppEventLocalizations: [String]? = nil, fieldsAppEvents: [String]? = nil, limit: Int? = nil, limitLocalizations: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppEventsResponse> {
        var path = "/v1/apps/{id}/appEvents"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[eventState]": filterEventState, 
                        "filter[id]": filterId, 
                        "fields[appEventLocalizations]": fieldsAppEventLocalizations, 
                        "fields[appEvents]": fieldsAppEvents, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[localizations]": limitLocalizations?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppEventsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appsAppInfosGetToManyRelated: String { 
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_appsAppInfosGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case appstoreagerating = "appStoreAgeRating"
        case appstorestate = "appStoreState"
        case brazilagerating = "brazilAgeRating"
        case kidsageband = "kidsAgeBand"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
    }

    /**
     * enum for parameter fieldsAppInfoLocalizations
     */
    public enum FieldsAppInfoLocalizations_appsAppInfosGetToManyRelated: String { 
        case appinfo = "appInfo"
        case locale = "locale"
        case name = "name"
        case privacychoicesurl = "privacyChoicesUrl"
        case privacypolicytext = "privacyPolicyText"
        case privacypolicyurl = "privacyPolicyUrl"
        case subtitle = "subtitle"
    }

    /**
     * enum for parameter fieldsAppCategories
     */
    public enum FieldsAppCategories_appsAppInfosGetToManyRelated: String { 
        case parent = "parent"
        case platforms = "platforms"
        case subcategories = "subcategories"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppInfosGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppInfosGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsAppInfoLocalizations: (query) the fields to include for returned resources of type appInfoLocalizations (optional)
     - parameter fieldsAppCategories: (query) the fields to include for returned resources of type appCategories (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppInfoLocalizations: (query) maximum number of related appInfoLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsAppInfosGetToManyRelated(_id: String, fieldsAgeRatingDeclarations: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsAppInfoLocalizations: [String]? = nil, fieldsAppCategories: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitAppInfoLocalizations: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppInfosResponse?,_ error: Error?) -> Void)) {
        appsAppInfosGetToManyRelatedWithRequestBuilder(_id: _id, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppInfos: fieldsAppInfos, fieldsAppInfoLocalizations: fieldsAppInfoLocalizations, fieldsAppCategories: fieldsAppCategories, fieldsApps: fieldsApps, limit: limit, limitAppInfoLocalizations: limitAppInfoLocalizations, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/appInfos
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "primaryCategory" : { },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        }
      },
      "appInfoLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfoLocalizations"
        }, {
          "id" : "id",
          "type" : "appInfoLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "brazilAgeRating" : "L",
      "kidsAgeBand" : "FIVE_AND_UNDER",
      "appStoreState" : "ACCEPTED",
      "appStoreAgeRating" : "FOUR_PLUS"
    },
    "id" : "id",
    "type" : "appInfos"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "primaryCategory" : { },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        }
      },
      "appInfoLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfoLocalizations"
        }, {
          "id" : "id",
          "type" : "appInfoLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "brazilAgeRating" : "L",
      "kidsAgeBand" : "FIVE_AND_UNDER",
      "appStoreState" : "ACCEPTED",
      "appStoreAgeRating" : "FOUR_PLUS"
    },
    "id" : "id",
    "type" : "appInfos"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsAppInfoLocalizations: (query) the fields to include for returned resources of type appInfoLocalizations (optional)
     - parameter fieldsAppCategories: (query) the fields to include for returned resources of type appCategories (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppInfoLocalizations: (query) maximum number of related appInfoLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppInfosResponse> 
     */
    open class func appsAppInfosGetToManyRelatedWithRequestBuilder(_id: String, fieldsAgeRatingDeclarations: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsAppInfoLocalizations: [String]? = nil, fieldsAppCategories: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitAppInfoLocalizations: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppInfosResponse> {
        var path = "/v1/apps/{id}/appInfos"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ageRatingDeclarations]": fieldsAgeRatingDeclarations, 
                        "fields[appInfos]": fieldsAppInfos, 
                        "fields[appInfoLocalizations]": fieldsAppInfoLocalizations, 
                        "fields[appCategories]": fieldsAppCategories, 
                        "fields[apps]": fieldsApps, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[appInfoLocalizations]": limitAppInfoLocalizations?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppInfosResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterAppStoreState
     */
    public enum FilterAppStoreState_appsAppStoreVersionsGetToManyRelated: String { 
        case accepted = "ACCEPTED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case developerRejected = "DEVELOPER_REJECTED"
        case inReview = "IN_REVIEW"
        case invalidBinary = "INVALID_BINARY"
        case metadataRejected = "METADATA_REJECTED"
        case pendingAppleRelease = "PENDING_APPLE_RELEASE"
        case pendingContract = "PENDING_CONTRACT"
        case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
        case processingForAppStore = "PROCESSING_FOR_APP_STORE"
        case readyForReview = "READY_FOR_REVIEW"
        case readyForSale = "READY_FOR_SALE"
        case rejected = "REJECTED"
        case removedFromSale = "REMOVED_FROM_SALE"
        case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsAppStoreVersionsGetToManyRelated: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_appsAppStoreVersionsGetToManyRelated: String { 
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case enddate = "endDate"
        case name = "name"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_appsAppStoreVersionsGetToManyRelated: String { 
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_appsAppStoreVersionsGetToManyRelated: String { 
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_appsAppStoreVersionsGetToManyRelated: String { 
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsAppStoreVersionsGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsAppStoreVersionsGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_appsAppStoreVersionsGetToManyRelated: String { 
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_appsAppStoreVersionsGetToManyRelated: String { 
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_appsAppStoreVersionsGetToManyRelated: String { 
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsAppStoreVersionsGetToManyRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_appsAppStoreVersionsGetToManyRelated: String { 
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case _description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsAppStoreVersionsGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case routingappcoverage = "routingAppCoverage"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterAppStoreState: (query) filter by attribute &#x27;appStoreState&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterVersionString: (query) filter by attribute &#x27;versionString&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsAppStoreVersionsGetToManyRelated(_id: String, filterAppStoreState: [String]? = nil, filterPlatform: [String]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAgeRatingDeclarations: [String]? = nil, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsApps: [String]? = nil, fieldsRoutingAppCoverages: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsAppStoreVersionPhasedReleases: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsAppStoreVersionLocalizations: [String]? = nil, limit: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppStoreVersionsResponse?,_ error: Error?) -> Void)) {
        appsAppStoreVersionsGetToManyRelatedWithRequestBuilder(_id: _id, filterAppStoreState: filterAppStoreState, filterPlatform: filterPlatform, filterVersionString: filterVersionString, filterId: filterId, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsBuilds: fieldsBuilds, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limit: limit, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/appStoreVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterAppStoreState: (query) filter by attribute &#x27;appStoreState&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterVersionString: (query) filter by attribute &#x27;versionString&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppStoreVersionsResponse> 
     */
    open class func appsAppStoreVersionsGetToManyRelatedWithRequestBuilder(_id: String, filterAppStoreState: [String]? = nil, filterPlatform: [String]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAgeRatingDeclarations: [String]? = nil, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsApps: [String]? = nil, fieldsRoutingAppCoverages: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsAppStoreVersionPhasedReleases: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsAppStoreVersionLocalizations: [String]? = nil, limit: Int? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppStoreVersionsResponse> {
        var path = "/v1/apps/{id}/appStoreVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[appStoreState]": filterAppStoreState, 
                        "filter[platform]": filterPlatform, 
                        "filter[versionString]": filterVersionString, 
                        "filter[id]": filterId, 
                        "fields[appStoreVersionExperiments]": fieldsAppStoreVersionExperiments, 
                        "fields[ageRatingDeclarations]": fieldsAgeRatingDeclarations, 
                        "fields[appStoreVersionSubmissions]": fieldsAppStoreVersionSubmissions, 
                        "fields[appStoreReviewDetails]": fieldsAppStoreReviewDetails, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[apps]": fieldsApps, 
                        "fields[routingAppCoverages]": fieldsRoutingAppCoverages, 
                        "fields[appClipDefaultExperiences]": fieldsAppClipDefaultExperiences, 
                        "fields[appStoreVersionPhasedReleases]": fieldsAppStoreVersionPhasedReleases, 
                        "fields[builds]": fieldsBuilds, 
                        "fields[appStoreVersionLocalizations]": fieldsAppStoreVersionLocalizations, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[appStoreVersionLocalizations]": limitAppStoreVersionLocalizations?.encodeToJSON(), 
                        "limit[appStoreVersionExperiments]": limitAppStoreVersionExperiments?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppStoreVersionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsAvailableTerritoriesGetToManyRelated: String { 
        case currency = "currency"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsAvailableTerritoriesGetToManyRelated(_id: String, fieldsTerritories: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: TerritoriesResponse?,_ error: Error?) -> Void)) {
        appsAvailableTerritoriesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsTerritories: fieldsTerritories, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/availableTerritories
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "currency" : "currency"
    },
    "id" : "id",
    "type" : "territories"
  }, {
    "attributes" : {
      "currency" : "currency"
    },
    "id" : "id",
    "type" : "territories"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<TerritoriesResponse> 
     */
    open class func appsAvailableTerritoriesGetToManyRelatedWithRequestBuilder(_id: String, fieldsTerritories: [String]? = nil, limit: Int? = nil) -> RequestBuilder<TerritoriesResponse> {
        var path = "/v1/apps/{id}/availableTerritories"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[territories]": fieldsTerritories, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<TerritoriesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_appsBetaAppLocalizationsGetToManyRelated: String { 
        case app = "app"
        case _description = "description"
        case feedbackemail = "feedbackEmail"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsBetaAppLocalizationsGetToManyRelated(_id: String, fieldsBetaAppLocalizations: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: BetaAppLocalizationsResponse?,_ error: Error?) -> Void)) {
        appsBetaAppLocalizationsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/betaAppLocalizations
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "marketingUrl" : "marketingUrl",
      "description" : "description",
      "tvOsPrivacyPolicy" : "tvOsPrivacyPolicy",
      "locale" : "locale",
      "privacyPolicyUrl" : "privacyPolicyUrl",
      "feedbackEmail" : "feedbackEmail"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppLocalizations"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "marketingUrl" : "marketingUrl",
      "description" : "description",
      "tvOsPrivacyPolicy" : "tvOsPrivacyPolicy",
      "locale" : "locale",
      "privacyPolicyUrl" : "privacyPolicyUrl",
      "feedbackEmail" : "feedbackEmail"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppLocalizations"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BetaAppLocalizationsResponse> 
     */
    open class func appsBetaAppLocalizationsGetToManyRelatedWithRequestBuilder(_id: String, fieldsBetaAppLocalizations: [String]? = nil, limit: Int? = nil) -> RequestBuilder<BetaAppLocalizationsResponse> {
        var path = "/v1/apps/{id}/betaAppLocalizations"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaAppLocalizations]": fieldsBetaAppLocalizations, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BetaAppLocalizationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_appsBetaAppReviewDetailGetToOneRelated: String { 
        case app = "app"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsBetaAppReviewDetailGetToOneRelated(_id: String, fieldsBetaAppReviewDetails: [String]? = nil, completion: @escaping ((_ data: BetaAppReviewDetailResponse?,_ error: Error?) -> Void)) {
        appsBetaAppReviewDetailGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/betaAppReviewDetail
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "demoAccountPassword" : "demoAccountPassword",
      "notes" : "notes",
      "contactEmail" : "contactEmail",
      "contactFirstName" : "contactFirstName",
      "demoAccountRequired" : true,
      "demoAccountName" : "demoAccountName",
      "contactLastName" : "contactLastName",
      "contactPhone" : "contactPhone"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppReviewDetails"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)

     - returns: RequestBuilder<BetaAppReviewDetailResponse> 
     */
    open class func appsBetaAppReviewDetailGetToOneRelatedWithRequestBuilder(_id: String, fieldsBetaAppReviewDetails: [String]? = nil) -> RequestBuilder<BetaAppReviewDetailResponse> {
        var path = "/v1/apps/{id}/betaAppReviewDetail"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaAppReviewDetails]": fieldsBetaAppReviewDetails
        ])


        let requestBuilder: RequestBuilder<BetaAppReviewDetailResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_appsBetaGroupsGetToManyRelated: String { 
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsBetaGroupsGetToManyRelated(_id: String, fieldsBetaGroups: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: BetaGroupsResponse?,_ error: Error?) -> Void)) {
        appsBetaGroupsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsBetaGroups: fieldsBetaGroups, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/betaGroups
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "betaTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "publicLinkLimit" : 0,
      "iosBuildsAvailableForAppleSiliconMac" : true,
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "publicLinkEnabled" : true,
      "publicLink" : "publicLink",
      "hasAccessToAllBuilds" : true,
      "publicLinkId" : "publicLinkId",
      "isInternalGroup" : true,
      "name" : "name",
      "feedbackEnabled" : true,
      "publicLinkLimitEnabled" : true
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaGroups"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "betaTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "publicLinkLimit" : 0,
      "iosBuildsAvailableForAppleSiliconMac" : true,
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "publicLinkEnabled" : true,
      "publicLink" : "publicLink",
      "hasAccessToAllBuilds" : true,
      "publicLinkId" : "publicLinkId",
      "isInternalGroup" : true,
      "name" : "name",
      "feedbackEnabled" : true,
      "publicLinkLimitEnabled" : true
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaGroups"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BetaGroupsResponse> 
     */
    open class func appsBetaGroupsGetToManyRelatedWithRequestBuilder(_id: String, fieldsBetaGroups: [String]? = nil, limit: Int? = nil) -> RequestBuilder<BetaGroupsResponse> {
        var path = "/v1/apps/{id}/betaGroups"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaGroups]": fieldsBetaGroups, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BetaGroupsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_appsBetaLicenseAgreementGetToOneRelated: String { 
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsBetaLicenseAgreementGetToOneRelated(_id: String, fieldsBetaLicenseAgreements: [String]? = nil, completion: @escaping ((_ data: BetaLicenseAgreementResponse?,_ error: Error?) -> Void)) {
        appsBetaLicenseAgreementGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/betaLicenseAgreement
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "agreementText" : "agreementText"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaLicenseAgreements"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)

     - returns: RequestBuilder<BetaLicenseAgreementResponse> 
     */
    open class func appsBetaLicenseAgreementGetToOneRelatedWithRequestBuilder(_id: String, fieldsBetaLicenseAgreements: [String]? = nil) -> RequestBuilder<BetaLicenseAgreementResponse> {
        var path = "/v1/apps/{id}/betaLicenseAgreement"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaLicenseAgreements]": fieldsBetaLicenseAgreements
        ])


        let requestBuilder: RequestBuilder<BetaLicenseAgreementResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsBetaTestersDeleteToManyRelationship(body: AppBetaTestersLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appsBetaTestersDeleteToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/apps/{id}/relationships/betaTesters
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func appsBetaTestersDeleteToManyRelationshipWithRequestBuilder(body: AppBetaTestersLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/apps/{id}/relationships/betaTesters"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsBuildsGetToManyRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsBuildsGetToManyRelated(_id: String, fieldsBuilds: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: BuildsResponse?,_ error: Error?) -> Void)) {
        appsBuildsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsBuilds: fieldsBuilds, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/builds
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BuildsResponse> 
     */
    open class func appsBuildsGetToManyRelatedWithRequestBuilder(_id: String, fieldsBuilds: [String]? = nil, limit: Int? = nil) -> RequestBuilder<BuildsResponse> {
        var path = "/v1/apps/{id}/builds"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[builds]": fieldsBuilds, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BuildsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_appsCiProductGetToOneRelated: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsCiProductGetToOneRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_appsCiProductGetToOneRelated: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_appsCiProductGetToOneRelated: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsCiProductGetToOneRelated: String { 
        case app = "app"
        case bundleid = "bundleId"
        case primaryrepositories = "primaryRepositories"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsCiProductGetToOneRelated(_id: String, fieldsCiProducts: [String]? = nil, fieldsApps: [String]? = nil, fieldsScmRepositories: [String]? = nil, fieldsBundleIds: [String]? = nil, limitPrimaryRepositories: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CiProductResponse?,_ error: Error?) -> Void)) {
        appsCiProductGetToOneRelatedWithRequestBuilder(_id: _id, fieldsCiProducts: fieldsCiProducts, fieldsApps: fieldsApps, fieldsScmRepositories: fieldsScmRepositories, fieldsBundleIds: fieldsBundleIds, limitPrimaryRepositories: limitPrimaryRepositories, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/ciProduct
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "primaryRepositories" : {
        "data" : [ {
          "id" : "id",
          "type" : "scmRepositories"
        }, {
          "id" : "id",
          "type" : "scmRepositories"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "productType" : "APP"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciProducts"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CiProductResponse> 
     */
    open class func appsCiProductGetToOneRelatedWithRequestBuilder(_id: String, fieldsCiProducts: [String]? = nil, fieldsApps: [String]? = nil, fieldsScmRepositories: [String]? = nil, fieldsBundleIds: [String]? = nil, limitPrimaryRepositories: Int? = nil, include: [String]? = nil) -> RequestBuilder<CiProductResponse> {
        var path = "/v1/apps/{id}/ciProduct"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[apps]": fieldsApps, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "fields[bundleIds]": fieldsBundleIds, 
                        "limit[primaryRepositories]": limitPrimaryRepositories?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CiProductResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterTerritory
     */
    public enum FilterTerritory_appsCustomerReviewsGetToManyRelated: String { 
        case abw = "ABW"
        case afg = "AFG"
        case ago = "AGO"
        case aia = "AIA"
        case alb = "ALB"
        case and = "AND"
        case ant = "ANT"
        case are = "ARE"
        case arg = "ARG"
        case arm = "ARM"
        case asm = "ASM"
        case atg = "ATG"
        case aus = "AUS"
        case aut = "AUT"
        case aze = "AZE"
        case bdi = "BDI"
        case bel = "BEL"
        case ben = "BEN"
        case bes = "BES"
        case bfa = "BFA"
        case bgd = "BGD"
        case bgr = "BGR"
        case bhr = "BHR"
        case bhs = "BHS"
        case bih = "BIH"
        case blr = "BLR"
        case blz = "BLZ"
        case bmu = "BMU"
        case bol = "BOL"
        case bra = "BRA"
        case brb = "BRB"
        case brn = "BRN"
        case btn = "BTN"
        case bwa = "BWA"
        case caf = "CAF"
        case can = "CAN"
        case che = "CHE"
        case chl = "CHL"
        case chn = "CHN"
        case civ = "CIV"
        case cmr = "CMR"
        case cod = "COD"
        case cog = "COG"
        case cok = "COK"
        case col = "COL"
        case com = "COM"
        case cpv = "CPV"
        case cri = "CRI"
        case cub = "CUB"
        case cuw = "CUW"
        case cxr = "CXR"
        case cym = "CYM"
        case cyp = "CYP"
        case cze = "CZE"
        case deu = "DEU"
        case dji = "DJI"
        case dma = "DMA"
        case dnk = "DNK"
        case dom = "DOM"
        case dza = "DZA"
        case ecu = "ECU"
        case egy = "EGY"
        case eri = "ERI"
        case esp = "ESP"
        case est = "EST"
        case eth = "ETH"
        case fin = "FIN"
        case fji = "FJI"
        case flk = "FLK"
        case fra = "FRA"
        case fro = "FRO"
        case fsm = "FSM"
        case gab = "GAB"
        case gbr = "GBR"
        case geo = "GEO"
        case ggy = "GGY"
        case gha = "GHA"
        case gib = "GIB"
        case gin = "GIN"
        case glp = "GLP"
        case gmb = "GMB"
        case gnb = "GNB"
        case gnq = "GNQ"
        case grc = "GRC"
        case grd = "GRD"
        case grl = "GRL"
        case gtm = "GTM"
        case guf = "GUF"
        case gum = "GUM"
        case guy = "GUY"
        case hkg = "HKG"
        case hnd = "HND"
        case hrv = "HRV"
        case hti = "HTI"
        case hun = "HUN"
        case idn = "IDN"
        case imn = "IMN"
        case ind = "IND"
        case irl = "IRL"
        case irq = "IRQ"
        case isl = "ISL"
        case isr = "ISR"
        case ita = "ITA"
        case jam = "JAM"
        case jey = "JEY"
        case jor = "JOR"
        case jpn = "JPN"
        case kaz = "KAZ"
        case ken = "KEN"
        case kgz = "KGZ"
        case khm = "KHM"
        case kir = "KIR"
        case kna = "KNA"
        case kor = "KOR"
        case kwt = "KWT"
        case lao = "LAO"
        case lbn = "LBN"
        case lbr = "LBR"
        case lby = "LBY"
        case lca = "LCA"
        case lie = "LIE"
        case lka = "LKA"
        case lso = "LSO"
        case ltu = "LTU"
        case lux = "LUX"
        case lva = "LVA"
        case mac = "MAC"
        case mar = "MAR"
        case mco = "MCO"
        case mda = "MDA"
        case mdg = "MDG"
        case mdv = "MDV"
        case mex = "MEX"
        case mhl = "MHL"
        case mkd = "MKD"
        case mli = "MLI"
        case mlt = "MLT"
        case mmr = "MMR"
        case mne = "MNE"
        case mng = "MNG"
        case mnp = "MNP"
        case moz = "MOZ"
        case mrt = "MRT"
        case msr = "MSR"
        case mtq = "MTQ"
        case mus = "MUS"
        case mwi = "MWI"
        case mys = "MYS"
        case myt = "MYT"
        case nam = "NAM"
        case ncl = "NCL"
        case ner = "NER"
        case nfk = "NFK"
        case nga = "NGA"
        case nic = "NIC"
        case niu = "NIU"
        case nld = "NLD"
        case nor = "NOR"
        case npl = "NPL"
        case nru = "NRU"
        case nzl = "NZL"
        case omn = "OMN"
        case pak = "PAK"
        case pan = "PAN"
        case per = "PER"
        case phl = "PHL"
        case plw = "PLW"
        case png = "PNG"
        case pol = "POL"
        case pri = "PRI"
        case prt = "PRT"
        case pry = "PRY"
        case pse = "PSE"
        case pyf = "PYF"
        case qat = "QAT"
        case reu = "REU"
        case rou = "ROU"
        case rus = "RUS"
        case rwa = "RWA"
        case sau = "SAU"
        case sen = "SEN"
        case sgp = "SGP"
        case shn = "SHN"
        case slb = "SLB"
        case sle = "SLE"
        case slv = "SLV"
        case smr = "SMR"
        case som = "SOM"
        case spm = "SPM"
        case srb = "SRB"
        case ssd = "SSD"
        case stp = "STP"
        case sur = "SUR"
        case svk = "SVK"
        case svn = "SVN"
        case swe = "SWE"
        case swz = "SWZ"
        case sxm = "SXM"
        case syc = "SYC"
        case tca = "TCA"
        case tcd = "TCD"
        case tgo = "TGO"
        case tha = "THA"
        case tjk = "TJK"
        case tkm = "TKM"
        case tls = "TLS"
        case ton = "TON"
        case tto = "TTO"
        case tun = "TUN"
        case tur = "TUR"
        case tuv = "TUV"
        case twn = "TWN"
        case tza = "TZA"
        case uga = "UGA"
        case ukr = "UKR"
        case umi = "UMI"
        case ury = "URY"
        case usa = "USA"
        case uzb = "UZB"
        case vat = "VAT"
        case vct = "VCT"
        case ven = "VEN"
        case vgb = "VGB"
        case vir = "VIR"
        case vnm = "VNM"
        case vut = "VUT"
        case wlf = "WLF"
        case wsm = "WSM"
        case yem = "YEM"
        case zaf = "ZAF"
        case zmb = "ZMB"
        case zwe = "ZWE"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsCustomerReviewsGetToManyRelated: String { 
        case createddate = "createdDate"
        case createddate_1 = "-createdDate"
        case rating = "rating"
        case rating_3 = "-rating"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appsCustomerReviewsGetToManyRelated: String { 
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsCustomerReviewResponses
     */
    public enum FieldsCustomerReviewResponses_appsCustomerReviewsGetToManyRelated: String { 
        case lastmodifieddate = "lastModifiedDate"
        case responsebody = "responseBody"
        case review = "review"
        case state = "state"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsCustomerReviewsGetToManyRelated: String { 
        case response = "response"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#x27;rating&#x27; (optional)
     - parameter filterTerritory: (query) filter by attribute &#x27;territory&#x27; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsCustomerReviewsGetToManyRelated(_id: String, filterRating: [String]? = nil, filterTerritory: [String]? = nil, existsPublishedResponse: Bool? = nil, sort: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CustomerReviewsResponse?,_ error: Error?) -> Void)) {
        appsCustomerReviewsGetToManyRelatedWithRequestBuilder(_id: _id, filterRating: filterRating, filterTerritory: filterTerritory, existsPublishedResponse: existsPublishedResponse, sort: sort, fieldsCustomerReviews: fieldsCustomerReviews, fieldsCustomerReviewResponses: fieldsCustomerReviewResponses, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/customerReviews
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "response" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviewResponses"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "reviewerNickname" : "reviewerNickname",
      "rating" : 1,
      "title" : "title",
      "body" : "body",
      "territory" : "ABW"
    },
    "id" : "id",
    "type" : "customerReviews"
  }, {
    "relationships" : {
      "response" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviewResponses"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "reviewerNickname" : "reviewerNickname",
      "rating" : 1,
      "title" : "title",
      "body" : "body",
      "territory" : "ABW"
    },
    "id" : "id",
    "type" : "customerReviews"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "review" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviews"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "responseBody" : "responseBody",
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "state" : "PUBLISHED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "customerReviewResponses"
  }, {
    "relationships" : {
      "review" : {
        "data" : {
          "id" : "id",
          "type" : "customerReviews"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "responseBody" : "responseBody",
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "state" : "PUBLISHED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "customerReviewResponses"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterRating: (query) filter by attribute &#x27;rating&#x27; (optional)
     - parameter filterTerritory: (query) filter by attribute &#x27;territory&#x27; (optional)
     - parameter existsPublishedResponse: (query) filter by publishedResponse (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsCustomerReviewResponses: (query) the fields to include for returned resources of type customerReviewResponses (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CustomerReviewsResponse> 
     */
    open class func appsCustomerReviewsGetToManyRelatedWithRequestBuilder(_id: String, filterRating: [String]? = nil, filterTerritory: [String]? = nil, existsPublishedResponse: Bool? = nil, sort: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsCustomerReviewResponses: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<CustomerReviewsResponse> {
        var path = "/v1/apps/{id}/customerReviews"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[rating]": filterRating, 
                        "filter[territory]": filterTerritory, 
                        "exists[publishedResponse]": existsPublishedResponse, 
                        "sort": sort, 
                        "fields[customerReviews]": fieldsCustomerReviews, 
                        "fields[customerReviewResponses]": fieldsCustomerReviewResponses, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CustomerReviewsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_appsEndUserLicenseAgreementGetToOneRelated: String { 
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsEndUserLicenseAgreementGetToOneRelated(_id: String, fieldsEndUserLicenseAgreements: [String]? = nil, completion: @escaping ((_ data: EndUserLicenseAgreementResponse?,_ error: Error?) -> Void)) {
        appsEndUserLicenseAgreementGetToOneRelatedWithRequestBuilder(_id: _id, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/endUserLicenseAgreement
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "territories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      }
    },
    "attributes" : {
      "agreementText" : "agreementText"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "endUserLicenseAgreements"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)

     - returns: RequestBuilder<EndUserLicenseAgreementResponse> 
     */
    open class func appsEndUserLicenseAgreementGetToOneRelatedWithRequestBuilder(_id: String, fieldsEndUserLicenseAgreements: [String]? = nil) -> RequestBuilder<EndUserLicenseAgreementResponse> {
        var path = "/v1/apps/{id}/endUserLicenseAgreement"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[endUserLicenseAgreements]": fieldsEndUserLicenseAgreements
        ])


        let requestBuilder: RequestBuilder<EndUserLicenseAgreementResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsGameCenterEnabledVersionsGetToManyRelated: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsGameCenterEnabledVersionsGetToManyRelated: String { 
        case versionstring = "versionString"
        case versionstring_1 = "-versionString"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_appsGameCenterEnabledVersionsGetToManyRelated: String { 
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsGameCenterEnabledVersionsGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsGameCenterEnabledVersionsGetToManyRelated: String { 
        case app = "app"
        case compatibleversions = "compatibleVersions"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterVersionString: (query) filter by attribute &#x27;versionString&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitCompatibleVersions: (query) maximum number of related compatibleVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsGameCenterEnabledVersionsGetToManyRelated(_id: String, filterPlatform: [String]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitCompatibleVersions: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: GameCenterEnabledVersionsResponse?,_ error: Error?) -> Void)) {
        appsGameCenterEnabledVersionsGetToManyRelatedWithRequestBuilder(_id: _id, filterPlatform: filterPlatform, filterVersionString: filterVersionString, filterId: filterId, sort: sort, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsApps: fieldsApps, limit: limit, limitCompatibleVersions: limitCompatibleVersions, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/gameCenterEnabledVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "compatibleVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      }
    },
    "attributes" : {
      "versionString" : "versionString",
      "platform" : "IOS",
      "iconAsset" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "gameCenterEnabledVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "compatibleVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      }
    },
    "attributes" : {
      "versionString" : "versionString",
      "platform" : "IOS",
      "iconAsset" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "gameCenterEnabledVersions"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterVersionString: (query) filter by attribute &#x27;versionString&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitCompatibleVersions: (query) maximum number of related compatibleVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<GameCenterEnabledVersionsResponse> 
     */
    open class func appsGameCenterEnabledVersionsGetToManyRelatedWithRequestBuilder(_id: String, filterPlatform: [String]? = nil, filterVersionString: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitCompatibleVersions: Int? = nil, include: [String]? = nil) -> RequestBuilder<GameCenterEnabledVersionsResponse> {
        var path = "/v1/apps/{id}/gameCenterEnabledVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[platform]": filterPlatform, 
                        "filter[versionString]": filterVersionString, 
                        "filter[id]": filterId, 
                        "sort": sort, 
                        "fields[gameCenterEnabledVersions]": fieldsGameCenterEnabledVersions, 
                        "fields[apps]": fieldsApps, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[compatibleVersions]": limitCompatibleVersions?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<GameCenterEnabledVersionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterAppStoreVersionsAppStoreState
     */
    public enum FilterAppStoreVersionsAppStoreState_appsGetCollection: String { 
        case accepted = "ACCEPTED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case developerRejected = "DEVELOPER_REJECTED"
        case inReview = "IN_REVIEW"
        case invalidBinary = "INVALID_BINARY"
        case metadataRejected = "METADATA_REJECTED"
        case pendingAppleRelease = "PENDING_APPLE_RELEASE"
        case pendingContract = "PENDING_CONTRACT"
        case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
        case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
        case processingForAppStore = "PROCESSING_FOR_APP_STORE"
        case readyForReview = "READY_FOR_REVIEW"
        case readyForSale = "READY_FOR_SALE"
        case rejected = "REJECTED"
        case removedFromSale = "REMOVED_FROM_SALE"
        case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
    }

    /**
     * enum for parameter filterAppStoreVersionsPlatform
     */
    public enum FilterAppStoreVersionsPlatform_appsGetCollection: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsGetCollection: String { 
        case bundleid = "bundleId"
        case bundleid_1 = "-bundleId"
        case name = "name"
        case name_3 = "-name"
        case sku = "sku"
        case sku_5 = "-sku"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsGetCollection: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsGetCollection: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case builds = "builds"
        case ciproduct = "ciProduct"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case prices = "prices"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
    }

    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_appsGetCollection: String { 
        case app = "app"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_appsGetCollection: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_appsGetCollection: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_appsGetCollection: String { 
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsGetCollection: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appsGetCollection: String { 
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_appsGetCollection: String { 
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsGetCollection: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_appsGetCollection: String { 
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appsGetCollection: String { 
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_appsGetCollection: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case appstoreagerating = "appStoreAgeRating"
        case appstorestate = "appStoreState"
        case brazilagerating = "brazilAgeRating"
        case kidsageband = "kidsAgeBand"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
    }

    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_appsGetCollection: String { 
        case app = "app"
        case _description = "description"
        case feedbackemail = "feedbackEmail"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
    }

    /**
     * enum for parameter fieldsAppPricePoints
     */
    public enum FieldsAppPricePoints_appsGetCollection: String { 
        case app = "app"
        case customerprice = "customerPrice"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsGetCollection: String { 
        case apps = "apps"
        case inapppurchasetype = "inAppPurchaseType"
        case productid = "productId"
        case referencename = "referenceName"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_appsGetCollection: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsGetCollection: String { 
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_appsGetCollection: String { 
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_appsGetCollection: String { 
        case app = "app"
        case pricetier = "priceTier"
    }

    /**
     * enum for parameter fieldsAppPreOrders
     */
    public enum FieldsAppPreOrders_appsGetCollection: String { 
        case app = "app"
        case appreleasedate = "appReleaseDate"
        case preorderavailabledate = "preOrderAvailableDate"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_appsGetCollection: String { 
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_appsGetCollection: String { 
        case app = "app"
        case optin = "optIn"
    }

    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_appsGetCollection: String { 
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsGetCollection: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_appsGetCollection: String { 
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
        case appstoreversiontemplate = "appStoreVersionTemplate"
        case customproductpagetemplate = "customProductPageTemplate"
        case name = "name"
        case url = "url"
        case visible = "visible"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsGetCollection: String { 
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsPerfPowerMetrics
     */
    public enum FieldsPerfPowerMetrics_appsGetCollection: String { 
        case devicetype = "deviceType"
        case metrictype = "metricType"
        case platform = "platform"
    }

    /**

     - parameter filterAppStoreVersionsAppStoreState: (query) filter by attribute &#x27;appStoreVersions.appStoreState&#x27; (optional)
     - parameter filterAppStoreVersionsPlatform: (query) filter by attribute &#x27;appStoreVersions.platform&#x27; (optional)
     - parameter filterBundleId: (query) filter by attribute &#x27;bundleId&#x27; (optional)
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterSku: (query) filter by attribute &#x27;sku&#x27; (optional)
     - parameter filterAppStoreVersions: (query) filter by id(s) of related &#x27;appStoreVersions&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter existsGameCenterEnabledVersions: (query) filter by existence or non-existence of related &#x27;gameCenterEnabledVersions&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsGetCollection(filterAppStoreVersionsAppStoreState: [String]? = nil, filterAppStoreVersionsPlatform: [String]? = nil, filterBundleId: [String]? = nil, filterName: [String]? = nil, filterSku: [String]? = nil, filterAppStoreVersions: [String]? = nil, filterId: [String]? = nil, existsGameCenterEnabledVersions: Bool? = nil, sort: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsBetaAppReviewDetails: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, fieldsBetaGroups: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsAppEvents: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsBetaLicenseAgreements: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsBetaAppLocalizations: [String]? = nil, fieldsAppPricePoints: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsAppPrices: [String]? = nil, fieldsAppPreOrders: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsSubscriptionGracePeriods: [String]? = nil, fieldsEndUserLicenseAgreements: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsTerritories: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil, completion: @escaping ((_ data: AppsResponse?,_ error: Error?) -> Void)) {
        appsGetCollectionWithRequestBuilder(filterAppStoreVersionsAppStoreState: filterAppStoreVersionsAppStoreState, filterAppStoreVersionsPlatform: filterAppStoreVersionsPlatform, filterBundleId: filterBundleId, filterName: filterName, filterSku: filterSku, filterAppStoreVersions: filterAppStoreVersions, filterId: filterId, existsGameCenterEnabledVersions: existsGameCenterEnabledVersions, sort: sort, fieldsApps: fieldsApps, limit: limit, include: include, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails, fieldsCiProducts: fieldsCiProducts, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsBetaGroups: fieldsBetaGroups, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsCustomerReviews: fieldsCustomerReviews, fieldsAppEvents: fieldsAppEvents, fieldsBuilds: fieldsBuilds, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements, fieldsAppClips: fieldsAppClips, fieldsAppInfos: fieldsAppInfos, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, fieldsAppPricePoints: fieldsAppPricePoints, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsInAppPurchases: fieldsInAppPurchases, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsAppPrices: fieldsAppPrices, fieldsAppPreOrders: fieldsAppPreOrders, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsTerritories: fieldsTerritories, fieldsPerfPowerMetrics: fieldsPerfPowerMetrics, limitAppClips: limitAppClips, limitAppCustomProductPages: limitAppCustomProductPages, limitAppEvents: limitAppEvents, limitAppInfos: limitAppInfos, limitAppStoreVersions: limitAppStoreVersions, limitAvailableTerritories: limitAvailableTerritories, limitBetaAppLocalizations: limitBetaAppLocalizations, limitBetaGroups: limitBetaGroups, limitBuilds: limitBuilds, limitGameCenterEnabledVersions: limitGameCenterEnabledVersions, limitInAppPurchases: limitInAppPurchases, limitInAppPurchasesV2: limitInAppPurchasesV2, limitPreReleaseVersions: limitPreReleaseVersions, limitPrices: limitPrices, limitPromotedPurchases: limitPromotedPurchases, limitReviewSubmissions: limitReviewSubmissions, limitSubscriptionGroups: limitSubscriptionGroups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter filterAppStoreVersionsAppStoreState: (query) filter by attribute &#x27;appStoreVersions.appStoreState&#x27; (optional)
     - parameter filterAppStoreVersionsPlatform: (query) filter by attribute &#x27;appStoreVersions.platform&#x27; (optional)
     - parameter filterBundleId: (query) filter by attribute &#x27;bundleId&#x27; (optional)
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterSku: (query) filter by attribute &#x27;sku&#x27; (optional)
     - parameter filterAppStoreVersions: (query) filter by id(s) of related &#x27;appStoreVersions&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter existsGameCenterEnabledVersions: (query) filter by existence or non-existence of related &#x27;gameCenterEnabledVersions&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)

     - returns: RequestBuilder<AppsResponse> 
     */
    open class func appsGetCollectionWithRequestBuilder(filterAppStoreVersionsAppStoreState: [String]? = nil, filterAppStoreVersionsPlatform: [String]? = nil, filterBundleId: [String]? = nil, filterName: [String]? = nil, filterSku: [String]? = nil, filterAppStoreVersions: [String]? = nil, filterId: [String]? = nil, existsGameCenterEnabledVersions: Bool? = nil, sort: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsBetaAppReviewDetails: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, fieldsBetaGroups: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsAppEvents: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsBetaLicenseAgreements: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsBetaAppLocalizations: [String]? = nil, fieldsAppPricePoints: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsAppPrices: [String]? = nil, fieldsAppPreOrders: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsSubscriptionGracePeriods: [String]? = nil, fieldsEndUserLicenseAgreements: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsTerritories: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil) -> RequestBuilder<AppsResponse> {
        let path = "/v1/apps"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[appStoreVersions.appStoreState]": filterAppStoreVersionsAppStoreState, 
                        "filter[appStoreVersions.platform]": filterAppStoreVersionsPlatform, 
                        "filter[bundleId]": filterBundleId, 
                        "filter[name]": filterName, 
                        "filter[sku]": filterSku, 
                        "filter[appStoreVersions]": filterAppStoreVersions, 
                        "filter[id]": filterId, 
                        "exists[gameCenterEnabledVersions]": existsGameCenterEnabledVersions, 
                        "sort": sort, 
                        "fields[apps]": fieldsApps, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[betaAppReviewDetails]": fieldsBetaAppReviewDetails, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[reviewSubmissions]": fieldsReviewSubmissions, 
                        "fields[betaGroups]": fieldsBetaGroups, 
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[customerReviews]": fieldsCustomerReviews, 
                        "fields[appEvents]": fieldsAppEvents, 
                        "fields[builds]": fieldsBuilds, 
                        "fields[betaLicenseAgreements]": fieldsBetaLicenseAgreements, 
                        "fields[appClips]": fieldsAppClips, 
                        "fields[appInfos]": fieldsAppInfos, 
                        "fields[betaAppLocalizations]": fieldsBetaAppLocalizations, 
                        "fields[appPricePoints]": fieldsAppPricePoints, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[subscriptionGroups]": fieldsSubscriptionGroups, 
                        "fields[appPrices]": fieldsAppPrices, 
                        "fields[appPreOrders]": fieldsAppPreOrders, 
                        "fields[gameCenterEnabledVersions]": fieldsGameCenterEnabledVersions, 
                        "fields[subscriptionGracePeriods]": fieldsSubscriptionGracePeriods, 
                        "fields[endUserLicenseAgreements]": fieldsEndUserLicenseAgreements, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[appCustomProductPages]": fieldsAppCustomProductPages, 
                        "fields[territories]": fieldsTerritories, 
                        "fields[perfPowerMetrics]": fieldsPerfPowerMetrics, 
                        "limit[appClips]": limitAppClips?.encodeToJSON(), 
                        "limit[appCustomProductPages]": limitAppCustomProductPages?.encodeToJSON(), 
                        "limit[appEvents]": limitAppEvents?.encodeToJSON(), 
                        "limit[appInfos]": limitAppInfos?.encodeToJSON(), 
                        "limit[appStoreVersions]": limitAppStoreVersions?.encodeToJSON(), 
                        "limit[availableTerritories]": limitAvailableTerritories?.encodeToJSON(), 
                        "limit[betaAppLocalizations]": limitBetaAppLocalizations?.encodeToJSON(), 
                        "limit[betaGroups]": limitBetaGroups?.encodeToJSON(), 
                        "limit[builds]": limitBuilds?.encodeToJSON(), 
                        "limit[gameCenterEnabledVersions]": limitGameCenterEnabledVersions?.encodeToJSON(), 
                        "limit[inAppPurchases]": limitInAppPurchases?.encodeToJSON(), 
                        "limit[inAppPurchasesV2]": limitInAppPurchasesV2?.encodeToJSON(), 
                        "limit[preReleaseVersions]": limitPreReleaseVersions?.encodeToJSON(), 
                        "limit[prices]": limitPrices?.encodeToJSON(), 
                        "limit[promotedPurchases]": limitPromotedPurchases?.encodeToJSON(), 
                        "limit[reviewSubmissions]": limitReviewSubmissions?.encodeToJSON(), 
                        "limit[subscriptionGroups]": limitSubscriptionGroups?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<AppsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsGetInstance: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsGetInstance: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case builds = "builds"
        case ciproduct = "ciProduct"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case prices = "prices"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
    }

    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_appsGetInstance: String { 
        case app = "app"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_appsGetInstance: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_appsGetInstance: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_appsGetInstance: String { 
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsGetInstance: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsCustomerReviews
     */
    public enum FieldsCustomerReviews_appsGetInstance: String { 
        case body = "body"
        case createddate = "createdDate"
        case rating = "rating"
        case response = "response"
        case reviewernickname = "reviewerNickname"
        case territory = "territory"
        case title = "title"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_appsGetInstance: String { 
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_appsGetInstance: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_appsGetInstance: String { 
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_appsGetInstance: String { 
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_appsGetInstance: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case appstoreagerating = "appStoreAgeRating"
        case appstorestate = "appStoreState"
        case brazilagerating = "brazilAgeRating"
        case kidsageband = "kidsAgeBand"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
    }

    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_appsGetInstance: String { 
        case app = "app"
        case _description = "description"
        case feedbackemail = "feedbackEmail"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
    }

    /**
     * enum for parameter fieldsAppPricePoints
     */
    public enum FieldsAppPricePoints_appsGetInstance: String { 
        case app = "app"
        case customerprice = "customerPrice"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsGetInstance: String { 
        case apps = "apps"
        case inapppurchasetype = "inAppPurchaseType"
        case productid = "productId"
        case referencename = "referenceName"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_appsGetInstance: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsGetInstance: String { 
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_appsGetInstance: String { 
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_appsGetInstance: String { 
        case app = "app"
        case pricetier = "priceTier"
    }

    /**
     * enum for parameter fieldsAppPreOrders
     */
    public enum FieldsAppPreOrders_appsGetInstance: String { 
        case app = "app"
        case appreleasedate = "appReleaseDate"
        case preorderavailabledate = "preOrderAvailableDate"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_appsGetInstance: String { 
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_appsGetInstance: String { 
        case app = "app"
        case optin = "optIn"
    }

    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_appsGetInstance: String { 
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsGetInstance: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_appsGetInstance: String { 
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
        case appstoreversiontemplate = "appStoreVersionTemplate"
        case customproductpagetemplate = "customProductPageTemplate"
        case name = "name"
        case url = "url"
        case visible = "visible"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsGetInstance: String { 
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsPerfPowerMetrics
     */
    public enum FieldsPerfPowerMetrics_appsGetInstance: String { 
        case devicetype = "deviceType"
        case metrictype = "metricType"
        case platform = "platform"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsGetInstance(_id: String, fieldsApps: [String]? = nil, include: [String]? = nil, fieldsBetaAppReviewDetails: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, fieldsBetaGroups: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsAppEvents: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsBetaLicenseAgreements: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsBetaAppLocalizations: [String]? = nil, fieldsAppPricePoints: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsAppPrices: [String]? = nil, fieldsAppPreOrders: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsSubscriptionGracePeriods: [String]? = nil, fieldsEndUserLicenseAgreements: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsTerritories: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil, completion: @escaping ((_ data: AppResponse?,_ error: Error?) -> Void)) {
        appsGetInstanceWithRequestBuilder(_id: _id, fieldsApps: fieldsApps, include: include, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails, fieldsCiProducts: fieldsCiProducts, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsBetaGroups: fieldsBetaGroups, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsCustomerReviews: fieldsCustomerReviews, fieldsAppEvents: fieldsAppEvents, fieldsBuilds: fieldsBuilds, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements, fieldsAppClips: fieldsAppClips, fieldsAppInfos: fieldsAppInfos, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, fieldsAppPricePoints: fieldsAppPricePoints, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsInAppPurchases: fieldsInAppPurchases, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsAppPrices: fieldsAppPrices, fieldsAppPreOrders: fieldsAppPreOrders, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsTerritories: fieldsTerritories, fieldsPerfPowerMetrics: fieldsPerfPowerMetrics, limitAppClips: limitAppClips, limitAppCustomProductPages: limitAppCustomProductPages, limitAppEvents: limitAppEvents, limitAppInfos: limitAppInfos, limitAppStoreVersions: limitAppStoreVersions, limitAvailableTerritories: limitAvailableTerritories, limitBetaAppLocalizations: limitBetaAppLocalizations, limitBetaGroups: limitBetaGroups, limitBuilds: limitBuilds, limitGameCenterEnabledVersions: limitGameCenterEnabledVersions, limitInAppPurchases: limitInAppPurchases, limitInAppPurchasesV2: limitInAppPurchasesV2, limitPreReleaseVersions: limitPreReleaseVersions, limitPrices: limitPrices, limitPromotedPurchases: limitPromotedPurchases, limitReviewSubmissions: limitReviewSubmissions, limitSubscriptionGroups: limitSubscriptionGroups).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsCustomerReviews: (query) the fields to include for returned resources of type customerReviews (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)

     - returns: RequestBuilder<AppResponse> 
     */
    open class func appsGetInstanceWithRequestBuilder(_id: String, fieldsApps: [String]? = nil, include: [String]? = nil, fieldsBetaAppReviewDetails: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, fieldsBetaGroups: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsCustomerReviews: [String]? = nil, fieldsAppEvents: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsBetaLicenseAgreements: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsBetaAppLocalizations: [String]? = nil, fieldsAppPricePoints: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsAppPrices: [String]? = nil, fieldsAppPreOrders: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsSubscriptionGracePeriods: [String]? = nil, fieldsEndUserLicenseAgreements: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsTerritories: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitPromotedPurchases: Int? = nil, limitReviewSubmissions: Int? = nil, limitSubscriptionGroups: Int? = nil) -> RequestBuilder<AppResponse> {
        var path = "/v1/apps/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[apps]": fieldsApps, 
                        "include": include, 
                        "fields[betaAppReviewDetails]": fieldsBetaAppReviewDetails, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[reviewSubmissions]": fieldsReviewSubmissions, 
                        "fields[betaGroups]": fieldsBetaGroups, 
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[customerReviews]": fieldsCustomerReviews, 
                        "fields[appEvents]": fieldsAppEvents, 
                        "fields[builds]": fieldsBuilds, 
                        "fields[betaLicenseAgreements]": fieldsBetaLicenseAgreements, 
                        "fields[appClips]": fieldsAppClips, 
                        "fields[appInfos]": fieldsAppInfos, 
                        "fields[betaAppLocalizations]": fieldsBetaAppLocalizations, 
                        "fields[appPricePoints]": fieldsAppPricePoints, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[subscriptionGroups]": fieldsSubscriptionGroups, 
                        "fields[appPrices]": fieldsAppPrices, 
                        "fields[appPreOrders]": fieldsAppPreOrders, 
                        "fields[gameCenterEnabledVersions]": fieldsGameCenterEnabledVersions, 
                        "fields[subscriptionGracePeriods]": fieldsSubscriptionGracePeriods, 
                        "fields[endUserLicenseAgreements]": fieldsEndUserLicenseAgreements, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[appCustomProductPages]": fieldsAppCustomProductPages, 
                        "fields[territories]": fieldsTerritories, 
                        "fields[perfPowerMetrics]": fieldsPerfPowerMetrics, 
                        "limit[appClips]": limitAppClips?.encodeToJSON(), 
                        "limit[appCustomProductPages]": limitAppCustomProductPages?.encodeToJSON(), 
                        "limit[appEvents]": limitAppEvents?.encodeToJSON(), 
                        "limit[appInfos]": limitAppInfos?.encodeToJSON(), 
                        "limit[appStoreVersions]": limitAppStoreVersions?.encodeToJSON(), 
                        "limit[availableTerritories]": limitAvailableTerritories?.encodeToJSON(), 
                        "limit[betaAppLocalizations]": limitBetaAppLocalizations?.encodeToJSON(), 
                        "limit[betaGroups]": limitBetaGroups?.encodeToJSON(), 
                        "limit[builds]": limitBuilds?.encodeToJSON(), 
                        "limit[gameCenterEnabledVersions]": limitGameCenterEnabledVersions?.encodeToJSON(), 
                        "limit[inAppPurchases]": limitInAppPurchases?.encodeToJSON(), 
                        "limit[inAppPurchasesV2]": limitInAppPurchasesV2?.encodeToJSON(), 
                        "limit[preReleaseVersions]": limitPreReleaseVersions?.encodeToJSON(), 
                        "limit[prices]": limitPrices?.encodeToJSON(), 
                        "limit[promotedPurchases]": limitPromotedPurchases?.encodeToJSON(), 
                        "limit[reviewSubmissions]": limitReviewSubmissions?.encodeToJSON(), 
                        "limit[subscriptionGroups]": limitSubscriptionGroups?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<AppResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterInAppPurchaseType
     */
    public enum FilterInAppPurchaseType_appsInAppPurchasesGetToManyRelated: String { 
        case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
        case nonConsumable = "NON_CONSUMABLE"
        case consumable = "CONSUMABLE"
        case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
        case freeSubscription = "FREE_SUBSCRIPTION"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsInAppPurchasesGetToManyRelated: String { 
        case inapppurchasetype = "inAppPurchaseType"
        case inapppurchasetype_1 = "-inAppPurchaseType"
        case productid = "productId"
        case productid_3 = "-productId"
        case referencename = "referenceName"
        case referencename_5 = "-referenceName"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsInAppPurchasesGetToManyRelated: String { 
        case apps = "apps"
        case inapppurchasetype = "inAppPurchaseType"
        case productid = "productId"
        case referencename = "referenceName"
        case state = "state"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsInAppPurchasesGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsInAppPurchasesGetToManyRelated: String { 
        case apps = "apps"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#x27;inAppPurchaseType&#x27; (optional)
     - parameter filterCanBeSubmitted: (query) filter by canBeSubmitted (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsInAppPurchasesGetToManyRelated(_id: String, filterInAppPurchaseType: [String]? = nil, filterCanBeSubmitted: [String]? = nil, sort: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitApps: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: InAppPurchasesResponse?,_ error: Error?) -> Void)) {
        appsInAppPurchasesGetToManyRelatedWithRequestBuilder(_id: _id, filterInAppPurchaseType: filterInAppPurchaseType, filterCanBeSubmitted: filterCanBeSubmitted, sort: sort, fieldsInAppPurchases: fieldsInAppPurchases, fieldsApps: fieldsApps, limit: limit, limitApps: limitApps, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/inAppPurchases
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "apps" : {
        "data" : [ {
          "id" : "id",
          "type" : "apps"
        }, {
          "id" : "id",
          "type" : "apps"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "productId" : "productId",
      "state" : "CREATED",
      "inAppPurchaseType" : "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION",
      "referenceName" : "referenceName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "inAppPurchases"
  }, {
    "relationships" : {
      "apps" : {
        "data" : [ {
          "id" : "id",
          "type" : "apps"
        }, {
          "id" : "id",
          "type" : "apps"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "productId" : "productId",
      "state" : "CREATED",
      "inAppPurchaseType" : "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION",
      "referenceName" : "referenceName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "inAppPurchases"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#x27;inAppPurchaseType&#x27; (optional)
     - parameter filterCanBeSubmitted: (query) filter by canBeSubmitted (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitApps: (query) maximum number of related apps returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<InAppPurchasesResponse> 
     */
    open class func appsInAppPurchasesGetToManyRelatedWithRequestBuilder(_id: String, filterInAppPurchaseType: [String]? = nil, filterCanBeSubmitted: [String]? = nil, sort: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitApps: Int? = nil, include: [String]? = nil) -> RequestBuilder<InAppPurchasesResponse> {
        var path = "/v1/apps/{id}/inAppPurchases"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[inAppPurchaseType]": filterInAppPurchaseType, 
                        "filter[canBeSubmitted]": filterCanBeSubmitted, 
                        "sort": sort, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[apps]": fieldsApps, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[apps]": limitApps?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<InAppPurchasesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterInAppPurchaseType
     */
    public enum FilterInAppPurchaseType_appsInAppPurchasesV2GetToManyRelated: String { 
        case consumable = "CONSUMABLE"
        case nonConsumable = "NON_CONSUMABLE"
        case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appsInAppPurchasesV2GetToManyRelated: String { 
        case missingMetadata = "MISSING_METADATA"
        case waitingForUpload = "WAITING_FOR_UPLOAD"
        case processingContent = "PROCESSING_CONTENT"
        case readyToSubmit = "READY_TO_SUBMIT"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
        case pendingBinaryApproval = "PENDING_BINARY_APPROVAL"
        case approved = "APPROVED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case removedFromSale = "REMOVED_FROM_SALE"
        case rejected = "REJECTED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsInAppPurchasesV2GetToManyRelated: String { 
        case inapppurchasetype = "inAppPurchaseType"
        case inapppurchasetype_1 = "-inAppPurchaseType"
        case name = "name"
        case name_3 = "-name"
    }

    /**
     * enum for parameter fieldsInAppPurchaseAppStoreReviewScreenshots
     */
    public enum FieldsInAppPurchaseAppStoreReviewScreenshots_appsInAppPurchasesV2GetToManyRelated: String { 
        case assetdeliverystate = "assetDeliveryState"
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case inapppurchasev2 = "inAppPurchaseV2"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsInAppPurchasePricePoints
     */
    public enum FieldsInAppPurchasePricePoints_appsInAppPurchasesV2GetToManyRelated: String { 
        case customerprice = "customerPrice"
        case inapppurchasev2 = "inAppPurchaseV2"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsInAppPurchasesV2GetToManyRelated: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsInAppPurchaseLocalizations
     */
    public enum FieldsInAppPurchaseLocalizations_appsInAppPurchasesV2GetToManyRelated: String { 
        case _description = "description"
        case inapppurchasev2 = "inAppPurchaseV2"
        case locale = "locale"
        case name = "name"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsInAppPurchasesV2GetToManyRelated: String { 
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsInAppPurchasePriceSchedules
     */
    public enum FieldsInAppPurchasePriceSchedules_appsInAppPurchasesV2GetToManyRelated: String { 
        case inapppurchase = "inAppPurchase"
        case manualprices = "manualPrices"
    }

    /**
     * enum for parameter fieldsInAppPurchaseContents
     */
    public enum FieldsInAppPurchaseContents_appsInAppPurchasesV2GetToManyRelated: String { 
        case filename = "fileName"
        case filesize = "fileSize"
        case inapppurchasev2 = "inAppPurchaseV2"
        case lastmodifieddate = "lastModifiedDate"
        case url = "url"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsInAppPurchasesV2GetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case content = "content"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case pricepoints = "pricePoints"
        case promotedpurchase = "promotedPurchase"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#x27;inAppPurchaseType&#x27; (optional)
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterProductId: (query) filter by attribute &#x27;productId&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitInAppPurchaseLocalizations: (query) maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)
     - parameter limitPricePoints: (query) maximum number of related pricePoints returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsInAppPurchasesV2GetToManyRelated(_id: String, filterInAppPurchaseType: [String]? = nil, filterName: [String]? = nil, filterProductId: [String]? = nil, filterState: [String]? = nil, sort: [String]? = nil, fieldsInAppPurchaseAppStoreReviewScreenshots: [String]? = nil, fieldsInAppPurchasePricePoints: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsInAppPurchaseLocalizations: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsInAppPurchasePriceSchedules: [String]? = nil, fieldsInAppPurchaseContents: [String]? = nil, limit: Int? = nil, limitInAppPurchaseLocalizations: Int? = nil, limitPricePoints: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: InAppPurchasesV2Response?,_ error: Error?) -> Void)) {
        appsInAppPurchasesV2GetToManyRelatedWithRequestBuilder(_id: _id, filterInAppPurchaseType: filterInAppPurchaseType, filterName: filterName, filterProductId: filterProductId, filterState: filterState, sort: sort, fieldsInAppPurchaseAppStoreReviewScreenshots: fieldsInAppPurchaseAppStoreReviewScreenshots, fieldsInAppPurchasePricePoints: fieldsInAppPurchasePricePoints, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsInAppPurchaseLocalizations: fieldsInAppPurchaseLocalizations, fieldsInAppPurchases: fieldsInAppPurchases, fieldsInAppPurchasePriceSchedules: fieldsInAppPurchasePriceSchedules, fieldsInAppPurchaseContents: fieldsInAppPurchaseContents, limit: limit, limitInAppPurchaseLocalizations: limitInAppPurchaseLocalizations, limitPricePoints: limitPricePoints, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/inAppPurchasesV2
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "pricePoints" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchasePricePoints"
        }, {
          "id" : "id",
          "type" : "inAppPurchasePricePoints"
        } ]
      },
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchaseAppStoreReviewScreenshots"
        }
      },
      "iapPriceSchedule" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchasePriceSchedules"
        }
      },
      "content" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchaseContents"
        }
      },
      "inAppPurchaseLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchaseLocalizations"
        }, {
          "id" : "id",
          "type" : "inAppPurchaseLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "contentHosting" : true,
      "state" : "MISSING_METADATA",
      "inAppPurchaseType" : "CONSUMABLE",
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "inAppPurchases"
  }, {
    "relationships" : {
      "pricePoints" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchasePricePoints"
        }, {
          "id" : "id",
          "type" : "inAppPurchasePricePoints"
        } ]
      },
      "appStoreReviewScreenshot" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchaseAppStoreReviewScreenshots"
        }
      },
      "iapPriceSchedule" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchasePriceSchedules"
        }
      },
      "content" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchaseContents"
        }
      },
      "inAppPurchaseLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchaseLocalizations"
        }, {
          "id" : "id",
          "type" : "inAppPurchaseLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "promotedPurchase" : {
        "data" : {
          "id" : "id",
          "type" : "promotedPurchases"
        }
      }
    },
    "attributes" : {
      "reviewNote" : "reviewNote",
      "productId" : "productId",
      "name" : "name",
      "familySharable" : true,
      "contentHosting" : true,
      "state" : "MISSING_METADATA",
      "inAppPurchaseType" : "CONSUMABLE",
      "availableInAllTerritories" : true
    },
    "id" : "id",
    "type" : "inAppPurchases"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterInAppPurchaseType: (query) filter by attribute &#x27;inAppPurchaseType&#x27; (optional)
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterProductId: (query) filter by attribute &#x27;productId&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsInAppPurchaseAppStoreReviewScreenshots: (query) the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots (optional)
     - parameter fieldsInAppPurchasePricePoints: (query) the fields to include for returned resources of type inAppPurchasePricePoints (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsInAppPurchaseLocalizations: (query) the fields to include for returned resources of type inAppPurchaseLocalizations (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsInAppPurchasePriceSchedules: (query) the fields to include for returned resources of type inAppPurchasePriceSchedules (optional)
     - parameter fieldsInAppPurchaseContents: (query) the fields to include for returned resources of type inAppPurchaseContents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitInAppPurchaseLocalizations: (query) maximum number of related inAppPurchaseLocalizations returned (when they are included) (optional)
     - parameter limitPricePoints: (query) maximum number of related pricePoints returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<InAppPurchasesV2Response> 
     */
    open class func appsInAppPurchasesV2GetToManyRelatedWithRequestBuilder(_id: String, filterInAppPurchaseType: [String]? = nil, filterName: [String]? = nil, filterProductId: [String]? = nil, filterState: [String]? = nil, sort: [String]? = nil, fieldsInAppPurchaseAppStoreReviewScreenshots: [String]? = nil, fieldsInAppPurchasePricePoints: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsInAppPurchaseLocalizations: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsInAppPurchasePriceSchedules: [String]? = nil, fieldsInAppPurchaseContents: [String]? = nil, limit: Int? = nil, limitInAppPurchaseLocalizations: Int? = nil, limitPricePoints: Int? = nil, include: [String]? = nil) -> RequestBuilder<InAppPurchasesV2Response> {
        var path = "/v1/apps/{id}/inAppPurchasesV2"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[inAppPurchaseType]": filterInAppPurchaseType, 
                        "filter[name]": filterName, 
                        "filter[productId]": filterProductId, 
                        "filter[state]": filterState, 
                        "sort": sort, 
                        "fields[inAppPurchaseAppStoreReviewScreenshots]": fieldsInAppPurchaseAppStoreReviewScreenshots, 
                        "fields[inAppPurchasePricePoints]": fieldsInAppPurchasePricePoints, 
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[inAppPurchaseLocalizations]": fieldsInAppPurchaseLocalizations, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[inAppPurchasePriceSchedules]": fieldsInAppPurchasePriceSchedules, 
                        "fields[inAppPurchaseContents]": fieldsInAppPurchaseContents, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[inAppPurchaseLocalizations]": limitInAppPurchaseLocalizations?.encodeToJSON(), 
                        "limit[pricePoints]": limitPricePoints?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<InAppPurchasesV2Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterMetricType
     */
    public enum FilterMetricType_appsPerfPowerMetricsGetToManyRelated: String { 
        case disk = "DISK"
        case hang = "HANG"
        case battery = "BATTERY"
        case launch = "LAUNCH"
        case memory = "MEMORY"
        case animation = "ANIMATION"
        case termination = "TERMINATION"
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsPerfPowerMetricsGetToManyRelated: String { 
        case ios = "IOS"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterDeviceType: (query) filter by attribute &#x27;deviceType&#x27; (optional)
     - parameter filterMetricType: (query) filter by attribute &#x27;metricType&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPerfPowerMetricsGetToManyRelated(_id: String, filterDeviceType: [String]? = nil, filterMetricType: [String]? = nil, filterPlatform: [String]? = nil, completion: @escaping ((_ data: XcodeMetrics?,_ error: Error?) -> Void)) {
        appsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(_id: _id, filterDeviceType: filterDeviceType, filterMetricType: filterMetricType, filterPlatform: filterPlatform).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/perfPowerMetrics
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "insights" : {
    "trendingUp" : [ {
      "metricCategory" : "HANG",
      "latestVersion" : "latestVersion",
      "metric" : "metric",
      "summaryString" : "summaryString",
      "highImpact" : true,
      "referenceVersions" : "referenceVersions",
      "maxLatestVersionValue" : 0.8008281904610115,
      "subSystemLabel" : "subSystemLabel",
      "populations" : [ {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      }, {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      } ]
    }, {
      "metricCategory" : "HANG",
      "latestVersion" : "latestVersion",
      "metric" : "metric",
      "summaryString" : "summaryString",
      "highImpact" : true,
      "referenceVersions" : "referenceVersions",
      "maxLatestVersionValue" : 0.8008281904610115,
      "subSystemLabel" : "subSystemLabel",
      "populations" : [ {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      }, {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      } ]
    } ],
    "regressions" : [ null, null ]
  },
  "productData" : [ {
    "metricCategories" : [ {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    }, {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    } ],
    "platform" : "platform"
  }, {
    "metricCategories" : [ {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    }, {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    } ],
    "platform" : "platform"
  } ],
  "version" : "version"
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterDeviceType: (query) filter by attribute &#x27;deviceType&#x27; (optional)
     - parameter filterMetricType: (query) filter by attribute &#x27;metricType&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)

     - returns: RequestBuilder<XcodeMetrics> 
     */
    open class func appsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(_id: String, filterDeviceType: [String]? = nil, filterMetricType: [String]? = nil, filterPlatform: [String]? = nil) -> RequestBuilder<XcodeMetrics> {
        var path = "/v1/apps/{id}/perfPowerMetrics"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[deviceType]": filterDeviceType, 
                        "filter[metricType]": filterMetricType, 
                        "filter[platform]": filterPlatform
        ])


        let requestBuilder: RequestBuilder<XcodeMetrics>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppPreOrders
     */
    public enum FieldsAppPreOrders_appsPreOrderGetToOneRelated: String { 
        case app = "app"
        case appreleasedate = "appReleaseDate"
        case preorderavailabledate = "preOrderAvailableDate"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPreOrderGetToOneRelated(_id: String, fieldsAppPreOrders: [String]? = nil, completion: @escaping ((_ data: AppPreOrderResponse?,_ error: Error?) -> Void)) {
        appsPreOrderGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAppPreOrders: fieldsAppPreOrders).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/preOrder
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "preOrderAvailableDate" : "2000-01-23",
      "appReleaseDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appPreOrders"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)

     - returns: RequestBuilder<AppPreOrderResponse> 
     */
    open class func appsPreOrderGetToOneRelatedWithRequestBuilder(_id: String, fieldsAppPreOrders: [String]? = nil) -> RequestBuilder<AppPreOrderResponse> {
        var path = "/v1/apps/{id}/preOrder"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appPreOrders]": fieldsAppPreOrders
        ])


        let requestBuilder: RequestBuilder<AppPreOrderResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_appsPreReleaseVersionsGetToManyRelated: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPreReleaseVersionsGetToManyRelated(_id: String, fieldsPreReleaseVersions: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: PreReleaseVersionsResponse?,_ error: Error?) -> Void)) {
        appsPreReleaseVersionsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsPreReleaseVersions: fieldsPreReleaseVersions, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/preReleaseVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      }
    },
    "attributes" : {
      "version" : "version",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "preReleaseVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      }
    },
    "attributes" : {
      "version" : "version",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "preReleaseVersions"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<PreReleaseVersionsResponse> 
     */
    open class func appsPreReleaseVersionsGetToManyRelatedWithRequestBuilder(_id: String, fieldsPreReleaseVersions: [String]? = nil, limit: Int? = nil) -> RequestBuilder<PreReleaseVersionsResponse> {
        var path = "/v1/apps/{id}/preReleaseVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<PreReleaseVersionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppPriceTiers
     */
    public enum FieldsAppPriceTiers_appsPricePointsGetToManyRelated: String { 
        case pricepoints = "pricePoints"
    }

    /**
     * enum for parameter fieldsAppPricePoints
     */
    public enum FieldsAppPricePoints_appsPricePointsGetToManyRelated: String { 
        case app = "app"
        case customerprice = "customerPrice"
        case pricetier = "priceTier"
        case proceeds = "proceeds"
        case territory = "territory"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsPricePointsGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_appsPricePointsGetToManyRelated: String { 
        case currency = "currency"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsPricePointsGetToManyRelated: String { 
        case app = "app"
        case pricetier = "priceTier"
        case territory = "territory"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterPriceTier: (query) filter by id(s) of related &#x27;priceTier&#x27; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPricePointsGetToManyRelated(_id: String, filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsAppPriceTiers: [String]? = nil, fieldsAppPricePoints: [String]? = nil, fieldsApps: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppPricePointsV2Response?,_ error: Error?) -> Void)) {
        appsPricePointsGetToManyRelatedWithRequestBuilder(_id: _id, filterPriceTier: filterPriceTier, filterTerritory: filterTerritory, fieldsAppPriceTiers: fieldsAppPriceTiers, fieldsAppPricePoints: fieldsAppPricePoints, fieldsApps: fieldsApps, fieldsTerritories: fieldsTerritories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/pricePoints
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "priceTier" : {
        "data" : {
          "id" : "id",
          "type" : "appPriceTiers"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "proceeds" : "proceeds",
      "customerPrice" : "customerPrice"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appPricePoints"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "priceTier" : {
        "data" : {
          "id" : "id",
          "type" : "appPriceTiers"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "territory" : {
        "data" : {
          "id" : "id",
          "type" : "territories"
        }
      }
    },
    "attributes" : {
      "proceeds" : "proceeds",
      "customerPrice" : "customerPrice"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appPricePoints"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterPriceTier: (query) filter by id(s) of related &#x27;priceTier&#x27; (optional)
     - parameter filterTerritory: (query) filter by id(s) of related &#x27;territory&#x27; (optional)
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsAppPricePoints: (query) the fields to include for returned resources of type appPricePoints (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppPricePointsV2Response> 
     */
    open class func appsPricePointsGetToManyRelatedWithRequestBuilder(_id: String, filterPriceTier: [String]? = nil, filterTerritory: [String]? = nil, fieldsAppPriceTiers: [String]? = nil, fieldsAppPricePoints: [String]? = nil, fieldsApps: [String]? = nil, fieldsTerritories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppPricePointsV2Response> {
        var path = "/v1/apps/{id}/pricePoints"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[priceTier]": filterPriceTier, 
                        "filter[territory]": filterTerritory, 
                        "fields[appPriceTiers]": fieldsAppPriceTiers, 
                        "fields[appPricePoints]": fieldsAppPricePoints, 
                        "fields[apps]": fieldsApps, 
                        "fields[territories]": fieldsTerritories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppPricePointsV2Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppPriceTiers
     */
    public enum FieldsAppPriceTiers_appsPricesGetToManyRelated: String { 
        case pricepoints = "pricePoints"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsPricesGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_appsPricesGetToManyRelated: String { 
        case app = "app"
        case pricetier = "priceTier"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsPricesGetToManyRelated: String { 
        case app = "app"
        case pricetier = "priceTier"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPricesGetToManyRelated(_id: String, fieldsAppPriceTiers: [String]? = nil, fieldsApps: [String]? = nil, fieldsAppPrices: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppPricesResponse?,_ error: Error?) -> Void)) {
        appsPricesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsAppPriceTiers: fieldsAppPriceTiers, fieldsApps: fieldsApps, fieldsAppPrices: fieldsAppPrices, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/prices
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "priceTier" : {
        "data" : {
          "id" : "id",
          "type" : "appPriceTiers"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appPrices"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "priceTier" : {
        "data" : {
          "id" : "id",
          "type" : "appPriceTiers"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appPrices"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppPriceTiers: (query) the fields to include for returned resources of type appPriceTiers (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppPricesResponse> 
     */
    open class func appsPricesGetToManyRelatedWithRequestBuilder(_id: String, fieldsAppPriceTiers: [String]? = nil, fieldsApps: [String]? = nil, fieldsAppPrices: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppPricesResponse> {
        var path = "/v1/apps/{id}/prices"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appPriceTiers]": fieldsAppPriceTiers, 
                        "fields[apps]": fieldsApps, 
                        "fields[appPrices]": fieldsAppPrices, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppPricesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_appsPromotedPurchasesGetToManyRelated: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_appsPromotedPurchasesGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_appsPromotedPurchasesGetToManyRelated: String { 
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsPromotedPurchaseImages
     */
    public enum FieldsPromotedPurchaseImages_appsPromotedPurchasesGetToManyRelated: String { 
        case assettoken = "assetToken"
        case assettype = "assetType"
        case filename = "fileName"
        case filesize = "fileSize"
        case imageasset = "imageAsset"
        case promotedpurchase = "promotedPurchase"
        case sourcefilechecksum = "sourceFileChecksum"
        case state = "state"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsPromotedPurchasesGetToManyRelated: String { 
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case subscription = "subscription"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPromotedPurchasesGetToManyRelated(_id: String, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPromotedPurchaseImages: [String]? = nil, limit: Int? = nil, limitPromotionImages: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: PromotedPurchasesResponse?,_ error: Error?) -> Void)) {
        appsPromotedPurchasesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsSubscriptions: fieldsSubscriptions, fieldsInAppPurchases: fieldsInAppPurchases, fieldsPromotedPurchaseImages: fieldsPromotedPurchaseImages, limit: limit, limitPromotionImages: limitPromotionImages, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/promotedPurchases
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "promotionImages" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchaseImages"
        }, {
          "id" : "id",
          "type" : "promotedPurchaseImages"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "inAppPurchaseV2" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchases"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "visibleForAllUsers" : true,
      "state" : "APPROVED",
      "enabled" : true
    },
    "id" : "id",
    "type" : "promotedPurchases"
  }, {
    "relationships" : {
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "promotionImages" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchaseImages"
        }, {
          "id" : "id",
          "type" : "promotedPurchaseImages"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "inAppPurchaseV2" : {
        "data" : {
          "id" : "id",
          "type" : "inAppPurchases"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "visibleForAllUsers" : true,
      "state" : "APPROVED",
      "enabled" : true
    },
    "id" : "id",
    "type" : "promotedPurchases"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsPromotedPurchaseImages: (query) the fields to include for returned resources of type promotedPurchaseImages (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitPromotionImages: (query) maximum number of related promotionImages returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<PromotedPurchasesResponse> 
     */
    open class func appsPromotedPurchasesGetToManyRelatedWithRequestBuilder(_id: String, fieldsPromotedPurchases: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsPromotedPurchaseImages: [String]? = nil, limit: Int? = nil, limitPromotionImages: Int? = nil, include: [String]? = nil) -> RequestBuilder<PromotedPurchasesResponse> {
        var path = "/v1/apps/{id}/promotedPurchases"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[promotedPurchaseImages]": fieldsPromotedPurchaseImages, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[promotionImages]": limitPromotionImages?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<PromotedPurchasesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPromotedPurchasesGetToManyRelationship(_id: String, limit: Int? = nil, completion: @escaping ((_ data: AppPromotedPurchasesLinkagesResponse?,_ error: Error?) -> Void)) {
        appsPromotedPurchasesGetToManyRelationshipWithRequestBuilder(_id: _id, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/relationships/promotedPurchases
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "id" : "id",
    "type" : "promotedPurchases"
  }, {
    "id" : "id",
    "type" : "promotedPurchases"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<AppPromotedPurchasesLinkagesResponse> 
     */
    open class func appsPromotedPurchasesGetToManyRelationshipWithRequestBuilder(_id: String, limit: Int? = nil) -> RequestBuilder<AppPromotedPurchasesLinkagesResponse> {
        var path = "/v1/apps/{id}/relationships/promotedPurchases"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<AppPromotedPurchasesLinkagesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsPromotedPurchasesReplaceToManyRelationship(body: AppPromotedPurchasesLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appsPromotedPurchasesReplaceToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /v1/apps/{id}/relationships/promotedPurchases
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func appsPromotedPurchasesReplaceToManyRelationshipWithRequestBuilder(body: AppPromotedPurchasesLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/apps/{id}/relationships/promotedPurchases"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_appsReviewSubmissionsGetToManyRelated: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_appsReviewSubmissionsGetToManyRelated: String { 
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case unresolvedIssues = "UNRESOLVED_ISSUES"
        case canceling = "CANCELING"
        case completing = "COMPLETING"
        case complete = "COMPLETE"
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_appsReviewSubmissionsGetToManyRelated: String { 
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appevent = "appEvent"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case removed = "removed"
        case resolved = "resolved"
        case reviewsubmission = "reviewSubmission"
        case state = "state"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_appsReviewSubmissionsGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_appsReviewSubmissionsGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_appsReviewSubmissionsGetToManyRelated: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsReviewSubmissionsGetToManyRelated: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case items = "items"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsReviewSubmissionsGetToManyRelated(_id: String, filterPlatform: [String]? = nil, filterState: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsApps: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, limit: Int? = nil, limitItems: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: ReviewSubmissionsResponse?,_ error: Error?) -> Void)) {
        appsReviewSubmissionsGetToManyRelatedWithRequestBuilder(_id: _id, filterPlatform: filterPlatform, filterState: filterState, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, fieldsReviewSubmissions: fieldsReviewSubmissions, limit: limit, limitItems: limitItems, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/reviewSubmissions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionForReview" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "items" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        }, {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionForReview" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "items" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        }, {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissions"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ReviewSubmissionsResponse> 
     */
    open class func appsReviewSubmissionsGetToManyRelatedWithRequestBuilder(_id: String, filterPlatform: [String]? = nil, filterState: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsApps: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, limit: Int? = nil, limitItems: Int? = nil, include: [String]? = nil) -> RequestBuilder<ReviewSubmissionsResponse> {
        var path = "/v1/apps/{id}/reviewSubmissions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[platform]": filterPlatform, 
                        "filter[state]": filterState, 
                        "fields[reviewSubmissionItems]": fieldsReviewSubmissionItems, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[apps]": fieldsApps, 
                        "fields[reviewSubmissions]": fieldsReviewSubmissions, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[items]": limitItems?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ReviewSubmissionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_appsSubscriptionGracePeriodGetToOneRelated: String { 
        case app = "app"
        case optin = "optIn"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsSubscriptionGracePeriodGetToOneRelated(_id: String, fieldsSubscriptionGracePeriods: [String]? = nil, completion: @escaping ((_ data: SubscriptionGracePeriodResponse?,_ error: Error?) -> Void)) {
        appsSubscriptionGracePeriodGetToOneRelatedWithRequestBuilder(_id: _id, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/subscriptionGracePeriod
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "optIn" : true
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionGracePeriods"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)

     - returns: RequestBuilder<SubscriptionGracePeriodResponse> 
     */
    open class func appsSubscriptionGracePeriodGetToOneRelatedWithRequestBuilder(_id: String, fieldsSubscriptionGracePeriods: [String]? = nil) -> RequestBuilder<SubscriptionGracePeriodResponse> {
        var path = "/v1/apps/{id}/subscriptionGracePeriod"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptionGracePeriods]": fieldsSubscriptionGracePeriods
        ])


        let requestBuilder: RequestBuilder<SubscriptionGracePeriodResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterSubscriptionsState
     */
    public enum FilterSubscriptionsState_appsSubscriptionGroupsGetToManyRelated: String { 
        case missingMetadata = "MISSING_METADATA"
        case readyToSubmit = "READY_TO_SUBMIT"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
        case pendingBinaryApproval = "PENDING_BINARY_APPROVAL"
        case approved = "APPROVED"
        case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
        case removedFromSale = "REMOVED_FROM_SALE"
        case rejected = "REJECTED"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_appsSubscriptionGroupsGetToManyRelated: String { 
        case referencename = "referenceName"
        case referencename_1 = "-referenceName"
    }

    /**
     * enum for parameter fieldsSubscriptions
     */
    public enum FieldsSubscriptions_appsSubscriptionGroupsGetToManyRelated: String { 
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case familysharable = "familySharable"
        case group = "group"
        case grouplevel = "groupLevel"
        case introductoryoffers = "introductoryOffers"
        case name = "name"
        case offercodes = "offerCodes"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case promotionaloffers = "promotionalOffers"
        case reviewnote = "reviewNote"
        case state = "state"
        case subscriptionlocalizations = "subscriptionLocalizations"
        case subscriptionperiod = "subscriptionPeriod"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_appsSubscriptionGroupsGetToManyRelated: String { 
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsSubscriptionGroupLocalizations
     */
    public enum FieldsSubscriptionGroupLocalizations_appsSubscriptionGroupsGetToManyRelated: String { 
        case customappname = "customAppName"
        case locale = "locale"
        case name = "name"
        case state = "state"
        case subscriptiongroup = "subscriptionGroup"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appsSubscriptionGroupsGetToManyRelated: String { 
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterReferenceName: (query) filter by attribute &#x27;referenceName&#x27; (optional)
     - parameter filterSubscriptionsState: (query) filter by attribute &#x27;subscriptions.state&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitSubscriptions: (query) maximum number of related subscriptions returned (when they are included) (optional)
     - parameter limitSubscriptionGroupLocalizations: (query) maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsSubscriptionGroupsGetToManyRelated(_id: String, filterReferenceName: [String]? = nil, filterSubscriptionsState: [String]? = nil, sort: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsSubscriptionGroupLocalizations: [String]? = nil, limit: Int? = nil, limitSubscriptions: Int? = nil, limitSubscriptionGroupLocalizations: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: SubscriptionGroupsResponse?,_ error: Error?) -> Void)) {
        appsSubscriptionGroupsGetToManyRelatedWithRequestBuilder(_id: _id, filterReferenceName: filterReferenceName, filterSubscriptionsState: filterSubscriptionsState, sort: sort, fieldsSubscriptions: fieldsSubscriptions, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsSubscriptionGroupLocalizations: fieldsSubscriptionGroupLocalizations, limit: limit, limitSubscriptions: limitSubscriptions, limitSubscriptionGroupLocalizations: limitSubscriptionGroupLocalizations, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/apps/{id}/subscriptionGroups
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  }, {
    "relationships" : {
      "subscriptions" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptions"
        }, {
          "id" : "id",
          "type" : "subscriptions"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "subscriptionGroupLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        }, {
          "id" : "id",
          "type" : "subscriptionGroupLocalizations"
        } ]
      }
    },
    "attributes" : {
      "referenceName" : "referenceName"
    },
    "id" : "id",
    "type" : "subscriptionGroups"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterReferenceName: (query) filter by attribute &#x27;referenceName&#x27; (optional)
     - parameter filterSubscriptionsState: (query) filter by attribute &#x27;subscriptions.state&#x27; (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsSubscriptions: (query) the fields to include for returned resources of type subscriptions (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsSubscriptionGroupLocalizations: (query) the fields to include for returned resources of type subscriptionGroupLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitSubscriptions: (query) maximum number of related subscriptions returned (when they are included) (optional)
     - parameter limitSubscriptionGroupLocalizations: (query) maximum number of related subscriptionGroupLocalizations returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<SubscriptionGroupsResponse> 
     */
    open class func appsSubscriptionGroupsGetToManyRelatedWithRequestBuilder(_id: String, filterReferenceName: [String]? = nil, filterSubscriptionsState: [String]? = nil, sort: [String]? = nil, fieldsSubscriptions: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsSubscriptionGroupLocalizations: [String]? = nil, limit: Int? = nil, limitSubscriptions: Int? = nil, limitSubscriptionGroupLocalizations: Int? = nil, include: [String]? = nil) -> RequestBuilder<SubscriptionGroupsResponse> {
        var path = "/v1/apps/{id}/subscriptionGroups"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[referenceName]": filterReferenceName, 
                        "filter[subscriptions.state]": filterSubscriptionsState, 
                        "sort": sort, 
                        "fields[subscriptions]": fieldsSubscriptions, 
                        "fields[subscriptionGroups]": fieldsSubscriptionGroups, 
                        "fields[subscriptionGroupLocalizations]": fieldsSubscriptionGroupLocalizations, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[subscriptions]": limitSubscriptions?.encodeToJSON(), 
                        "limit[subscriptionGroupLocalizations]": limitSubscriptionGroupLocalizations?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<SubscriptionGroupsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) App representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appsUpdateInstance(body: AppUpdateRequest, _id: String, completion: @escaping ((_ data: AppResponse?,_ error: Error?) -> Void)) {
        appsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/apps/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) App representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<AppResponse> 
     */
    open class func appsUpdateInstanceWithRequestBuilder(body: AppUpdateRequest, _id: String) -> RequestBuilder<AppResponse> {
        var path = "/v1/apps/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AppResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
