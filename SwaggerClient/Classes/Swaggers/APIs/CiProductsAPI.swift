//
// CiProductsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CiProductsAPI {
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciProductsAdditionalRepositoriesGetToManyRelated: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsScmProviders
     */
    public enum FieldsScmProviders_ciProductsAdditionalRepositoriesGetToManyRelated: String { 
        case repositories = "repositories"
        case scmprovidertype = "scmProviderType"
        case url = "url"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsAdditionalRepositoriesGetToManyRelated: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsAdditionalRepositoriesGetToManyRelated: String { 
        case defaultbranch = "defaultBranch"
        case scmprovider = "scmProvider"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsAdditionalRepositoriesGetToManyRelated(_id: String, filterId: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmProviders: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: ScmRepositoriesResponse?,_ error: Error?) -> Void)) {
        ciProductsAdditionalRepositoriesGetToManyRelatedWithRequestBuilder(_id: _id, filterId: filterId, fieldsScmGitReferences: fieldsScmGitReferences, fieldsScmProviders: fieldsScmProviders, fieldsScmRepositories: fieldsScmRepositories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciProducts/{id}/additionalRepositories
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  }, {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ScmRepositoriesResponse> 
     */
    open class func ciProductsAdditionalRepositoriesGetToManyRelatedWithRequestBuilder(_id: String, filterId: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmProviders: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<ScmRepositoriesResponse> {
        var path = "/v1/ciProducts/{id}/additionalRepositories"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[id]": filterId, 
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[scmProviders]": fieldsScmProviders, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ScmRepositoriesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaLicenseAgreements
     */
    public enum FieldsBetaLicenseAgreements_ciProductsAppGetToOneRelated: String { 
        case agreementtext = "agreementText"
        case app = "app"
    }

    /**
     * enum for parameter fieldsBetaAppReviewDetails
     */
    public enum FieldsBetaAppReviewDetails_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppClips
     */
    public enum FieldsAppClips_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case appclipadvancedexperiences = "appClipAdvancedExperiences"
        case appclipdefaultexperiences = "appClipDefaultExperiences"
        case bundleid = "bundleId"
    }

    /**
     * enum for parameter fieldsBetaAppLocalizations
     */
    public enum FieldsBetaAppLocalizations_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case _description = "description"
        case feedbackemail = "feedbackEmail"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case privacypolicyurl = "privacyPolicyUrl"
        case tvosprivacypolicy = "tvOsPrivacyPolicy"
    }

    /**
     * enum for parameter fieldsAppInfos
     */
    public enum FieldsAppInfos_ciProductsAppGetToOneRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appinfolocalizations = "appInfoLocalizations"
        case appstoreagerating = "appStoreAgeRating"
        case appstorestate = "appStoreState"
        case brazilagerating = "brazilAgeRating"
        case kidsageband = "kidsAgeBand"
        case primarycategory = "primaryCategory"
        case primarysubcategoryone = "primarySubcategoryOne"
        case primarysubcategorytwo = "primarySubcategoryTwo"
        case secondarycategory = "secondaryCategory"
        case secondarysubcategoryone = "secondarySubcategoryOne"
        case secondarysubcategorytwo = "secondarySubcategoryTwo"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_ciProductsAppGetToOneRelated: String { 
        case apps = "apps"
        case inapppurchasetype = "inAppPurchaseType"
        case productid = "productId"
        case referencename = "referenceName"
        case state = "state"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsAppGetToOneRelated: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsInAppPurchases
     */
    public enum FieldsInAppPurchases_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case appstorereviewscreenshot = "appStoreReviewScreenshot"
        case availableinallterritories = "availableInAllTerritories"
        case content = "content"
        case contenthosting = "contentHosting"
        case familysharable = "familySharable"
        case iappriceschedule = "iapPriceSchedule"
        case inapppurchaselocalizations = "inAppPurchaseLocalizations"
        case inapppurchasetype = "inAppPurchaseType"
        case name = "name"
        case pricepoints = "pricePoints"
        case productid = "productId"
        case promotedpurchase = "promotedPurchase"
        case reviewnote = "reviewNote"
        case state = "state"
    }

    /**
     * enum for parameter fieldsSubscriptionGroups
     */
    public enum FieldsSubscriptionGroups_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case referencename = "referenceName"
        case subscriptiongrouplocalizations = "subscriptionGroupLocalizations"
        case subscriptions = "subscriptions"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**
     * enum for parameter fieldsAppPreOrders
     */
    public enum FieldsAppPreOrders_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case appreleasedate = "appReleaseDate"
        case preorderavailabledate = "preOrderAvailableDate"
    }

    /**
     * enum for parameter fieldsAppPrices
     */
    public enum FieldsAppPrices_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case pricetier = "priceTier"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsSubscriptionGracePeriods
     */
    public enum FieldsSubscriptionGracePeriods_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case optin = "optIn"
    }

    /**
     * enum for parameter fieldsPromotedPurchases
     */
    public enum FieldsPromotedPurchases_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case enabled = "enabled"
        case inapppurchasev2 = "inAppPurchaseV2"
        case promotionimages = "promotionImages"
        case state = "state"
        case subscription = "subscription"
        case visibleforallusers = "visibleForAllUsers"
    }

    /**
     * enum for parameter fieldsEndUserLicenseAgreements
     */
    public enum FieldsEndUserLicenseAgreements_ciProductsAppGetToOneRelated: String { 
        case agreementtext = "agreementText"
        case app = "app"
        case territories = "territories"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_ciProductsAppGetToOneRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppCustomProductPages
     */
    public enum FieldsAppCustomProductPages_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case appcustomproductpageversions = "appCustomProductPageVersions"
        case appstoreversiontemplate = "appStoreVersionTemplate"
        case customproductpagetemplate = "customProductPageTemplate"
        case name = "name"
        case url = "url"
        case visible = "visible"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciProductsAppGetToOneRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter fieldsTerritories
     */
    public enum FieldsTerritories_ciProductsAppGetToOneRelated: String { 
        case currency = "currency"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciProductsAppGetToOneRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsAppGetToOneRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case builds = "builds"
        case ciproduct = "ciProduct"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case prices = "prices"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsAppGetToOneRelated(_id: String, fieldsBetaLicenseAgreements: [String]? = nil, fieldsBetaAppReviewDetails: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsBetaAppLocalizations: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, fieldsBetaGroups: [String]? = nil, fieldsAppPreOrders: [String]? = nil, fieldsAppPrices: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsSubscriptionGracePeriods: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsEndUserLicenseAgreements: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsApps: [String]? = nil, fieldsAppEvents: [String]? = nil, fieldsTerritories: [String]? = nil, fieldsBuilds: [String]? = nil, limitBetaGroups: Int? = nil, limitAppStoreVersions: Int? = nil, limitPreReleaseVersions: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBuilds: Int? = nil, limitAppInfos: Int? = nil, limitAppClips: Int? = nil, limitPrices: Int? = nil, limitAvailableTerritories: Int? = nil, limitInAppPurchases: Int? = nil, limitSubscriptionGroups: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitAppCustomProductPages: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPromotedPurchases: Int? = nil, limitAppEvents: Int? = nil, limitReviewSubmissions: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppResponse?,_ error: Error?) -> Void)) {
        ciProductsAppGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBetaLicenseAgreements: fieldsBetaLicenseAgreements, fieldsBetaAppReviewDetails: fieldsBetaAppReviewDetails, fieldsAppClips: fieldsAppClips, fieldsBetaAppLocalizations: fieldsBetaAppLocalizations, fieldsAppInfos: fieldsAppInfos, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsInAppPurchases: fieldsInAppPurchases, fieldsCiProducts: fieldsCiProducts, fieldsInAppPurchases: fieldsInAppPurchases, fieldsSubscriptionGroups: fieldsSubscriptionGroups, fieldsReviewSubmissions: fieldsReviewSubmissions, fieldsBetaGroups: fieldsBetaGroups, fieldsAppPreOrders: fieldsAppPreOrders, fieldsAppPrices: fieldsAppPrices, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsSubscriptionGracePeriods: fieldsSubscriptionGracePeriods, fieldsPromotedPurchases: fieldsPromotedPurchases, fieldsEndUserLicenseAgreements: fieldsEndUserLicenseAgreements, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppCustomProductPages: fieldsAppCustomProductPages, fieldsApps: fieldsApps, fieldsAppEvents: fieldsAppEvents, fieldsTerritories: fieldsTerritories, fieldsBuilds: fieldsBuilds, limitBetaGroups: limitBetaGroups, limitAppStoreVersions: limitAppStoreVersions, limitPreReleaseVersions: limitPreReleaseVersions, limitBetaAppLocalizations: limitBetaAppLocalizations, limitBuilds: limitBuilds, limitAppInfos: limitAppInfos, limitAppClips: limitAppClips, limitPrices: limitPrices, limitAvailableTerritories: limitAvailableTerritories, limitInAppPurchases: limitInAppPurchases, limitSubscriptionGroups: limitSubscriptionGroups, limitGameCenterEnabledVersions: limitGameCenterEnabledVersions, limitAppCustomProductPages: limitAppCustomProductPages, limitInAppPurchasesV2: limitInAppPurchasesV2, limitPromotedPurchases: limitPromotedPurchases, limitAppEvents: limitAppEvents, limitReviewSubmissions: limitReviewSubmissions, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciProducts/{id}/app
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaLicenseAgreements: (query) the fields to include for returned resources of type betaLicenseAgreements (optional)
     - parameter fieldsBetaAppReviewDetails: (query) the fields to include for returned resources of type betaAppReviewDetails (optional)
     - parameter fieldsAppClips: (query) the fields to include for returned resources of type appClips (optional)
     - parameter fieldsBetaAppLocalizations: (query) the fields to include for returned resources of type betaAppLocalizations (optional)
     - parameter fieldsAppInfos: (query) the fields to include for returned resources of type appInfos (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsInAppPurchases: (query) the fields to include for returned resources of type inAppPurchases (optional)
     - parameter fieldsSubscriptionGroups: (query) the fields to include for returned resources of type subscriptionGroups (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter fieldsAppPreOrders: (query) the fields to include for returned resources of type appPreOrders (optional)
     - parameter fieldsAppPrices: (query) the fields to include for returned resources of type appPrices (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsSubscriptionGracePeriods: (query) the fields to include for returned resources of type subscriptionGracePeriods (optional)
     - parameter fieldsPromotedPurchases: (query) the fields to include for returned resources of type promotedPurchases (optional)
     - parameter fieldsEndUserLicenseAgreements: (query) the fields to include for returned resources of type endUserLicenseAgreements (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPages: (query) the fields to include for returned resources of type appCustomProductPages (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter fieldsTerritories: (query) the fields to include for returned resources of type territories (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitAppStoreVersions: (query) maximum number of related appStoreVersions returned (when they are included) (optional)
     - parameter limitPreReleaseVersions: (query) maximum number of related preReleaseVersions returned (when they are included) (optional)
     - parameter limitBetaAppLocalizations: (query) maximum number of related betaAppLocalizations returned (when they are included) (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter limitAppInfos: (query) maximum number of related appInfos returned (when they are included) (optional)
     - parameter limitAppClips: (query) maximum number of related appClips returned (when they are included) (optional)
     - parameter limitPrices: (query) maximum number of related prices returned (when they are included) (optional)
     - parameter limitAvailableTerritories: (query) maximum number of related availableTerritories returned (when they are included) (optional)
     - parameter limitInAppPurchases: (query) maximum number of related inAppPurchases returned (when they are included) (optional)
     - parameter limitSubscriptionGroups: (query) maximum number of related subscriptionGroups returned (when they are included) (optional)
     - parameter limitGameCenterEnabledVersions: (query) maximum number of related gameCenterEnabledVersions returned (when they are included) (optional)
     - parameter limitAppCustomProductPages: (query) maximum number of related appCustomProductPages returned (when they are included) (optional)
     - parameter limitInAppPurchasesV2: (query) maximum number of related inAppPurchasesV2 returned (when they are included) (optional)
     - parameter limitPromotedPurchases: (query) maximum number of related promotedPurchases returned (when they are included) (optional)
     - parameter limitAppEvents: (query) maximum number of related appEvents returned (when they are included) (optional)
     - parameter limitReviewSubmissions: (query) maximum number of related reviewSubmissions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppResponse> 
     */
    open class func ciProductsAppGetToOneRelatedWithRequestBuilder(_id: String, fieldsBetaLicenseAgreements: [String]? = nil, fieldsBetaAppReviewDetails: [String]? = nil, fieldsAppClips: [String]? = nil, fieldsBetaAppLocalizations: [String]? = nil, fieldsAppInfos: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsInAppPurchases: [String]? = nil, fieldsSubscriptionGroups: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, fieldsBetaGroups: [String]? = nil, fieldsAppPreOrders: [String]? = nil, fieldsAppPrices: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsSubscriptionGracePeriods: [String]? = nil, fieldsPromotedPurchases: [String]? = nil, fieldsEndUserLicenseAgreements: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPages: [String]? = nil, fieldsApps: [String]? = nil, fieldsAppEvents: [String]? = nil, fieldsTerritories: [String]? = nil, fieldsBuilds: [String]? = nil, limitBetaGroups: Int? = nil, limitAppStoreVersions: Int? = nil, limitPreReleaseVersions: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBuilds: Int? = nil, limitAppInfos: Int? = nil, limitAppClips: Int? = nil, limitPrices: Int? = nil, limitAvailableTerritories: Int? = nil, limitInAppPurchases: Int? = nil, limitSubscriptionGroups: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitAppCustomProductPages: Int? = nil, limitInAppPurchasesV2: Int? = nil, limitPromotedPurchases: Int? = nil, limitAppEvents: Int? = nil, limitReviewSubmissions: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppResponse> {
        var path = "/v1/ciProducts/{id}/app"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaLicenseAgreements]": fieldsBetaLicenseAgreements, 
                        "fields[betaAppReviewDetails]": fieldsBetaAppReviewDetails, 
                        "fields[appClips]": fieldsAppClips, 
                        "fields[betaAppLocalizations]": fieldsBetaAppLocalizations, 
                        "fields[appInfos]": fieldsAppInfos, 
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[inAppPurchases]": fieldsInAppPurchases, 
                        "fields[subscriptionGroups]": fieldsSubscriptionGroups, 
                        "fields[reviewSubmissions]": fieldsReviewSubmissions, 
                        "fields[betaGroups]": fieldsBetaGroups, 
                        "fields[appPreOrders]": fieldsAppPreOrders, 
                        "fields[appPrices]": fieldsAppPrices, 
                        "fields[gameCenterEnabledVersions]": fieldsGameCenterEnabledVersions, 
                        "fields[subscriptionGracePeriods]": fieldsSubscriptionGracePeriods, 
                        "fields[promotedPurchases]": fieldsPromotedPurchases, 
                        "fields[endUserLicenseAgreements]": fieldsEndUserLicenseAgreements, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[appCustomProductPages]": fieldsAppCustomProductPages, 
                        "fields[apps]": fieldsApps, 
                        "fields[appEvents]": fieldsAppEvents, 
                        "fields[territories]": fieldsTerritories, 
                        "fields[builds]": fieldsBuilds, 
                        "limit[betaGroups]": limitBetaGroups?.encodeToJSON(), 
                        "limit[appStoreVersions]": limitAppStoreVersions?.encodeToJSON(), 
                        "limit[preReleaseVersions]": limitPreReleaseVersions?.encodeToJSON(), 
                        "limit[betaAppLocalizations]": limitBetaAppLocalizations?.encodeToJSON(), 
                        "limit[builds]": limitBuilds?.encodeToJSON(), 
                        "limit[appInfos]": limitAppInfos?.encodeToJSON(), 
                        "limit[appClips]": limitAppClips?.encodeToJSON(), 
                        "limit[prices]": limitPrices?.encodeToJSON(), 
                        "limit[availableTerritories]": limitAvailableTerritories?.encodeToJSON(), 
                        "limit[inAppPurchases]": limitInAppPurchases?.encodeToJSON(), 
                        "limit[subscriptionGroups]": limitSubscriptionGroups?.encodeToJSON(), 
                        "limit[gameCenterEnabledVersions]": limitGameCenterEnabledVersions?.encodeToJSON(), 
                        "limit[appCustomProductPages]": limitAppCustomProductPages?.encodeToJSON(), 
                        "limit[inAppPurchasesV2]": limitInAppPurchasesV2?.encodeToJSON(), 
                        "limit[promotedPurchases]": limitPromotedPurchases?.encodeToJSON(), 
                        "limit[appEvents]": limitAppEvents?.encodeToJSON(), 
                        "limit[reviewSubmissions]": limitReviewSubmissions?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciProductsBuildRunsGetToManyRelated: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciProductsBuildRunsGetToManyRelated: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciProductsBuildRunsGetToManyRelated: String { 
        case actions = "actions"
        case branchstartcondition = "branchStartCondition"
        case buildruns = "buildRuns"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case _description = "description"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case lastmodifieddate = "lastModifiedDate"
        case macosversion = "macOsVersion"
        case name = "name"
        case product = "product"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case repository = "repository"
        case scheduledstartcondition = "scheduledStartCondition"
        case tagstartcondition = "tagStartCondition"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter fieldsScmPullRequests
     */
    public enum FieldsScmPullRequests_ciProductsBuildRunsGetToManyRelated: String { 
        case destinationbranchname = "destinationBranchName"
        case destinationrepositoryname = "destinationRepositoryName"
        case destinationrepositoryowner = "destinationRepositoryOwner"
        case isclosed = "isClosed"
        case iscrossrepository = "isCrossRepository"
        case number = "number"
        case repository = "repository"
        case sourcebranchname = "sourceBranchName"
        case sourcerepositoryname = "sourceRepositoryName"
        case sourcerepositoryowner = "sourceRepositoryOwner"
        case title = "title"
        case weburl = "webUrl"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsBuildRunsGetToManyRelated: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciProductsBuildRunsGetToManyRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsBuildRunsGetToManyRelated: String { 
        case builds = "builds"
        case destinationbranch = "destinationBranch"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case workflow = "workflow"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterBuilds: (query) filter by id(s) of related &#x27;builds&#x27; (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsBuildRunsGetToManyRelated(_id: String, filterBuilds: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsScmPullRequests: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsBuilds: [String]? = nil, limit: Int? = nil, limitBuilds: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CiBuildRunsResponse?,_ error: Error?) -> Void)) {
        ciProductsBuildRunsGetToManyRelatedWithRequestBuilder(_id: _id, filterBuilds: filterBuilds, fieldsScmGitReferences: fieldsScmGitReferences, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiWorkflows: fieldsCiWorkflows, fieldsScmPullRequests: fieldsScmPullRequests, fieldsCiProducts: fieldsCiProducts, fieldsBuilds: fieldsBuilds, limit: limit, limitBuilds: limitBuilds, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciProducts/{id}/buildRuns
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  }, {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterBuilds: (query) filter by id(s) of related &#x27;builds&#x27; (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CiBuildRunsResponse> 
     */
    open class func ciProductsBuildRunsGetToManyRelatedWithRequestBuilder(_id: String, filterBuilds: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsScmPullRequests: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsBuilds: [String]? = nil, limit: Int? = nil, limitBuilds: Int? = nil, include: [String]? = nil) -> RequestBuilder<CiBuildRunsResponse> {
        var path = "/v1/ciProducts/{id}/buildRuns"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[builds]": filterBuilds, 
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[ciWorkflows]": fieldsCiWorkflows, 
                        "fields[scmPullRequests]": fieldsScmPullRequests, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[builds]": fieldsBuilds, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[builds]": limitBuilds?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CiBuildRunsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        ciProductsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/ciProducts/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func ciProductsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/ciProducts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterProductType
     */
    public enum FilterProductType_ciProductsGetCollection: String { 
        case app = "APP"
        case framework = "FRAMEWORK"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsGetCollection: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsGetCollection: String { 
        case app = "app"
        case bundleid = "bundleId"
        case primaryrepositories = "primaryRepositories"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciProductsGetCollection: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciProductsGetCollection: String { 
        case actions = "actions"
        case branchstartcondition = "branchStartCondition"
        case buildruns = "buildRuns"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case _description = "description"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case lastmodifieddate = "lastModifiedDate"
        case macosversion = "macOsVersion"
        case name = "name"
        case product = "product"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case repository = "repository"
        case scheduledstartcondition = "scheduledStartCondition"
        case tagstartcondition = "tagStartCondition"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciProductsGetCollection: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsGetCollection: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**

     - parameter filterProductType: (query) filter by attribute &#x27;productType&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsGetCollection(filterProductType: [String]? = nil, filterApp: [String]? = nil, fieldsCiProducts: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsApps: [String]? = nil, fieldsScmRepositories: [String]? = nil, limitPrimaryRepositories: Int? = nil, completion: @escaping ((_ data: CiProductsResponse?,_ error: Error?) -> Void)) {
        ciProductsGetCollectionWithRequestBuilder(filterProductType: filterProductType, filterApp: filterApp, fieldsCiProducts: fieldsCiProducts, limit: limit, include: include, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiWorkflows: fieldsCiWorkflows, fieldsApps: fieldsApps, fieldsScmRepositories: fieldsScmRepositories, limitPrimaryRepositories: limitPrimaryRepositories).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciProducts
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "primaryRepositories" : {
        "data" : [ {
          "id" : "id",
          "type" : "scmRepositories"
        }, {
          "id" : "id",
          "type" : "scmRepositories"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "productType" : "APP"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciProducts"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "primaryRepositories" : {
        "data" : [ {
          "id" : "id",
          "type" : "scmRepositories"
        }, {
          "id" : "id",
          "type" : "scmRepositories"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "productType" : "APP"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciProducts"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter filterProductType: (query) filter by attribute &#x27;productType&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)

     - returns: RequestBuilder<CiProductsResponse> 
     */
    open class func ciProductsGetCollectionWithRequestBuilder(filterProductType: [String]? = nil, filterApp: [String]? = nil, fieldsCiProducts: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsApps: [String]? = nil, fieldsScmRepositories: [String]? = nil, limitPrimaryRepositories: Int? = nil) -> RequestBuilder<CiProductsResponse> {
        let path = "/v1/ciProducts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[productType]": filterProductType, 
                        "filter[app]": filterApp, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[ciWorkflows]": fieldsCiWorkflows, 
                        "fields[apps]": fieldsApps, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit[primaryRepositories]": limitPrimaryRepositories?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CiProductsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsGetInstance: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsGetInstance: String { 
        case app = "app"
        case bundleid = "bundleId"
        case primaryrepositories = "primaryRepositories"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciProductsGetInstance: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciProductsGetInstance: String { 
        case actions = "actions"
        case branchstartcondition = "branchStartCondition"
        case buildruns = "buildRuns"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case _description = "description"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case lastmodifieddate = "lastModifiedDate"
        case macosversion = "macOsVersion"
        case name = "name"
        case product = "product"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case repository = "repository"
        case scheduledstartcondition = "scheduledStartCondition"
        case tagstartcondition = "tagStartCondition"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciProductsGetInstance: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsGetInstance: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsGetInstance(_id: String, fieldsCiProducts: [String]? = nil, include: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsApps: [String]? = nil, fieldsScmRepositories: [String]? = nil, limitPrimaryRepositories: Int? = nil, completion: @escaping ((_ data: CiProductResponse?,_ error: Error?) -> Void)) {
        ciProductsGetInstanceWithRequestBuilder(_id: _id, fieldsCiProducts: fieldsCiProducts, include: include, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiWorkflows: fieldsCiWorkflows, fieldsApps: fieldsApps, fieldsScmRepositories: fieldsScmRepositories, limitPrimaryRepositories: limitPrimaryRepositories).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciProducts/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "primaryRepositories" : {
        "data" : [ {
          "id" : "id",
          "type" : "scmRepositories"
        }, {
          "id" : "id",
          "type" : "scmRepositories"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "productType" : "APP"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciProducts"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limitPrimaryRepositories: (query) maximum number of related primaryRepositories returned (when they are included) (optional)

     - returns: RequestBuilder<CiProductResponse> 
     */
    open class func ciProductsGetInstanceWithRequestBuilder(_id: String, fieldsCiProducts: [String]? = nil, include: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsApps: [String]? = nil, fieldsScmRepositories: [String]? = nil, limitPrimaryRepositories: Int? = nil) -> RequestBuilder<CiProductResponse> {
        var path = "/v1/ciProducts/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciProducts]": fieldsCiProducts, 
                        "include": include, 
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[ciWorkflows]": fieldsCiWorkflows, 
                        "fields[apps]": fieldsApps, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit[primaryRepositories]": limitPrimaryRepositories?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CiProductResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciProductsPrimaryRepositoriesGetToManyRelated: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsScmProviders
     */
    public enum FieldsScmProviders_ciProductsPrimaryRepositoriesGetToManyRelated: String { 
        case repositories = "repositories"
        case scmprovidertype = "scmProviderType"
        case url = "url"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsPrimaryRepositoriesGetToManyRelated: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsPrimaryRepositoriesGetToManyRelated: String { 
        case defaultbranch = "defaultBranch"
        case scmprovider = "scmProvider"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsPrimaryRepositoriesGetToManyRelated(_id: String, filterId: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmProviders: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: ScmRepositoriesResponse?,_ error: Error?) -> Void)) {
        ciProductsPrimaryRepositoriesGetToManyRelatedWithRequestBuilder(_id: _id, filterId: filterId, fieldsScmGitReferences: fieldsScmGitReferences, fieldsScmProviders: fieldsScmProviders, fieldsScmRepositories: fieldsScmRepositories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciProducts/{id}/primaryRepositories
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  }, {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ScmRepositoriesResponse> 
     */
    open class func ciProductsPrimaryRepositoriesGetToManyRelatedWithRequestBuilder(_id: String, filterId: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsScmProviders: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<ScmRepositoriesResponse> {
        var path = "/v1/ciProducts/{id}/primaryRepositories"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[id]": filterId, 
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[scmProviders]": fieldsScmProviders, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ScmRepositoriesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCiXcodeVersions
     */
    public enum FieldsCiXcodeVersions_ciProductsWorkflowsGetToManyRelated: String { 
        case macosversions = "macOsVersions"
        case name = "name"
        case testdestinations = "testDestinations"
        case version = "version"
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciProductsWorkflowsGetToManyRelated: String { 
        case actions = "actions"
        case branchstartcondition = "branchStartCondition"
        case buildruns = "buildRuns"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case _description = "description"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case lastmodifieddate = "lastModifiedDate"
        case macosversion = "macOsVersion"
        case name = "name"
        case product = "product"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case repository = "repository"
        case scheduledstartcondition = "scheduledStartCondition"
        case tagstartcondition = "tagStartCondition"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter fieldsCiMacOsVersions
     */
    public enum FieldsCiMacOsVersions_ciProductsWorkflowsGetToManyRelated: String { 
        case name = "name"
        case version = "version"
        case xcodeversions = "xcodeVersions"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciProductsWorkflowsGetToManyRelated: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciProductsWorkflowsGetToManyRelated: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciProductsWorkflowsGetToManyRelated: String { 
        case macosversion = "macOsVersion"
        case product = "product"
        case repository = "repository"
        case xcodeversion = "xcodeVersion"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciProductsWorkflowsGetToManyRelated(_id: String, fieldsCiXcodeVersions: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsCiMacOsVersions: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CiWorkflowsResponse?,_ error: Error?) -> Void)) {
        ciProductsWorkflowsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsCiXcodeVersions: fieldsCiXcodeVersions, fieldsCiWorkflows: fieldsCiWorkflows, fieldsCiMacOsVersions: fieldsCiMacOsVersions, fieldsCiProducts: fieldsCiProducts, fieldsScmRepositories: fieldsScmRepositories, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciProducts/{id}/workflows
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "macOsVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciMacOsVersions"
        }
      },
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "xcodeVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciXcodeVersions"
        }
      }
    },
    "attributes" : {
      "containerFilePath" : "containerFilePath",
      "pullRequestStartCondition" : {
        "autoCancel" : true
      },
      "isLockedForEditing" : true,
      "tagStartCondition" : {
        "source" : {
          "patterns" : [ null, null ],
          "isAllMatch" : true
        },
        "autoCancel" : true
      },
      "scheduledStartCondition" : {
        "schedule" : {
          "hour" : 0,
          "timezone" : "timezone",
          "days" : [ "SUNDAY", "SUNDAY" ],
          "frequency" : "WEEKLY",
          "minute" : 6
        }
      },
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "isEnabled" : true,
      "name" : "name",
      "description" : "description",
      "clean" : true,
      "actions" : [ {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      }, {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      } ],
      "branchStartCondition" : {
        "source" : {
          "patterns" : [ {
            "pattern" : "pattern",
            "isPrefix" : true
          }, {
            "pattern" : "pattern",
            "isPrefix" : true
          } ],
          "isAllMatch" : true
        },
        "autoCancel" : true,
        "filesAndFoldersRule" : {
          "mode" : "START_IF_ANY_FILE_MATCHES",
          "matchers" : [ {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          }, {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          } ]
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciWorkflows"
  }, {
    "relationships" : {
      "macOsVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciMacOsVersions"
        }
      },
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "xcodeVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciXcodeVersions"
        }
      }
    },
    "attributes" : {
      "containerFilePath" : "containerFilePath",
      "pullRequestStartCondition" : {
        "autoCancel" : true
      },
      "isLockedForEditing" : true,
      "tagStartCondition" : {
        "source" : {
          "patterns" : [ null, null ],
          "isAllMatch" : true
        },
        "autoCancel" : true
      },
      "scheduledStartCondition" : {
        "schedule" : {
          "hour" : 0,
          "timezone" : "timezone",
          "days" : [ "SUNDAY", "SUNDAY" ],
          "frequency" : "WEEKLY",
          "minute" : 6
        }
      },
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "isEnabled" : true,
      "name" : "name",
      "description" : "description",
      "clean" : true,
      "actions" : [ {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      }, {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      } ],
      "branchStartCondition" : {
        "source" : {
          "patterns" : [ {
            "pattern" : "pattern",
            "isPrefix" : true
          }, {
            "pattern" : "pattern",
            "isPrefix" : true
          } ],
          "isAllMatch" : true
        },
        "autoCancel" : true,
        "filesAndFoldersRule" : {
          "mode" : "START_IF_ANY_FILE_MATCHES",
          "matchers" : [ {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          }, {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          } ]
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciWorkflows"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiXcodeVersions: (query) the fields to include for returned resources of type ciXcodeVersions (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsCiMacOsVersions: (query) the fields to include for returned resources of type ciMacOsVersions (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CiWorkflowsResponse> 
     */
    open class func ciProductsWorkflowsGetToManyRelatedWithRequestBuilder(_id: String, fieldsCiXcodeVersions: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsCiMacOsVersions: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsScmRepositories: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<CiWorkflowsResponse> {
        var path = "/v1/ciProducts/{id}/workflows"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciXcodeVersions]": fieldsCiXcodeVersions, 
                        "fields[ciWorkflows]": fieldsCiWorkflows, 
                        "fields[ciMacOsVersions]": fieldsCiMacOsVersions, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CiWorkflowsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
