//
// GameCenterEnabledVersionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class GameCenterEnabledVersionsAPI {
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationshipWithRequestBuilder(body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationshipWithRequestBuilder(body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated: String { 
        case versionstring = "versionString"
        case versionstring_1 = "-versionString"
    }

    /**
     * enum for parameter fieldsGameCenterEnabledVersions
     */
    public enum FieldsGameCenterEnabledVersions_gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated: String { 
        case app = "app"
        case compatibleversions = "compatibleVersions"
        case iconasset = "iconAsset"
        case platform = "platform"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter include
     */
    public enum Include_gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated: String { 
        case app = "app"
        case compatibleversions = "compatibleVersions"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterVersionString: (query) filter by attribute &#x27;versionString&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitCompatibleVersions: (query) maximum number of related compatibleVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(_id: String, filterPlatform: [String]? = nil, filterVersionString: [String]? = nil, filterApp: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitCompatibleVersions: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: GameCenterEnabledVersionsResponse?,_ error: Error?) -> Void)) {
        gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedWithRequestBuilder(_id: _id, filterPlatform: filterPlatform, filterVersionString: filterVersionString, filterApp: filterApp, filterId: filterId, sort: sort, fieldsGameCenterEnabledVersions: fieldsGameCenterEnabledVersions, fieldsApps: fieldsApps, limit: limit, limitCompatibleVersions: limitCompatibleVersions, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/gameCenterEnabledVersions/{id}/compatibleVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "compatibleVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      }
    },
    "attributes" : {
      "versionString" : "versionString",
      "platform" : "IOS",
      "iconAsset" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "gameCenterEnabledVersions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "compatibleVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      }
    },
    "attributes" : {
      "versionString" : "versionString",
      "platform" : "IOS",
      "iconAsset" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "gameCenterEnabledVersions"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterVersionString: (query) filter by attribute &#x27;versionString&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsGameCenterEnabledVersions: (query) the fields to include for returned resources of type gameCenterEnabledVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitCompatibleVersions: (query) maximum number of related compatibleVersions returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<GameCenterEnabledVersionsResponse> 
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsGetToManyRelatedWithRequestBuilder(_id: String, filterPlatform: [String]? = nil, filterVersionString: [String]? = nil, filterApp: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsGameCenterEnabledVersions: [String]? = nil, fieldsApps: [String]? = nil, limit: Int? = nil, limitCompatibleVersions: Int? = nil, include: [String]? = nil) -> RequestBuilder<GameCenterEnabledVersionsResponse> {
        var path = "/v1/gameCenterEnabledVersions/{id}/compatibleVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[platform]": filterPlatform, 
                        "filter[versionString]": filterVersionString, 
                        "filter[app]": filterApp, 
                        "filter[id]": filterId, 
                        "sort": sort, 
                        "fields[gameCenterEnabledVersions]": fieldsGameCenterEnabledVersions, 
                        "fields[apps]": fieldsApps, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[compatibleVersions]": limitCompatibleVersions?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<GameCenterEnabledVersionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(_id: String, limit: Int? = nil, completion: @escaping ((_ data: GameCenterEnabledVersionCompatibleVersionsLinkagesResponse?,_ error: Error?) -> Void)) {
        gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipWithRequestBuilder(_id: _id, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "id" : "id",
    "type" : "gameCenterEnabledVersions"
  }, {
    "id" : "id",
    "type" : "gameCenterEnabledVersions"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse> 
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsGetToManyRelationshipWithRequestBuilder(_id: String, limit: Int? = nil) -> RequestBuilder<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse> {
        var path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<GameCenterEnabledVersionCompatibleVersionsLinkagesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func gameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationshipWithRequestBuilder(body: GameCenterEnabledVersionCompatibleVersionsLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
