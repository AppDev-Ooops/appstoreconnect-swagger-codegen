//
// CiBuildRunsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CiBuildRunsAPI {
    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciBuildRunsActionsGetToManyRelated: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiBuildActions
     */
    public enum FieldsCiBuildActions_ciBuildRunsActionsGetToManyRelated: String { 
        case actiontype = "actionType"
        case artifacts = "artifacts"
        case buildrun = "buildRun"
        case completionstatus = "completionStatus"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case isrequiredtopass = "isRequiredToPass"
        case issuecounts = "issueCounts"
        case issues = "issues"
        case name = "name"
        case starteddate = "startedDate"
        case testresults = "testResults"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildRunsActionsGetToManyRelated: String { 
        case buildrun = "buildRun"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildRunsActionsGetToManyRelated(_id: String, fieldsCiBuildRuns: [String]? = nil, fieldsCiBuildActions: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CiBuildActionsResponse?,_ error: Error?) -> Void)) {
        ciBuildRunsActionsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiBuildActions: fieldsCiBuildActions, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildRuns/{id}/actions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "buildRun" : {
        "data" : {
          "id" : "id",
          "type" : "ciBuildRuns"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "actionType" : "BUILD",
      "issueCounts" : {
        "analyzerWarnings" : 0,
        "testFailures" : 1,
        "warnings" : 5,
        "errors" : 6
      },
      "executionProgress" : "PENDING",
      "name" : "name",
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "completionStatus" : "SUCCEEDED",
      "isRequiredToPass" : true,
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciBuildActions"
  }, {
    "relationships" : {
      "buildRun" : {
        "data" : {
          "id" : "id",
          "type" : "ciBuildRuns"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "actionType" : "BUILD",
      "issueCounts" : {
        "analyzerWarnings" : 0,
        "testFailures" : 1,
        "warnings" : 5,
        "errors" : 6
      },
      "executionProgress" : "PENDING",
      "name" : "name",
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "completionStatus" : "SUCCEEDED",
      "isRequiredToPass" : true,
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciBuildActions"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  }, {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CiBuildActionsResponse> 
     */
    open class func ciBuildRunsActionsGetToManyRelatedWithRequestBuilder(_id: String, fieldsCiBuildRuns: [String]? = nil, fieldsCiBuildActions: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<CiBuildActionsResponse> {
        var path = "/v1/ciBuildRuns/{id}/actions"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[ciBuildActions]": fieldsCiBuildActions, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CiBuildActionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterBetaAppReviewSubmissionBetaReviewState
     */
    public enum FilterBetaAppReviewSubmissionBetaReviewState_ciBuildRunsBuildsGetToManyRelated: String { 
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case rejected = "REJECTED"
        case approved = "APPROVED"
    }

    /**
     * enum for parameter filterBuildAudienceType
     */
    public enum FilterBuildAudienceType_ciBuildRunsBuildsGetToManyRelated: String { 
        case internalOnly = "INTERNAL_ONLY"
        case appStoreEligible = "APP_STORE_ELIGIBLE"
    }

    /**
     * enum for parameter filterPreReleaseVersionPlatform
     */
    public enum FilterPreReleaseVersionPlatform_ciBuildRunsBuildsGetToManyRelated: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter filterProcessingState
     */
    public enum FilterProcessingState_ciBuildRunsBuildsGetToManyRelated: String { 
        case processing = "PROCESSING"
        case failed = "FAILED"
        case invalid = "INVALID"
        case valid = "VALID"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_ciBuildRunsBuildsGetToManyRelated: String { 
        case prereleaseversion = "preReleaseVersion"
        case prereleaseversion_1 = "-preReleaseVersion"
        case uploadeddate = "uploadedDate"
        case uploadeddate_3 = "-uploadedDate"
        case version = "version"
        case version_5 = "-version"
    }

    /**
     * enum for parameter fieldsBuildBundles
     */
    public enum FieldsBuildBundles_ciBuildRunsBuildsGetToManyRelated: String { 
        case appclipdomaincachestatus = "appClipDomainCacheStatus"
        case appclipdomaindebugstatus = "appClipDomainDebugStatus"
        case betaappclipinvocations = "betaAppClipInvocations"
        case buildbundlefilesizes = "buildBundleFileSizes"
        case bundleid = "bundleId"
        case bundletype = "bundleType"
        case dsymurl = "dSYMUrl"
        case deviceprotocols = "deviceProtocols"
        case entitlements = "entitlements"
        case filename = "fileName"
        case hasondemandresources = "hasOnDemandResources"
        case hasprerenderedicon = "hasPrerenderedIcon"
        case hassirikit = "hasSirikit"
        case includessymbols = "includesSymbols"
        case isiosbuildmacappstorecompatible = "isIosBuildMacAppStoreCompatible"
        case locales = "locales"
        case platformbuild = "platformBuild"
        case requiredcapabilities = "requiredCapabilities"
        case sdkbuild = "sdkBuild"
        case supportedarchitectures = "supportedArchitectures"
        case useslocationservices = "usesLocationServices"
    }

    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_ciBuildRunsBuildsGetToManyRelated: String { 
        case iconasset = "iconAsset"
        case icontype = "iconType"
        case name = "name"
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_ciBuildRunsBuildsGetToManyRelated: String { 
        case betareviewstate = "betaReviewState"
        case build = "build"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_ciBuildRunsBuildsGetToManyRelated: String { 
        case autonotifyenabled = "autoNotifyEnabled"
        case build = "build"
        case externalbuildstate = "externalBuildState"
        case internalbuildstate = "internalBuildState"
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_ciBuildRunsBuildsGetToManyRelated: String { 
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
        case email = "email"
        case firstname = "firstName"
        case invitetype = "inviteType"
        case lastname = "lastName"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_ciBuildRunsBuildsGetToManyRelated: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_ciBuildRunsBuildsGetToManyRelated: String { 
        case build = "build"
        case locale = "locale"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_ciBuildRunsBuildsGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_ciBuildRunsBuildsGetToManyRelated: String { 
        case app = "app"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_ciBuildRunsBuildsGetToManyRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciBuildRunsBuildsGetToManyRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsBetaGroups
     */
    public enum FieldsBetaGroups_ciBuildRunsBuildsGetToManyRelated: String { 
        case app = "app"
        case betatesters = "betaTesters"
        case builds = "builds"
        case createddate = "createdDate"
        case feedbackenabled = "feedbackEnabled"
        case hasaccesstoallbuilds = "hasAccessToAllBuilds"
        case iosbuildsavailableforapplesiliconmac = "iosBuildsAvailableForAppleSiliconMac"
        case isinternalgroup = "isInternalGroup"
        case name = "name"
        case publiclink = "publicLink"
        case publiclinkenabled = "publicLinkEnabled"
        case publiclinkid = "publicLinkId"
        case publiclinklimit = "publicLinkLimit"
        case publiclinklimitenabled = "publicLinkLimitEnabled"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildRunsBuildsGetToManyRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case prereleaseversion = "preReleaseVersion"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#x27;betaAppReviewSubmission.betaReviewState&#x27; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#x27;buildAudienceType&#x27; (optional)
     - parameter filterExpired: (query) filter by attribute &#x27;expired&#x27; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#x27;preReleaseVersion.platform&#x27; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#x27;preReleaseVersion.version&#x27; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#x27;processingState&#x27; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#x27;usesNonExemptEncryption&#x27; (optional)
     - parameter filterVersion: (query) filter by attribute &#x27;version&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#x27;appStoreVersion&#x27; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#x27;betaGroups&#x27; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#x27;preReleaseVersion&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuildBundles: (query) the fields to include for returned resources of type buildBundles (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildRunsBuildsGetToManyRelated(_id: String, filterBetaAppReviewSubmissionBetaReviewState: [String]? = nil, filterBuildAudienceType: [String]? = nil, filterExpired: [String]? = nil, filterPreReleaseVersionPlatform: [String]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterProcessingState: [String]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterVersion: [String]? = nil, filterApp: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterBetaGroups: [String]? = nil, filterPreReleaseVersion: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsBuildBundles: [String]? = nil, fieldsBuildIcons: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, fieldsBuildBetaDetails: [String]? = nil, fieldsBetaTesters: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsBetaBuildLocalizations: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppEncryptionDeclarations: [String]? = nil, fieldsApps: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsBetaGroups: [String]? = nil, limit: Int? = nil, limitIndividualTesters: Int? = nil, limitBetaGroups: Int? = nil, limitBetaBuildLocalizations: Int? = nil, limitIcons: Int? = nil, limitBuildBundles: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: BuildsResponse?,_ error: Error?) -> Void)) {
        ciBuildRunsBuildsGetToManyRelatedWithRequestBuilder(_id: _id, filterBetaAppReviewSubmissionBetaReviewState: filterBetaAppReviewSubmissionBetaReviewState, filterBuildAudienceType: filterBuildAudienceType, filterExpired: filterExpired, filterPreReleaseVersionPlatform: filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion: filterPreReleaseVersionVersion, filterProcessingState: filterProcessingState, filterUsesNonExemptEncryption: filterUsesNonExemptEncryption, filterVersion: filterVersion, filterApp: filterApp, filterAppStoreVersion: filterAppStoreVersion, filterBetaGroups: filterBetaGroups, filterPreReleaseVersion: filterPreReleaseVersion, filterId: filterId, sort: sort, fieldsBuildBundles: fieldsBuildBundles, fieldsBuildIcons: fieldsBuildIcons, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsBetaTesters: fieldsBetaTesters, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsApps: fieldsApps, fieldsBuilds: fieldsBuilds, fieldsBetaGroups: fieldsBetaGroups, limit: limit, limitIndividualTesters: limitIndividualTesters, limitBetaGroups: limitBetaGroups, limitBetaBuildLocalizations: limitBetaBuildLocalizations, limitIcons: limitIcons, limitBuildBundles: limitBuildBundles, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildRuns/{id}/builds
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#x27;betaAppReviewSubmission.betaReviewState&#x27; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#x27;buildAudienceType&#x27; (optional)
     - parameter filterExpired: (query) filter by attribute &#x27;expired&#x27; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#x27;preReleaseVersion.platform&#x27; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#x27;preReleaseVersion.version&#x27; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#x27;processingState&#x27; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#x27;usesNonExemptEncryption&#x27; (optional)
     - parameter filterVersion: (query) filter by attribute &#x27;version&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#x27;appStoreVersion&#x27; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#x27;betaGroups&#x27; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#x27;preReleaseVersion&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuildBundles: (query) the fields to include for returned resources of type buildBundles (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsBetaGroups: (query) the fields to include for returned resources of type betaGroups (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<BuildsResponse> 
     */
    open class func ciBuildRunsBuildsGetToManyRelatedWithRequestBuilder(_id: String, filterBetaAppReviewSubmissionBetaReviewState: [String]? = nil, filterBuildAudienceType: [String]? = nil, filterExpired: [String]? = nil, filterPreReleaseVersionPlatform: [String]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterProcessingState: [String]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterVersion: [String]? = nil, filterApp: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterBetaGroups: [String]? = nil, filterPreReleaseVersion: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsBuildBundles: [String]? = nil, fieldsBuildIcons: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, fieldsBuildBetaDetails: [String]? = nil, fieldsBetaTesters: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsBetaBuildLocalizations: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppEncryptionDeclarations: [String]? = nil, fieldsApps: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsBetaGroups: [String]? = nil, limit: Int? = nil, limitIndividualTesters: Int? = nil, limitBetaGroups: Int? = nil, limitBetaBuildLocalizations: Int? = nil, limitIcons: Int? = nil, limitBuildBundles: Int? = nil, include: [String]? = nil) -> RequestBuilder<BuildsResponse> {
        var path = "/v1/ciBuildRuns/{id}/builds"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[betaAppReviewSubmission.betaReviewState]": filterBetaAppReviewSubmissionBetaReviewState, 
                        "filter[buildAudienceType]": filterBuildAudienceType, 
                        "filter[expired]": filterExpired, 
                        "filter[preReleaseVersion.platform]": filterPreReleaseVersionPlatform, 
                        "filter[preReleaseVersion.version]": filterPreReleaseVersionVersion, 
                        "filter[processingState]": filterProcessingState, 
                        "filter[usesNonExemptEncryption]": filterUsesNonExemptEncryption, 
                        "filter[version]": filterVersion, 
                        "filter[app]": filterApp, 
                        "filter[appStoreVersion]": filterAppStoreVersion, 
                        "filter[betaGroups]": filterBetaGroups, 
                        "filter[preReleaseVersion]": filterPreReleaseVersion, 
                        "filter[id]": filterId, 
                        "sort": sort, 
                        "fields[buildBundles]": fieldsBuildBundles, 
                        "fields[buildIcons]": fieldsBuildIcons, 
                        "fields[betaAppReviewSubmissions]": fieldsBetaAppReviewSubmissions, 
                        "fields[buildBetaDetails]": fieldsBuildBetaDetails, 
                        "fields[betaTesters]": fieldsBetaTesters, 
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions, 
                        "fields[betaBuildLocalizations]": fieldsBetaBuildLocalizations, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[appEncryptionDeclarations]": fieldsAppEncryptionDeclarations, 
                        "fields[apps]": fieldsApps, 
                        "fields[builds]": fieldsBuilds, 
                        "fields[betaGroups]": fieldsBetaGroups, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[individualTesters]": limitIndividualTesters?.encodeToJSON(), 
                        "limit[betaGroups]": limitBetaGroups?.encodeToJSON(), 
                        "limit[betaBuildLocalizations]": limitBetaBuildLocalizations?.encodeToJSON(), 
                        "limit[icons]": limitIcons?.encodeToJSON(), 
                        "limit[buildBundles]": limitBuildBundles?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<BuildsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) CiBuildRun representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildRunsCreateInstance(body: CiBuildRunCreateRequest, completion: @escaping ((_ data: CiBuildRunResponse?,_ error: Error?) -> Void)) {
        ciBuildRunsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/ciBuildRuns
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) CiBuildRun representation 

     - returns: RequestBuilder<CiBuildRunResponse> 
     */
    open class func ciBuildRunsCreateInstanceWithRequestBuilder(body: CiBuildRunCreateRequest) -> RequestBuilder<CiBuildRunResponse> {
        let path = "/v1/ciBuildRuns"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CiBuildRunResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciBuildRunsGetInstance: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildRunsGetInstance: String { 
        case builds = "builds"
        case destinationbranch = "destinationBranch"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiBuildActions
     */
    public enum FieldsCiBuildActions_ciBuildRunsGetInstance: String { 
        case actiontype = "actionType"
        case artifacts = "artifacts"
        case buildrun = "buildRun"
        case completionstatus = "completionStatus"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case isrequiredtopass = "isRequiredToPass"
        case issuecounts = "issueCounts"
        case issues = "issues"
        case name = "name"
        case starteddate = "startedDate"
        case testresults = "testResults"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciBuildRunsGetInstance: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildRunsGetInstance(_id: String, fieldsCiBuildRuns: [String]? = nil, include: [String]? = nil, fieldsCiBuildActions: [String]? = nil, fieldsBuilds: [String]? = nil, limitBuilds: Int? = nil, completion: @escaping ((_ data: CiBuildRunResponse?,_ error: Error?) -> Void)) {
        ciBuildRunsGetInstanceWithRequestBuilder(_id: _id, fieldsCiBuildRuns: fieldsCiBuildRuns, include: include, fieldsCiBuildActions: fieldsCiBuildActions, fieldsBuilds: fieldsBuilds, limitBuilds: limitBuilds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildRuns/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)

     - returns: RequestBuilder<CiBuildRunResponse> 
     */
    open class func ciBuildRunsGetInstanceWithRequestBuilder(_id: String, fieldsCiBuildRuns: [String]? = nil, include: [String]? = nil, fieldsCiBuildActions: [String]? = nil, fieldsBuilds: [String]? = nil, limitBuilds: Int? = nil) -> RequestBuilder<CiBuildRunResponse> {
        var path = "/v1/ciBuildRuns/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "include": include, 
                        "fields[ciBuildActions]": fieldsCiBuildActions, 
                        "fields[builds]": fieldsBuilds, 
                        "limit[builds]": limitBuilds?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CiBuildRunResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
