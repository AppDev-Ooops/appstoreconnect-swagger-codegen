//
// AppClipAdvancedExperiencesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class AppClipAdvancedExperiencesAPI {
    /**

     - parameter body: (body) AppClipAdvancedExperience representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appClipAdvancedExperiencesCreateInstance(body: AppClipAdvancedExperienceCreateRequest, completion: @escaping ((_ data: AppClipAdvancedExperienceResponse?,_ error: Error?) -> Void)) {
        appClipAdvancedExperiencesCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/appClipAdvancedExperiences
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appClip" : {
        "data" : {
          "id" : "id",
          "type" : "appClips"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "headerImage" : {
        "data" : {
          "id" : "id",
          "type" : "appClipAdvancedExperienceImages"
        }
      },
      "localizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClipAdvancedExperienceLocalizations"
        }, {
          "id" : "id",
          "type" : "appClipAdvancedExperienceLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "defaultLanguage" : "AR",
      "isPoweredBy" : true,
      "link" : "http://example.com/aeiou",
      "businessCategory" : "AUTOMOTIVE",
      "action" : "OPEN",
      "place" : {
        "mapAction" : "BUY_TICKETS",
        "names" : [ "names", "names" ],
        "phoneNumber" : {
          "number" : "number",
          "type" : "FAX",
          "intent" : "intent"
        },
        "placeId" : "placeId",
        "categories" : [ "categories", "categories" ],
        "relationship" : "OWNER",
        "mainAddress" : {
          "structuredAddress" : {
            "streetAddress" : [ "streetAddress", "streetAddress" ],
            "countryCode" : "countryCode",
            "postalCode" : "postalCode",
            "locality" : "locality",
            "stateProvince" : "stateProvince",
            "neighborhood" : "neighborhood",
            "floor" : "floor"
          },
          "fullAddress" : "fullAddress"
        },
        "homePage" : "homePage",
        "displayPoint" : {
          "coordinates" : {
            "latitude" : 6.027456183070403,
            "longitude" : 1.4658129805029452
          },
          "source" : "CALCULATED"
        }
      },
      "version" : 0,
      "placeStatus" : "PENDING",
      "status" : "RECEIVED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appClipAdvancedExperiences"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) AppClipAdvancedExperience representation 

     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesCreateInstanceWithRequestBuilder(body: AppClipAdvancedExperienceCreateRequest) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        let path = "/v1/appClipAdvancedExperiences"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsAppClipAdvancedExperiences
     */
    public enum FieldsAppClipAdvancedExperiences_appClipAdvancedExperiencesGetInstance: String { 
        case action = "action"
        case appclip = "appClip"
        case businesscategory = "businessCategory"
        case defaultlanguage = "defaultLanguage"
        case headerimage = "headerImage"
        case ispoweredby = "isPoweredBy"
        case link = "link"
        case localizations = "localizations"
        case place = "place"
        case placestatus = "placeStatus"
        case removed = "removed"
        case status = "status"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_appClipAdvancedExperiencesGetInstance: String { 
        case appclip = "appClip"
        case headerimage = "headerImage"
        case localizations = "localizations"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppClipAdvancedExperiences: (query) the fields to include for returned resources of type appClipAdvancedExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appClipAdvancedExperiencesGetInstance(_id: String, fieldsAppClipAdvancedExperiences: [String]? = nil, include: [String]? = nil, limitLocalizations: Int? = nil, completion: @escaping ((_ data: AppClipAdvancedExperienceResponse?,_ error: Error?) -> Void)) {
        appClipAdvancedExperiencesGetInstanceWithRequestBuilder(_id: _id, fieldsAppClipAdvancedExperiences: fieldsAppClipAdvancedExperiences, include: include, limitLocalizations: limitLocalizations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/appClipAdvancedExperiences/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appClip" : {
        "data" : {
          "id" : "id",
          "type" : "appClips"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "headerImage" : {
        "data" : {
          "id" : "id",
          "type" : "appClipAdvancedExperienceImages"
        }
      },
      "localizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClipAdvancedExperienceLocalizations"
        }, {
          "id" : "id",
          "type" : "appClipAdvancedExperienceLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "defaultLanguage" : "AR",
      "isPoweredBy" : true,
      "link" : "http://example.com/aeiou",
      "businessCategory" : "AUTOMOTIVE",
      "action" : "OPEN",
      "place" : {
        "mapAction" : "BUY_TICKETS",
        "names" : [ "names", "names" ],
        "phoneNumber" : {
          "number" : "number",
          "type" : "FAX",
          "intent" : "intent"
        },
        "placeId" : "placeId",
        "categories" : [ "categories", "categories" ],
        "relationship" : "OWNER",
        "mainAddress" : {
          "structuredAddress" : {
            "streetAddress" : [ "streetAddress", "streetAddress" ],
            "countryCode" : "countryCode",
            "postalCode" : "postalCode",
            "locality" : "locality",
            "stateProvince" : "stateProvince",
            "neighborhood" : "neighborhood",
            "floor" : "floor"
          },
          "fullAddress" : "fullAddress"
        },
        "homePage" : "homePage",
        "displayPoint" : {
          "coordinates" : {
            "latitude" : 6.027456183070403,
            "longitude" : 1.4658129805029452
          },
          "source" : "CALCULATED"
        }
      },
      "version" : 0,
      "placeStatus" : "PENDING",
      "status" : "RECEIVED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appClipAdvancedExperiences"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppClipAdvancedExperiences: (query) the fields to include for returned resources of type appClipAdvancedExperiences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter limitLocalizations: (query) maximum number of related localizations returned (when they are included) (optional)

     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesGetInstanceWithRequestBuilder(_id: String, fieldsAppClipAdvancedExperiences: [String]? = nil, include: [String]? = nil, limitLocalizations: Int? = nil) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        var path = "/v1/appClipAdvancedExperiences/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appClipAdvancedExperiences]": fieldsAppClipAdvancedExperiences, 
                        "include": include, 
                        "limit[localizations]": limitLocalizations?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) AppClipAdvancedExperience representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appClipAdvancedExperiencesUpdateInstance(body: AppClipAdvancedExperienceUpdateRequest, _id: String, completion: @escaping ((_ data: AppClipAdvancedExperienceResponse?,_ error: Error?) -> Void)) {
        appClipAdvancedExperiencesUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/appClipAdvancedExperiences/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "appClip" : {
        "data" : {
          "id" : "id",
          "type" : "appClips"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "headerImage" : {
        "data" : {
          "id" : "id",
          "type" : "appClipAdvancedExperienceImages"
        }
      },
      "localizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClipAdvancedExperienceLocalizations"
        }, {
          "id" : "id",
          "type" : "appClipAdvancedExperienceLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      }
    },
    "attributes" : {
      "defaultLanguage" : "AR",
      "isPoweredBy" : true,
      "link" : "http://example.com/aeiou",
      "businessCategory" : "AUTOMOTIVE",
      "action" : "OPEN",
      "place" : {
        "mapAction" : "BUY_TICKETS",
        "names" : [ "names", "names" ],
        "phoneNumber" : {
          "number" : "number",
          "type" : "FAX",
          "intent" : "intent"
        },
        "placeId" : "placeId",
        "categories" : [ "categories", "categories" ],
        "relationship" : "OWNER",
        "mainAddress" : {
          "structuredAddress" : {
            "streetAddress" : [ "streetAddress", "streetAddress" ],
            "countryCode" : "countryCode",
            "postalCode" : "postalCode",
            "locality" : "locality",
            "stateProvince" : "stateProvince",
            "neighborhood" : "neighborhood",
            "floor" : "floor"
          },
          "fullAddress" : "fullAddress"
        },
        "homePage" : "homePage",
        "displayPoint" : {
          "coordinates" : {
            "latitude" : 6.027456183070403,
            "longitude" : 1.4658129805029452
          },
          "source" : "CALCULATED"
        }
      },
      "version" : 0,
      "placeStatus" : "PENDING",
      "status" : "RECEIVED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appClipAdvancedExperiences"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) AppClipAdvancedExperience representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<AppClipAdvancedExperienceResponse> 
     */
    open class func appClipAdvancedExperiencesUpdateInstanceWithRequestBuilder(body: AppClipAdvancedExperienceUpdateRequest, _id: String) -> RequestBuilder<AppClipAdvancedExperienceResponse> {
        var path = "/v1/appClipAdvancedExperiences/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<AppClipAdvancedExperienceResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
