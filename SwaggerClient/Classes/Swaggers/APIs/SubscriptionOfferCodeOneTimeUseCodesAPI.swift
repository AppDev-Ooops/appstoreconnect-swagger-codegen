//
// SubscriptionOfferCodeOneTimeUseCodesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class SubscriptionOfferCodeOneTimeUseCodesAPI {
    /**

     - parameter body: (body) SubscriptionOfferCodeOneTimeUseCode representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionOfferCodeOneTimeUseCodesCreateInstance(body: SubscriptionOfferCodeOneTimeUseCodeCreateRequest, completion: @escaping ((_ data: SubscriptionOfferCodeOneTimeUseCodeResponse?,_ error: Error?) -> Void)) {
        subscriptionOfferCodeOneTimeUseCodesCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/subscriptionOfferCodeOneTimeUseCodes
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "offerCode" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "numberOfCodes" : 0,
      "active" : true,
      "expirationDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionOfferCodeOneTimeUseCodes"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  }, {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  } ]
}}]
     - parameter body: (body) SubscriptionOfferCodeOneTimeUseCode representation 

     - returns: RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse> 
     */
    open class func subscriptionOfferCodeOneTimeUseCodesCreateInstanceWithRequestBuilder(body: SubscriptionOfferCodeOneTimeUseCodeCreateRequest) -> RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse> {
        let path = "/v1/subscriptionOfferCodeOneTimeUseCodes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsSubscriptionOfferCodeOneTimeUseCodes
     */
    public enum FieldsSubscriptionOfferCodeOneTimeUseCodes_subscriptionOfferCodeOneTimeUseCodesGetInstance: String { 
        case active = "active"
        case createddate = "createdDate"
        case expirationdate = "expirationDate"
        case numberofcodes = "numberOfCodes"
        case offercode = "offerCode"
        case values = "values"
    }

    /**
     * enum for parameter include
     */
    public enum Include_subscriptionOfferCodeOneTimeUseCodesGetInstance: String { 
        case offercode = "offerCode"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodeValues: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodeValues (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionOfferCodeOneTimeUseCodesGetInstance(_id: String, fieldsSubscriptionOfferCodeOneTimeUseCodes: [String]? = nil, include: [String]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodeValues: [String]? = nil, completion: @escaping ((_ data: SubscriptionOfferCodeOneTimeUseCodeResponse?,_ error: Error?) -> Void)) {
        subscriptionOfferCodeOneTimeUseCodesGetInstanceWithRequestBuilder(_id: _id, fieldsSubscriptionOfferCodeOneTimeUseCodes: fieldsSubscriptionOfferCodeOneTimeUseCodes, include: include, fieldsSubscriptionOfferCodeOneTimeUseCodeValues: fieldsSubscriptionOfferCodeOneTimeUseCodeValues).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptionOfferCodeOneTimeUseCodes/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "offerCode" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "numberOfCodes" : 0,
      "active" : true,
      "expirationDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionOfferCodeOneTimeUseCodes"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  }, {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodes: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsSubscriptionOfferCodeOneTimeUseCodeValues: (query) the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodeValues (optional)

     - returns: RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse> 
     */
    open class func subscriptionOfferCodeOneTimeUseCodesGetInstanceWithRequestBuilder(_id: String, fieldsSubscriptionOfferCodeOneTimeUseCodes: [String]? = nil, include: [String]? = nil, fieldsSubscriptionOfferCodeOneTimeUseCodeValues: [String]? = nil) -> RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse> {
        var path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[subscriptionOfferCodeOneTimeUseCodes]": fieldsSubscriptionOfferCodeOneTimeUseCodes, 
                        "include": include, 
                        "fields[subscriptionOfferCodeOneTimeUseCodeValues]": fieldsSubscriptionOfferCodeOneTimeUseCodeValues
        ])


        let requestBuilder: RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) SubscriptionOfferCodeOneTimeUseCode representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionOfferCodeOneTimeUseCodesUpdateInstance(body: SubscriptionOfferCodeOneTimeUseCodeUpdateRequest, _id: String, completion: @escaping ((_ data: SubscriptionOfferCodeOneTimeUseCodeResponse?,_ error: Error?) -> Void)) {
        subscriptionOfferCodeOneTimeUseCodesUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/subscriptionOfferCodeOneTimeUseCodes/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "offerCode" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionOfferCodes"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "numberOfCodes" : 0,
      "active" : true,
      "expirationDate" : "2000-01-23"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "subscriptionOfferCodeOneTimeUseCodes"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  }, {
    "relationships" : {
      "customCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeCustomCodes"
        } ]
      },
      "oneTimeUseCodes" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodeOneTimeUseCodes"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "subscription" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        }, {
          "id" : "id",
          "type" : "subscriptionOfferCodePrices"
        } ]
      }
    },
    "attributes" : {
      "duration" : "ONE_DAY",
      "offerEligibility" : "STACK_WITH_INTRO_OFFERS",
      "name" : "name",
      "active" : true,
      "numberOfPeriods" : 6,
      "offerMode" : "PAY_AS_YOU_GO",
      "customerEligibilities" : [ "NEW", "NEW" ],
      "totalNumberOfCodes" : 1
    },
    "id" : "id",
    "type" : "subscriptionOfferCodes"
  } ]
}}]
     - parameter body: (body) SubscriptionOfferCodeOneTimeUseCode representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse> 
     */
    open class func subscriptionOfferCodeOneTimeUseCodesUpdateInstanceWithRequestBuilder(body: SubscriptionOfferCodeOneTimeUseCodeUpdateRequest, _id: String) -> RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse> {
        var path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SubscriptionOfferCodeOneTimeUseCodeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelated(_id: String, completion: @escaping ((_ data: Csv?,_ error: Error?) -> Void)) {
        subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example=""}]
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Csv> 
     */
    open class func subscriptionOfferCodeOneTimeUseCodesValuesGetToOneRelatedWithRequestBuilder(_id: String) -> RequestBuilder<Csv> {
        var path = "/v1/subscriptionOfferCodeOneTimeUseCodes/{id}/values"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Csv>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
