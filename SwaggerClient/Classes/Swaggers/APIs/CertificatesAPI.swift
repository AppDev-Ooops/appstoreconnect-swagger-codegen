//
// CertificatesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CertificatesAPI {
    /**

     - parameter body: (body) Certificate representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func certificatesCreateInstance(body: CertificateCreateRequest, completion: @escaping ((_ data: CertificateResponse?,_ error: Error?) -> Void)) {
        certificatesCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/certificates
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "serialNumber" : "serialNumber",
      "certificateContent" : "certificateContent",
      "displayName" : "displayName",
      "name" : "name",
      "platform" : "IOS",
      "certificateType" : "IOS_DEVELOPMENT",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "certificates"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter body: (body) Certificate representation 

     - returns: RequestBuilder<CertificateResponse> 
     */
    open class func certificatesCreateInstanceWithRequestBuilder(body: CertificateCreateRequest) -> RequestBuilder<CertificateResponse> {
        let path = "/v1/certificates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CertificateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func certificatesDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        certificatesDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/certificates/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func certificatesDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/certificates/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterCertificateType
     */
    public enum FilterCertificateType_certificatesGetCollection: String { 
        case iosDevelopment = "IOS_DEVELOPMENT"
        case iosDistribution = "IOS_DISTRIBUTION"
        case macAppDistribution = "MAC_APP_DISTRIBUTION"
        case macInstallerDistribution = "MAC_INSTALLER_DISTRIBUTION"
        case macAppDevelopment = "MAC_APP_DEVELOPMENT"
        case developerIdKext = "DEVELOPER_ID_KEXT"
        case developerIdApplication = "DEVELOPER_ID_APPLICATION"
        case development = "DEVELOPMENT"
        case distribution = "DISTRIBUTION"
        case passTypeId = "PASS_TYPE_ID"
        case passTypeIdWithNfc = "PASS_TYPE_ID_WITH_NFC"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_certificatesGetCollection: String { 
        case certificatetype = "certificateType"
        case certificatetype_1 = "-certificateType"
        case displayname = "displayName"
        case displayname_3 = "-displayName"
        case _id = "id"
        case id = "-id"
        case serialnumber = "serialNumber"
        case serialnumber_7 = "-serialNumber"
    }

    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_certificatesGetCollection: String { 
        case certificatecontent = "certificateContent"
        case certificatetype = "certificateType"
        case csrcontent = "csrContent"
        case displayname = "displayName"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case serialnumber = "serialNumber"
    }

    /**

     - parameter filterCertificateType: (query) filter by attribute &#x27;certificateType&#x27; (optional)
     - parameter filterDisplayName: (query) filter by attribute &#x27;displayName&#x27; (optional)
     - parameter filterSerialNumber: (query) filter by attribute &#x27;serialNumber&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func certificatesGetCollection(filterCertificateType: [String]? = nil, filterDisplayName: [String]? = nil, filterSerialNumber: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsCertificates: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: CertificatesResponse?,_ error: Error?) -> Void)) {
        certificatesGetCollectionWithRequestBuilder(filterCertificateType: filterCertificateType, filterDisplayName: filterDisplayName, filterSerialNumber: filterSerialNumber, filterId: filterId, sort: sort, fieldsCertificates: fieldsCertificates, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/certificates
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "serialNumber" : "serialNumber",
      "certificateContent" : "certificateContent",
      "displayName" : "displayName",
      "name" : "name",
      "platform" : "IOS",
      "certificateType" : "IOS_DEVELOPMENT",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "certificates"
  }, {
    "attributes" : {
      "serialNumber" : "serialNumber",
      "certificateContent" : "certificateContent",
      "displayName" : "displayName",
      "name" : "name",
      "platform" : "IOS",
      "certificateType" : "IOS_DEVELOPMENT",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "certificates"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter filterCertificateType: (query) filter by attribute &#x27;certificateType&#x27; (optional)
     - parameter filterDisplayName: (query) filter by attribute &#x27;displayName&#x27; (optional)
     - parameter filterSerialNumber: (query) filter by attribute &#x27;serialNumber&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<CertificatesResponse> 
     */
    open class func certificatesGetCollectionWithRequestBuilder(filterCertificateType: [String]? = nil, filterDisplayName: [String]? = nil, filterSerialNumber: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsCertificates: [String]? = nil, limit: Int? = nil) -> RequestBuilder<CertificatesResponse> {
        let path = "/v1/certificates"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[certificateType]": filterCertificateType, 
                        "filter[displayName]": filterDisplayName, 
                        "filter[serialNumber]": filterSerialNumber, 
                        "filter[id]": filterId, 
                        "sort": sort, 
                        "fields[certificates]": fieldsCertificates, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CertificatesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_certificatesGetInstance: String { 
        case certificatecontent = "certificateContent"
        case certificatetype = "certificateType"
        case csrcontent = "csrContent"
        case displayname = "displayName"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case serialnumber = "serialNumber"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func certificatesGetInstance(_id: String, fieldsCertificates: [String]? = nil, completion: @escaping ((_ data: CertificateResponse?,_ error: Error?) -> Void)) {
        certificatesGetInstanceWithRequestBuilder(_id: _id, fieldsCertificates: fieldsCertificates).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/certificates/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "serialNumber" : "serialNumber",
      "certificateContent" : "certificateContent",
      "displayName" : "displayName",
      "name" : "name",
      "platform" : "IOS",
      "certificateType" : "IOS_DEVELOPMENT",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "certificates"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)

     - returns: RequestBuilder<CertificateResponse> 
     */
    open class func certificatesGetInstanceWithRequestBuilder(_id: String, fieldsCertificates: [String]? = nil) -> RequestBuilder<CertificateResponse> {
        var path = "/v1/certificates/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[certificates]": fieldsCertificates
        ])


        let requestBuilder: RequestBuilder<CertificateResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
