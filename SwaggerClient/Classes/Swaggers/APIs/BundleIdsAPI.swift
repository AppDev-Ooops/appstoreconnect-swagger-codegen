//
// BundleIdsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BundleIdsAPI {
    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_bundleIdsAppGetToOneRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsAppGetToOneRelated(_id: String, fieldsApps: [String]? = nil, completion: @escaping ((_ data: AppResponse?,_ error: Error?) -> Void)) {
        bundleIdsAppGetToOneRelatedWithRequestBuilder(_id: _id, fieldsApps: fieldsApps).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/bundleIds/{id}/app
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)

     - returns: RequestBuilder<AppResponse> 
     */
    open class func bundleIdsAppGetToOneRelatedWithRequestBuilder(_id: String, fieldsApps: [String]? = nil) -> RequestBuilder<AppResponse> {
        var path = "/v1/bundleIds/{id}/app"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[apps]": fieldsApps
        ])


        let requestBuilder: RequestBuilder<AppResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBundleIdCapabilities
     */
    public enum FieldsBundleIdCapabilities_bundleIdsBundleIdCapabilitiesGetToManyRelated: String { 
        case bundleid = "bundleId"
        case capabilitytype = "capabilityType"
        case settings = "settings"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsBundleIdCapabilitiesGetToManyRelated(_id: String, fieldsBundleIdCapabilities: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: BundleIdCapabilitiesResponse?,_ error: Error?) -> Void)) {
        bundleIdsBundleIdCapabilitiesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsBundleIdCapabilities: fieldsBundleIdCapabilities, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/bundleIds/{id}/bundleIdCapabilities
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "settings" : [ {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      }, {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      } ],
      "capabilityType" : "ICLOUD"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIdCapabilities"
  }, {
    "attributes" : {
      "settings" : [ {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      }, {
        "minInstances" : 0,
        "visible" : true,
        "allowedInstances" : "ENTRY",
        "name" : "name",
        "enabledByDefault" : true,
        "options" : [ {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        }, {
          "supportsWildcard" : true,
          "name" : "name",
          "enabledByDefault" : true,
          "description" : "description",
          "key" : "XCODE_5",
          "enabled" : true
        } ],
        "description" : "description",
        "key" : "ICLOUD_VERSION"
      } ],
      "capabilityType" : "ICLOUD"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIdCapabilities"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BundleIdCapabilitiesResponse> 
     */
    open class func bundleIdsBundleIdCapabilitiesGetToManyRelatedWithRequestBuilder(_id: String, fieldsBundleIdCapabilities: [String]? = nil, limit: Int? = nil) -> RequestBuilder<BundleIdCapabilitiesResponse> {
        var path = "/v1/bundleIds/{id}/bundleIdCapabilities"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[bundleIdCapabilities]": fieldsBundleIdCapabilities, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BundleIdCapabilitiesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) BundleId representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsCreateInstance(body: BundleIdCreateRequest, completion: @escaping ((_ data: BundleIdResponse?,_ error: Error?) -> Void)) {
        bundleIdsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/bundleIds
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleIdCapabilities" : {
        "data" : [ {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        }, {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        } ]
      },
      "profiles" : {
        "data" : [ {
          "id" : "id",
          "type" : "profiles"
        }, {
          "id" : "id",
          "type" : "profiles"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "identifier" : "identifier",
      "seedId" : "seedId",
      "name" : "name",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) BundleId representation 

     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsCreateInstanceWithRequestBuilder(body: BundleIdCreateRequest) -> RequestBuilder<BundleIdResponse> {
        let path = "/v1/bundleIds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleIdResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        bundleIdsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/bundleIds/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func bundleIdsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/bundleIds/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_bundleIdsGetCollection: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_bundleIdsGetCollection: String { 
        case _id = "id"
        case id = "-id"
        case identifier = "identifier"
        case identifier_3 = "-identifier"
        case name = "name"
        case name_5 = "-name"
        case platform = "platform"
        case platform_7 = "-platform"
        case seedid = "seedId"
        case seedid_9 = "-seedId"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_bundleIdsGetCollection: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**
     * enum for parameter include
     */
    public enum Include_bundleIdsGetCollection: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case profiles = "profiles"
    }

    /**
     * enum for parameter fieldsBundleIdCapabilities
     */
    public enum FieldsBundleIdCapabilities_bundleIdsGetCollection: String { 
        case bundleid = "bundleId"
        case capabilitytype = "capabilityType"
        case settings = "settings"
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_bundleIdsGetCollection: String { 
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_bundleIdsGetCollection: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter filterIdentifier: (query) filter by attribute &#x27;identifier&#x27; (optional)
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterSeedId: (query) filter by attribute &#x27;seedId&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsGetCollection(filterIdentifier: [String]? = nil, filterName: [String]? = nil, filterPlatform: [String]? = nil, filterSeedId: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsBundleIds: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsBundleIdCapabilities: [String]? = nil, fieldsProfiles: [String]? = nil, fieldsApps: [String]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil, completion: @escaping ((_ data: BundleIdsResponse?,_ error: Error?) -> Void)) {
        bundleIdsGetCollectionWithRequestBuilder(filterIdentifier: filterIdentifier, filterName: filterName, filterPlatform: filterPlatform, filterSeedId: filterSeedId, filterId: filterId, sort: sort, fieldsBundleIds: fieldsBundleIds, limit: limit, include: include, fieldsBundleIdCapabilities: fieldsBundleIdCapabilities, fieldsProfiles: fieldsProfiles, fieldsApps: fieldsApps, limitBundleIdCapabilities: limitBundleIdCapabilities, limitProfiles: limitProfiles).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/bundleIds
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleIdCapabilities" : {
        "data" : [ {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        }, {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        } ]
      },
      "profiles" : {
        "data" : [ {
          "id" : "id",
          "type" : "profiles"
        }, {
          "id" : "id",
          "type" : "profiles"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "identifier" : "identifier",
      "seedId" : "seedId",
      "name" : "name",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIds"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleIdCapabilities" : {
        "data" : [ {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        }, {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        } ]
      },
      "profiles" : {
        "data" : [ {
          "id" : "id",
          "type" : "profiles"
        }, {
          "id" : "id",
          "type" : "profiles"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "identifier" : "identifier",
      "seedId" : "seedId",
      "name" : "name",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIds"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter filterIdentifier: (query) filter by attribute &#x27;identifier&#x27; (optional)
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterSeedId: (query) filter by attribute &#x27;seedId&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)

     - returns: RequestBuilder<BundleIdsResponse> 
     */
    open class func bundleIdsGetCollectionWithRequestBuilder(filterIdentifier: [String]? = nil, filterName: [String]? = nil, filterPlatform: [String]? = nil, filterSeedId: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsBundleIds: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsBundleIdCapabilities: [String]? = nil, fieldsProfiles: [String]? = nil, fieldsApps: [String]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil) -> RequestBuilder<BundleIdsResponse> {
        let path = "/v1/bundleIds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[identifier]": filterIdentifier, 
                        "filter[name]": filterName, 
                        "filter[platform]": filterPlatform, 
                        "filter[seedId]": filterSeedId, 
                        "filter[id]": filterId, 
                        "sort": sort, 
                        "fields[bundleIds]": fieldsBundleIds, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[bundleIdCapabilities]": fieldsBundleIdCapabilities, 
                        "fields[profiles]": fieldsProfiles, 
                        "fields[apps]": fieldsApps, 
                        "limit[bundleIdCapabilities]": limitBundleIdCapabilities?.encodeToJSON(), 
                        "limit[profiles]": limitProfiles?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BundleIdsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_bundleIdsGetInstance: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**
     * enum for parameter include
     */
    public enum Include_bundleIdsGetInstance: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case profiles = "profiles"
    }

    /**
     * enum for parameter fieldsBundleIdCapabilities
     */
    public enum FieldsBundleIdCapabilities_bundleIdsGetInstance: String { 
        case bundleid = "bundleId"
        case capabilitytype = "capabilityType"
        case settings = "settings"
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_bundleIdsGetInstance: String { 
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_bundleIdsGetInstance: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsGetInstance(_id: String, fieldsBundleIds: [String]? = nil, include: [String]? = nil, fieldsBundleIdCapabilities: [String]? = nil, fieldsProfiles: [String]? = nil, fieldsApps: [String]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil, completion: @escaping ((_ data: BundleIdResponse?,_ error: Error?) -> Void)) {
        bundleIdsGetInstanceWithRequestBuilder(_id: _id, fieldsBundleIds: fieldsBundleIds, include: include, fieldsBundleIdCapabilities: fieldsBundleIdCapabilities, fieldsProfiles: fieldsProfiles, fieldsApps: fieldsApps, limitBundleIdCapabilities: limitBundleIdCapabilities, limitProfiles: limitProfiles).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/bundleIds/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleIdCapabilities" : {
        "data" : [ {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        }, {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        } ]
      },
      "profiles" : {
        "data" : [ {
          "id" : "id",
          "type" : "profiles"
        }, {
          "id" : "id",
          "type" : "profiles"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "identifier" : "identifier",
      "seedId" : "seedId",
      "name" : "name",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsBundleIdCapabilities: (query) the fields to include for returned resources of type bundleIdCapabilities (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter limitBundleIdCapabilities: (query) maximum number of related bundleIdCapabilities returned (when they are included) (optional)
     - parameter limitProfiles: (query) maximum number of related profiles returned (when they are included) (optional)

     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsGetInstanceWithRequestBuilder(_id: String, fieldsBundleIds: [String]? = nil, include: [String]? = nil, fieldsBundleIdCapabilities: [String]? = nil, fieldsProfiles: [String]? = nil, fieldsApps: [String]? = nil, limitBundleIdCapabilities: Int? = nil, limitProfiles: Int? = nil) -> RequestBuilder<BundleIdResponse> {
        var path = "/v1/bundleIds/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[bundleIds]": fieldsBundleIds, 
                        "include": include, 
                        "fields[bundleIdCapabilities]": fieldsBundleIdCapabilities, 
                        "fields[profiles]": fieldsProfiles, 
                        "fields[apps]": fieldsApps, 
                        "limit[bundleIdCapabilities]": limitBundleIdCapabilities?.encodeToJSON(), 
                        "limit[profiles]": limitProfiles?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BundleIdResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_bundleIdsProfilesGetToManyRelated: String { 
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsProfilesGetToManyRelated(_id: String, fieldsProfiles: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: ProfilesResponse?,_ error: Error?) -> Void)) {
        bundleIdsProfilesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsProfiles: fieldsProfiles, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/bundleIds/{id}/profiles
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "certificates" : {
        "data" : [ {
          "id" : "id",
          "type" : "certificates"
        }, {
          "id" : "id",
          "type" : "certificates"
        } ]
      },
      "devices" : {
        "data" : [ {
          "id" : "id",
          "type" : "devices"
        }, {
          "id" : "id",
          "type" : "devices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "profileState" : "ACTIVE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "profileType" : "IOS_APP_DEVELOPMENT",
      "name" : "name",
      "profileContent" : "profileContent",
      "uuid" : "uuid",
      "platform" : "IOS",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "profiles"
  }, {
    "relationships" : {
      "certificates" : {
        "data" : [ {
          "id" : "id",
          "type" : "certificates"
        }, {
          "id" : "id",
          "type" : "certificates"
        } ]
      },
      "devices" : {
        "data" : [ {
          "id" : "id",
          "type" : "devices"
        }, {
          "id" : "id",
          "type" : "devices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "profileState" : "ACTIVE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "profileType" : "IOS_APP_DEVELOPMENT",
      "name" : "name",
      "profileContent" : "profileContent",
      "uuid" : "uuid",
      "platform" : "IOS",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "profiles"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<ProfilesResponse> 
     */
    open class func bundleIdsProfilesGetToManyRelatedWithRequestBuilder(_id: String, fieldsProfiles: [String]? = nil, limit: Int? = nil) -> RequestBuilder<ProfilesResponse> {
        var path = "/v1/bundleIds/{id}/profiles"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[profiles]": fieldsProfiles, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ProfilesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) BundleId representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func bundleIdsUpdateInstance(body: BundleIdUpdateRequest, _id: String, completion: @escaping ((_ data: BundleIdResponse?,_ error: Error?) -> Void)) {
        bundleIdsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/bundleIds/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleIdCapabilities" : {
        "data" : [ {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        }, {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        } ]
      },
      "profiles" : {
        "data" : [ {
          "id" : "id",
          "type" : "profiles"
        }, {
          "id" : "id",
          "type" : "profiles"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "identifier" : "identifier",
      "seedId" : "seedId",
      "name" : "name",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) BundleId representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func bundleIdsUpdateInstanceWithRequestBuilder(body: BundleIdUpdateRequest, _id: String) -> RequestBuilder<BundleIdResponse> {
        var path = "/v1/bundleIds/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BundleIdResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
