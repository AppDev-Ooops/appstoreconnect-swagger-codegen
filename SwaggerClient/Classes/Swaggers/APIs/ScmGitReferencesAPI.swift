//
// ScmGitReferencesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ScmGitReferencesAPI {
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_scmGitReferencesGetInstance: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter include
     */
    public enum Include_scmGitReferencesGetInstance: String { 
        case repository = "repository"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scmGitReferencesGetInstance(_id: String, fieldsScmGitReferences: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: ScmGitReferenceResponse?,_ error: Error?) -> Void)) {
        scmGitReferencesGetInstanceWithRequestBuilder(_id: _id, fieldsScmGitReferences: fieldsScmGitReferences, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/scmGitReferences/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "isDeleted" : true,
      "kind" : "BRANCH",
      "name" : "name",
      "canonicalName" : "canonicalName"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "scmGitReferences"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  }, {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ScmGitReferenceResponse> 
     */
    open class func scmGitReferencesGetInstanceWithRequestBuilder(_id: String, fieldsScmGitReferences: [String]? = nil, include: [String]? = nil) -> RequestBuilder<ScmGitReferenceResponse> {
        var path = "/v1/scmGitReferences/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ScmGitReferenceResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
