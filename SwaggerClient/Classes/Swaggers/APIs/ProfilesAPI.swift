//
// ProfilesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ProfilesAPI {
    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_profilesBundleIdGetToOneRelated: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilesBundleIdGetToOneRelated(_id: String, fieldsBundleIds: [String]? = nil, completion: @escaping ((_ data: BundleIdResponse?,_ error: Error?) -> Void)) {
        profilesBundleIdGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBundleIds: fieldsBundleIds).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/profiles/{id}/bundleId
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleIdCapabilities" : {
        "data" : [ {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        }, {
          "id" : "id",
          "type" : "bundleIdCapabilities"
        } ]
      },
      "profiles" : {
        "data" : [ {
          "id" : "id",
          "type" : "profiles"
        }, {
          "id" : "id",
          "type" : "profiles"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "identifier" : "identifier",
      "seedId" : "seedId",
      "name" : "name",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "bundleIds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)

     - returns: RequestBuilder<BundleIdResponse> 
     */
    open class func profilesBundleIdGetToOneRelatedWithRequestBuilder(_id: String, fieldsBundleIds: [String]? = nil) -> RequestBuilder<BundleIdResponse> {
        var path = "/v1/profiles/{id}/bundleId"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[bundleIds]": fieldsBundleIds
        ])


        let requestBuilder: RequestBuilder<BundleIdResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_profilesCertificatesGetToManyRelated: String { 
        case certificatecontent = "certificateContent"
        case certificatetype = "certificateType"
        case csrcontent = "csrContent"
        case displayname = "displayName"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case serialnumber = "serialNumber"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilesCertificatesGetToManyRelated(_id: String, fieldsCertificates: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: CertificatesResponse?,_ error: Error?) -> Void)) {
        profilesCertificatesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsCertificates: fieldsCertificates, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/profiles/{id}/certificates
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "serialNumber" : "serialNumber",
      "certificateContent" : "certificateContent",
      "displayName" : "displayName",
      "name" : "name",
      "platform" : "IOS",
      "certificateType" : "IOS_DEVELOPMENT",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "certificates"
  }, {
    "attributes" : {
      "serialNumber" : "serialNumber",
      "certificateContent" : "certificateContent",
      "displayName" : "displayName",
      "name" : "name",
      "platform" : "IOS",
      "certificateType" : "IOS_DEVELOPMENT",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "certificates"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<CertificatesResponse> 
     */
    open class func profilesCertificatesGetToManyRelatedWithRequestBuilder(_id: String, fieldsCertificates: [String]? = nil, limit: Int? = nil) -> RequestBuilder<CertificatesResponse> {
        var path = "/v1/profiles/{id}/certificates"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[certificates]": fieldsCertificates, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CertificatesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) Profile representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilesCreateInstance(body: ProfileCreateRequest, completion: @escaping ((_ data: ProfileResponse?,_ error: Error?) -> Void)) {
        profilesCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/profiles
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "certificates" : {
        "data" : [ {
          "id" : "id",
          "type" : "certificates"
        }, {
          "id" : "id",
          "type" : "certificates"
        } ]
      },
      "devices" : {
        "data" : [ {
          "id" : "id",
          "type" : "devices"
        }, {
          "id" : "id",
          "type" : "devices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "profileState" : "ACTIVE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "profileType" : "IOS_APP_DEVELOPMENT",
      "name" : "name",
      "profileContent" : "profileContent",
      "uuid" : "uuid",
      "platform" : "IOS",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "profiles"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) Profile representation 

     - returns: RequestBuilder<ProfileResponse> 
     */
    open class func profilesCreateInstanceWithRequestBuilder(body: ProfileCreateRequest) -> RequestBuilder<ProfileResponse> {
        let path = "/v1/profiles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ProfileResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilesDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        profilesDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/profiles/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func profilesDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/profiles/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsDevices
     */
    public enum FieldsDevices_profilesDevicesGetToManyRelated: String { 
        case addeddate = "addedDate"
        case deviceclass = "deviceClass"
        case model = "model"
        case name = "name"
        case platform = "platform"
        case status = "status"
        case udid = "udid"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilesDevicesGetToManyRelated(_id: String, fieldsDevices: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: DevicesResponse?,_ error: Error?) -> Void)) {
        profilesDevicesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsDevices: fieldsDevices, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/profiles/{id}/devices
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "addedDate" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "deviceClass" : "APPLE_WATCH",
      "model" : "model",
      "udid" : "udid",
      "platform" : "IOS",
      "status" : "ENABLED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "devices"
  }, {
    "attributes" : {
      "addedDate" : "2000-01-23T04:56:07.000+00:00",
      "name" : "name",
      "deviceClass" : "APPLE_WATCH",
      "model" : "model",
      "udid" : "udid",
      "platform" : "IOS",
      "status" : "ENABLED"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "devices"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<DevicesResponse> 
     */
    open class func profilesDevicesGetToManyRelatedWithRequestBuilder(_id: String, fieldsDevices: [String]? = nil, limit: Int? = nil) -> RequestBuilder<DevicesResponse> {
        var path = "/v1/profiles/{id}/devices"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[devices]": fieldsDevices, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<DevicesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterProfileState
     */
    public enum FilterProfileState_profilesGetCollection: String { 
        case active = "ACTIVE"
        case invalid = "INVALID"
    }

    /**
     * enum for parameter filterProfileType
     */
    public enum FilterProfileType_profilesGetCollection: String { 
        case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
        case iosAppStore = "IOS_APP_STORE"
        case iosAppAdhoc = "IOS_APP_ADHOC"
        case iosAppInhouse = "IOS_APP_INHOUSE"
        case macAppDevelopment = "MAC_APP_DEVELOPMENT"
        case macAppStore = "MAC_APP_STORE"
        case macAppDirect = "MAC_APP_DIRECT"
        case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
        case tvosAppStore = "TVOS_APP_STORE"
        case tvosAppAdhoc = "TVOS_APP_ADHOC"
        case tvosAppInhouse = "TVOS_APP_INHOUSE"
        case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
        case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
        case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_profilesGetCollection: String { 
        case _id = "id"
        case id = "-id"
        case name = "name"
        case name_3 = "-name"
        case profilestate = "profileState"
        case profilestate_5 = "-profileState"
        case profiletype = "profileType"
        case profiletype_7 = "-profileType"
    }

    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_profilesGetCollection: String { 
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**
     * enum for parameter include
     */
    public enum Include_profilesGetCollection: String { 
        case bundleid = "bundleId"
        case certificates = "certificates"
        case devices = "devices"
    }

    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_profilesGetCollection: String { 
        case certificatecontent = "certificateContent"
        case certificatetype = "certificateType"
        case csrcontent = "csrContent"
        case displayname = "displayName"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case serialnumber = "serialNumber"
    }

    /**
     * enum for parameter fieldsDevices
     */
    public enum FieldsDevices_profilesGetCollection: String { 
        case addeddate = "addedDate"
        case deviceclass = "deviceClass"
        case model = "model"
        case name = "name"
        case platform = "platform"
        case status = "status"
        case udid = "udid"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_profilesGetCollection: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**

     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterProfileState: (query) filter by attribute &#x27;profileState&#x27; (optional)
     - parameter filterProfileType: (query) filter by attribute &#x27;profileType&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilesGetCollection(filterName: [String]? = nil, filterProfileState: [String]? = nil, filterProfileType: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsProfiles: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsCertificates: [String]? = nil, fieldsDevices: [String]? = nil, fieldsBundleIds: [String]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil, completion: @escaping ((_ data: ProfilesResponse?,_ error: Error?) -> Void)) {
        profilesGetCollectionWithRequestBuilder(filterName: filterName, filterProfileState: filterProfileState, filterProfileType: filterProfileType, filterId: filterId, sort: sort, fieldsProfiles: fieldsProfiles, limit: limit, include: include, fieldsCertificates: fieldsCertificates, fieldsDevices: fieldsDevices, fieldsBundleIds: fieldsBundleIds, limitCertificates: limitCertificates, limitDevices: limitDevices).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/profiles
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "certificates" : {
        "data" : [ {
          "id" : "id",
          "type" : "certificates"
        }, {
          "id" : "id",
          "type" : "certificates"
        } ]
      },
      "devices" : {
        "data" : [ {
          "id" : "id",
          "type" : "devices"
        }, {
          "id" : "id",
          "type" : "devices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "profileState" : "ACTIVE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "profileType" : "IOS_APP_DEVELOPMENT",
      "name" : "name",
      "profileContent" : "profileContent",
      "uuid" : "uuid",
      "platform" : "IOS",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "profiles"
  }, {
    "relationships" : {
      "certificates" : {
        "data" : [ {
          "id" : "id",
          "type" : "certificates"
        }, {
          "id" : "id",
          "type" : "certificates"
        } ]
      },
      "devices" : {
        "data" : [ {
          "id" : "id",
          "type" : "devices"
        }, {
          "id" : "id",
          "type" : "devices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "profileState" : "ACTIVE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "profileType" : "IOS_APP_DEVELOPMENT",
      "name" : "name",
      "profileContent" : "profileContent",
      "uuid" : "uuid",
      "platform" : "IOS",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "profiles"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter filterName: (query) filter by attribute &#x27;name&#x27; (optional)
     - parameter filterProfileState: (query) filter by attribute &#x27;profileState&#x27; (optional)
     - parameter filterProfileType: (query) filter by attribute &#x27;profileType&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)

     - returns: RequestBuilder<ProfilesResponse> 
     */
    open class func profilesGetCollectionWithRequestBuilder(filterName: [String]? = nil, filterProfileState: [String]? = nil, filterProfileType: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsProfiles: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsCertificates: [String]? = nil, fieldsDevices: [String]? = nil, fieldsBundleIds: [String]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil) -> RequestBuilder<ProfilesResponse> {
        let path = "/v1/profiles"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[name]": filterName, 
                        "filter[profileState]": filterProfileState, 
                        "filter[profileType]": filterProfileType, 
                        "filter[id]": filterId, 
                        "sort": sort, 
                        "fields[profiles]": fieldsProfiles, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[certificates]": fieldsCertificates, 
                        "fields[devices]": fieldsDevices, 
                        "fields[bundleIds]": fieldsBundleIds, 
                        "limit[certificates]": limitCertificates?.encodeToJSON(), 
                        "limit[devices]": limitDevices?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ProfilesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsProfiles
     */
    public enum FieldsProfiles_profilesGetInstance: String { 
        case bundleid = "bundleId"
        case certificates = "certificates"
        case createddate = "createdDate"
        case devices = "devices"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case profilecontent = "profileContent"
        case profilestate = "profileState"
        case profiletype = "profileType"
        case uuid = "uuid"
    }

    /**
     * enum for parameter include
     */
    public enum Include_profilesGetInstance: String { 
        case bundleid = "bundleId"
        case certificates = "certificates"
        case devices = "devices"
    }

    /**
     * enum for parameter fieldsCertificates
     */
    public enum FieldsCertificates_profilesGetInstance: String { 
        case certificatecontent = "certificateContent"
        case certificatetype = "certificateType"
        case csrcontent = "csrContent"
        case displayname = "displayName"
        case expirationdate = "expirationDate"
        case name = "name"
        case platform = "platform"
        case serialnumber = "serialNumber"
    }

    /**
     * enum for parameter fieldsDevices
     */
    public enum FieldsDevices_profilesGetInstance: String { 
        case addeddate = "addedDate"
        case deviceclass = "deviceClass"
        case model = "model"
        case name = "name"
        case platform = "platform"
        case status = "status"
        case udid = "udid"
    }

    /**
     * enum for parameter fieldsBundleIds
     */
    public enum FieldsBundleIds_profilesGetInstance: String { 
        case app = "app"
        case bundleidcapabilities = "bundleIdCapabilities"
        case identifier = "identifier"
        case name = "name"
        case platform = "platform"
        case profiles = "profiles"
        case seedid = "seedId"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func profilesGetInstance(_id: String, fieldsProfiles: [String]? = nil, include: [String]? = nil, fieldsCertificates: [String]? = nil, fieldsDevices: [String]? = nil, fieldsBundleIds: [String]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil, completion: @escaping ((_ data: ProfileResponse?,_ error: Error?) -> Void)) {
        profilesGetInstanceWithRequestBuilder(_id: _id, fieldsProfiles: fieldsProfiles, include: include, fieldsCertificates: fieldsCertificates, fieldsDevices: fieldsDevices, fieldsBundleIds: fieldsBundleIds, limitCertificates: limitCertificates, limitDevices: limitDevices).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/profiles/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "certificates" : {
        "data" : [ {
          "id" : "id",
          "type" : "certificates"
        }, {
          "id" : "id",
          "type" : "certificates"
        } ]
      },
      "devices" : {
        "data" : [ {
          "id" : "id",
          "type" : "devices"
        }, {
          "id" : "id",
          "type" : "devices"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "bundleId" : {
        "data" : {
          "id" : "id",
          "type" : "bundleIds"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "profileState" : "ACTIVE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "profileType" : "IOS_APP_DEVELOPMENT",
      "name" : "name",
      "profileContent" : "profileContent",
      "uuid" : "uuid",
      "platform" : "IOS",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "profiles"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsProfiles: (query) the fields to include for returned resources of type profiles (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCertificates: (query) the fields to include for returned resources of type certificates (optional)
     - parameter fieldsDevices: (query) the fields to include for returned resources of type devices (optional)
     - parameter fieldsBundleIds: (query) the fields to include for returned resources of type bundleIds (optional)
     - parameter limitCertificates: (query) maximum number of related certificates returned (when they are included) (optional)
     - parameter limitDevices: (query) maximum number of related devices returned (when they are included) (optional)

     - returns: RequestBuilder<ProfileResponse> 
     */
    open class func profilesGetInstanceWithRequestBuilder(_id: String, fieldsProfiles: [String]? = nil, include: [String]? = nil, fieldsCertificates: [String]? = nil, fieldsDevices: [String]? = nil, fieldsBundleIds: [String]? = nil, limitCertificates: Int? = nil, limitDevices: Int? = nil) -> RequestBuilder<ProfileResponse> {
        var path = "/v1/profiles/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[profiles]": fieldsProfiles, 
                        "include": include, 
                        "fields[certificates]": fieldsCertificates, 
                        "fields[devices]": fieldsDevices, 
                        "fields[bundleIds]": fieldsBundleIds, 
                        "limit[certificates]": limitCertificates?.encodeToJSON(), 
                        "limit[devices]": limitDevices?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ProfileResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
