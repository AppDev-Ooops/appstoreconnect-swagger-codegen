//
// BetaAppClipInvocationLocalizationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BetaAppClipInvocationLocalizationsAPI {
    /**

     - parameter body: (body) BetaAppClipInvocationLocalization representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func betaAppClipInvocationLocalizationsCreateInstance(body: BetaAppClipInvocationLocalizationCreateRequest, completion: @escaping ((_ data: BetaAppClipInvocationLocalizationResponse?,_ error: Error?) -> Void)) {
        betaAppClipInvocationLocalizationsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/betaAppClipInvocationLocalizations
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "title" : "title",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppClipInvocationLocalizations"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter body: (body) BetaAppClipInvocationLocalization representation 

     - returns: RequestBuilder<BetaAppClipInvocationLocalizationResponse> 
     */
    open class func betaAppClipInvocationLocalizationsCreateInstanceWithRequestBuilder(body: BetaAppClipInvocationLocalizationCreateRequest) -> RequestBuilder<BetaAppClipInvocationLocalizationResponse> {
        let path = "/v1/betaAppClipInvocationLocalizations"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BetaAppClipInvocationLocalizationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func betaAppClipInvocationLocalizationsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        betaAppClipInvocationLocalizationsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/betaAppClipInvocationLocalizations/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func betaAppClipInvocationLocalizationsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/betaAppClipInvocationLocalizations/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) BetaAppClipInvocationLocalization representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func betaAppClipInvocationLocalizationsUpdateInstance(body: BetaAppClipInvocationLocalizationUpdateRequest, _id: String, completion: @escaping ((_ data: BetaAppClipInvocationLocalizationResponse?,_ error: Error?) -> Void)) {
        betaAppClipInvocationLocalizationsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/betaAppClipInvocationLocalizations/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "attributes" : {
      "title" : "title",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppClipInvocationLocalizations"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter body: (body) BetaAppClipInvocationLocalization representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<BetaAppClipInvocationLocalizationResponse> 
     */
    open class func betaAppClipInvocationLocalizationsUpdateInstanceWithRequestBuilder(body: BetaAppClipInvocationLocalizationUpdateRequest, _id: String) -> RequestBuilder<BetaAppClipInvocationLocalizationResponse> {
        var path = "/v1/betaAppClipInvocationLocalizations/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BetaAppClipInvocationLocalizationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
