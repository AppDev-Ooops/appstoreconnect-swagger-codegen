//
// ReviewSubmissionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class ReviewSubmissionsAPI {
    /**

     - parameter body: (body) ReviewSubmission representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reviewSubmissionsCreateInstance(body: ReviewSubmissionCreateRequest, completion: @escaping ((_ data: ReviewSubmissionResponse?,_ error: Error?) -> Void)) {
        reviewSubmissionsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/reviewSubmissions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionForReview" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "items" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        }, {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) ReviewSubmission representation 

     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsCreateInstanceWithRequestBuilder(body: ReviewSubmissionCreateRequest) -> RequestBuilder<ReviewSubmissionResponse> {
        let path = "/v1/reviewSubmissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_reviewSubmissionsGetCollection: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter filterState
     */
    public enum FilterState_reviewSubmissionsGetCollection: String { 
        case readyForReview = "READY_FOR_REVIEW"
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case unresolvedIssues = "UNRESOLVED_ISSUES"
        case canceling = "CANCELING"
        case completing = "COMPLETING"
        case complete = "COMPLETE"
    }

    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_reviewSubmissionsGetCollection: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter include
     */
    public enum Include_reviewSubmissionsGetCollection: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case items = "items"
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_reviewSubmissionsGetCollection: String { 
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appevent = "appEvent"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case removed = "removed"
        case resolved = "resolved"
        case reviewsubmission = "reviewSubmission"
        case state = "state"
    }

    /**

     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reviewSubmissionsGetCollection(filterApp: [String], filterPlatform: [String]? = nil, filterState: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, limitItems: Int? = nil, completion: @escaping ((_ data: ReviewSubmissionsResponse?,_ error: Error?) -> Void)) {
        reviewSubmissionsGetCollectionWithRequestBuilder(filterApp: filterApp, filterPlatform: filterPlatform, filterState: filterState, fieldsReviewSubmissions: fieldsReviewSubmissions, limit: limit, include: include, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, limitItems: limitItems).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/reviewSubmissions
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionForReview" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "items" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        }, {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissions"
  }, {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionForReview" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "items" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        }, {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissions"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; 
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter filterState: (query) filter by attribute &#x27;state&#x27; (optional)
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)

     - returns: RequestBuilder<ReviewSubmissionsResponse> 
     */
    open class func reviewSubmissionsGetCollectionWithRequestBuilder(filterApp: [String], filterPlatform: [String]? = nil, filterState: [String]? = nil, fieldsReviewSubmissions: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, limitItems: Int? = nil) -> RequestBuilder<ReviewSubmissionsResponse> {
        let path = "/v1/reviewSubmissions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[platform]": filterPlatform, 
                        "filter[state]": filterState, 
                        "filter[app]": filterApp, 
                        "fields[reviewSubmissions]": fieldsReviewSubmissions, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[reviewSubmissionItems]": fieldsReviewSubmissionItems, 
                        "limit[items]": limitItems?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ReviewSubmissionsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsReviewSubmissions
     */
    public enum FieldsReviewSubmissions_reviewSubmissionsGetInstance: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case canceled = "canceled"
        case items = "items"
        case platform = "platform"
        case state = "state"
        case submitted = "submitted"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter include
     */
    public enum Include_reviewSubmissionsGetInstance: String { 
        case app = "app"
        case appstoreversionforreview = "appStoreVersionForReview"
        case items = "items"
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_reviewSubmissionsGetInstance: String { 
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appevent = "appEvent"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case removed = "removed"
        case resolved = "resolved"
        case reviewsubmission = "reviewSubmission"
        case state = "state"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reviewSubmissionsGetInstance(_id: String, fieldsReviewSubmissions: [String]? = nil, include: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, limitItems: Int? = nil, completion: @escaping ((_ data: ReviewSubmissionResponse?,_ error: Error?) -> Void)) {
        reviewSubmissionsGetInstanceWithRequestBuilder(_id: _id, fieldsReviewSubmissions: fieldsReviewSubmissions, include: include, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, limitItems: limitItems).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/reviewSubmissions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionForReview" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "items" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        }, {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsReviewSubmissions: (query) the fields to include for returned resources of type reviewSubmissions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter limitItems: (query) maximum number of related items returned (when they are included) (optional)

     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsGetInstanceWithRequestBuilder(_id: String, fieldsReviewSubmissions: [String]? = nil, include: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, limitItems: Int? = nil) -> RequestBuilder<ReviewSubmissionResponse> {
        var path = "/v1/reviewSubmissions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[reviewSubmissions]": fieldsReviewSubmissions, 
                        "include": include, 
                        "fields[reviewSubmissionItems]": fieldsReviewSubmissionItems, 
                        "limit[items]": limitItems?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_reviewSubmissionsItemsGetToManyRelated: String { 
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case enddate = "endDate"
        case name = "name"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsReviewSubmissionItems
     */
    public enum FieldsReviewSubmissionItems_reviewSubmissionsItemsGetToManyRelated: String { 
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appevent = "appEvent"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
        case removed = "removed"
        case resolved = "resolved"
        case reviewsubmission = "reviewSubmission"
        case state = "state"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_reviewSubmissionsItemsGetToManyRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsAppCustomProductPageVersions
     */
    public enum FieldsAppCustomProductPageVersions_reviewSubmissionsItemsGetToManyRelated: String { 
        case appcustomproductpage = "appCustomProductPage"
        case appcustomproductpagelocalizations = "appCustomProductPageLocalizations"
        case state = "state"
        case version = "version"
    }

    /**
     * enum for parameter fieldsAppEvents
     */
    public enum FieldsAppEvents_reviewSubmissionsItemsGetToManyRelated: String { 
        case app = "app"
        case archivedterritoryschedules = "archivedTerritorySchedules"
        case badge = "badge"
        case deeplink = "deepLink"
        case eventstate = "eventState"
        case localizations = "localizations"
        case primarylocale = "primaryLocale"
        case priority = "priority"
        case purchaserequirement = "purchaseRequirement"
        case purpose = "purpose"
        case referencename = "referenceName"
        case territoryschedules = "territorySchedules"
    }

    /**
     * enum for parameter include
     */
    public enum Include_reviewSubmissionsItemsGetToManyRelated: String { 
        case appcustomproductpageversion = "appCustomProductPageVersion"
        case appevent = "appEvent"
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperiment = "appStoreVersionExperiment"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reviewSubmissionsItemsGetToManyRelated(_id: String, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPageVersions: [String]? = nil, fieldsAppEvents: [String]? = nil, limit: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: ReviewSubmissionItemsResponse?,_ error: Error?) -> Void)) {
        reviewSubmissionsItemsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsReviewSubmissionItems: fieldsReviewSubmissionItems, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsAppCustomProductPageVersions: fieldsAppCustomProductPageVersions, fieldsAppEvents: fieldsAppEvents, limit: limit, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/reviewSubmissions/{id}/items
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appCustomProductPageVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appCustomProductPageVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appEvent" : {
        "data" : {
          "id" : "id",
          "type" : "appEvents"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiment" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissionItems"
  }, {
    "relationships" : {
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appCustomProductPageVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appCustomProductPageVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appEvent" : {
        "data" : {
          "id" : "id",
          "type" : "appEvents"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiment" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissionItems"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsReviewSubmissionItems: (query) the fields to include for returned resources of type reviewSubmissionItems (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsAppCustomProductPageVersions: (query) the fields to include for returned resources of type appCustomProductPageVersions (optional)
     - parameter fieldsAppEvents: (query) the fields to include for returned resources of type appEvents (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ReviewSubmissionItemsResponse> 
     */
    open class func reviewSubmissionsItemsGetToManyRelatedWithRequestBuilder(_id: String, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsReviewSubmissionItems: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsAppCustomProductPageVersions: [String]? = nil, fieldsAppEvents: [String]? = nil, limit: Int? = nil, include: [String]? = nil) -> RequestBuilder<ReviewSubmissionItemsResponse> {
        var path = "/v1/reviewSubmissions/{id}/items"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appStoreVersionExperiments]": fieldsAppStoreVersionExperiments, 
                        "fields[reviewSubmissionItems]": fieldsReviewSubmissionItems, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[appCustomProductPageVersions]": fieldsAppCustomProductPageVersions, 
                        "fields[appEvents]": fieldsAppEvents, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ReviewSubmissionItemsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) ReviewSubmission representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reviewSubmissionsUpdateInstance(body: ReviewSubmissionUpdateRequest, _id: String, completion: @escaping ((_ data: ReviewSubmissionResponse?,_ error: Error?) -> Void)) {
        reviewSubmissionsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/reviewSubmissions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionForReview" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "items" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        }, {
          "id" : "id",
          "type" : "reviewSubmissionItems"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "state" : "READY_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "reviewSubmissions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) ReviewSubmission representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<ReviewSubmissionResponse> 
     */
    open class func reviewSubmissionsUpdateInstanceWithRequestBuilder(body: ReviewSubmissionUpdateRequest, _id: String) -> RequestBuilder<ReviewSubmissionResponse> {
        var path = "/v1/reviewSubmissions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ReviewSubmissionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
