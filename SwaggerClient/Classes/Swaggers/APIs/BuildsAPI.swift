//
// BuildsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BuildsAPI {
    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_buildsAppEncryptionDeclarationGetToOneRelated: String { 
        case app = "app"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelated(_id: String, fieldsAppEncryptionDeclarations: [String]? = nil, completion: @escaping ((_ data: AppEncryptionDeclarationResponse?,_ error: Error?) -> Void)) {
        buildsAppEncryptionDeclarationGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/appEncryptionDeclaration
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "availableOnFrenchStore" : true,
      "documentType" : "documentType",
      "documentUrl" : "documentUrl",
      "usesEncryption" : true,
      "exempt" : true,
      "containsThirdPartyCryptography" : true,
      "documentName" : "documentName",
      "appEncryptionDeclarationState" : "IN_REVIEW",
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "platform" : "IOS",
      "containsProprietaryCryptography" : true,
      "codeValue" : "codeValue"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "appEncryptionDeclarations"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)

     - returns: RequestBuilder<AppEncryptionDeclarationResponse> 
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelatedWithRequestBuilder(_id: String, fieldsAppEncryptionDeclarations: [String]? = nil) -> RequestBuilder<AppEncryptionDeclarationResponse> {
        var path = "/v1/builds/{id}/appEncryptionDeclaration"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appEncryptionDeclarations]": fieldsAppEncryptionDeclarations
        ])


        let requestBuilder: RequestBuilder<AppEncryptionDeclarationResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelationship(_id: String, completion: @escaping ((_ data: BuildAppEncryptionDeclarationLinkageResponse?,_ error: Error?) -> Void)) {
        buildsAppEncryptionDeclarationGetToOneRelationshipWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/relationships/appEncryptionDeclaration
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "id" : "id",
    "type" : "appEncryptionDeclarations"
  },
  "links" : {
    "self" : "self"
  }
}}]
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse> 
     */
    open class func buildsAppEncryptionDeclarationGetToOneRelationshipWithRequestBuilder(_id: String) -> RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse> {
        var path = "/v1/builds/{id}/relationships/appEncryptionDeclaration"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BuildAppEncryptionDeclarationLinkageResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) Related linkage 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsAppEncryptionDeclarationUpdateToOneRelationship(body: BuildAppEncryptionDeclarationLinkageRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        buildsAppEncryptionDeclarationUpdateToOneRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PATCH /v1/builds/{id}/relationships/appEncryptionDeclaration
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) Related linkage 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func buildsAppEncryptionDeclarationUpdateToOneRelationshipWithRequestBuilder(body: BuildAppEncryptionDeclarationLinkageRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/builds/{id}/relationships/appEncryptionDeclaration"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsAppGetToOneRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsAppGetToOneRelated(_id: String, fieldsApps: [String]? = nil, completion: @escaping ((_ data: AppResponse?,_ error: Error?) -> Void)) {
        buildsAppGetToOneRelatedWithRequestBuilder(_id: _id, fieldsApps: fieldsApps).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/app
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appEvents" : {
        "data" : [ {
          "id" : "id",
          "type" : "appEvents"
        }, {
          "id" : "id",
          "type" : "appEvents"
        } ]
      },
      "reviewSubmissions" : {
        "data" : [ {
          "id" : "id",
          "type" : "reviewSubmissions"
        }, {
          "id" : "id",
          "type" : "reviewSubmissions"
        } ]
      },
      "endUserLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "endUserLicenseAgreements"
        }
      },
      "appInfos" : {
        "data" : [ {
          "id" : "id",
          "type" : "appInfos"
        }, {
          "id" : "id",
          "type" : "appInfos"
        } ]
      },
      "preReleaseVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "preReleaseVersions"
        }, {
          "id" : "id",
          "type" : "preReleaseVersions"
        } ]
      },
      "appCustomProductPages" : {
        "data" : [ {
          "id" : "id",
          "type" : "appCustomProductPages"
        }, {
          "id" : "id",
          "type" : "appCustomProductPages"
        } ]
      },
      "inAppPurchasesV2" : {
        "data" : [ null, null ]
      },
      "inAppPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "inAppPurchases"
        }, {
          "id" : "id",
          "type" : "inAppPurchases"
        } ]
      },
      "appClips" : {
        "data" : [ {
          "id" : "id",
          "type" : "appClips"
        }, {
          "id" : "id",
          "type" : "appClips"
        } ]
      },
      "ciProduct" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaLicenseAgreement" : {
        "data" : {
          "id" : "id",
          "type" : "betaLicenseAgreements"
        }
      },
      "betaAppReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewDetails"
        }
      },
      "promotedPurchases" : {
        "data" : [ {
          "id" : "id",
          "type" : "promotedPurchases"
        }, {
          "id" : "id",
          "type" : "promotedPurchases"
        } ]
      },
      "subscriptionGracePeriod" : {
        "data" : {
          "id" : "id",
          "type" : "subscriptionGracePeriods"
        }
      },
      "subscriptionGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "subscriptionGroups"
        }, {
          "id" : "id",
          "type" : "subscriptionGroups"
        } ]
      },
      "gameCenterEnabledVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        }, {
          "id" : "id",
          "type" : "gameCenterEnabledVersions"
        } ]
      },
      "appStoreVersions" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersions"
        }, {
          "id" : "id",
          "type" : "appStoreVersions"
        } ]
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "preOrder" : {
        "data" : {
          "id" : "id",
          "type" : "appPreOrders"
        }
      },
      "betaAppLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaAppLocalizations"
        }, {
          "id" : "id",
          "type" : "betaAppLocalizations"
        } ]
      },
      "availableTerritories" : {
        "data" : [ {
          "id" : "id",
          "type" : "territories"
        }, {
          "id" : "id",
          "type" : "territories"
        } ]
      },
      "prices" : {
        "data" : [ {
          "id" : "id",
          "type" : "appPrices"
        }, {
          "id" : "id",
          "type" : "appPrices"
        } ]
      }
    },
    "attributes" : {
      "name" : "name",
      "bundleId" : "bundleId",
      "isOrEverWasMadeForKids" : true,
      "subscriptionStatusUrlForSandbox" : "http://example.com/aeiou",
      "sku" : "sku",
      "subscriptionStatusUrl" : "http://example.com/aeiou",
      "primaryLocale" : "primaryLocale",
      "availableInNewTerritories" : true,
      "contentRightsDeclaration" : "DOES_NOT_USE_THIRD_PARTY_CONTENT",
      "subscriptionStatusUrlVersion" : "V1"
    },
    "id" : "id",
    "type" : "apps"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)

     - returns: RequestBuilder<AppResponse> 
     */
    open class func buildsAppGetToOneRelatedWithRequestBuilder(_id: String, fieldsApps: [String]? = nil) -> RequestBuilder<AppResponse> {
        var path = "/v1/builds/{id}/app"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[apps]": fieldsApps
        ])


        let requestBuilder: RequestBuilder<AppResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsAppStoreVersionExperiments
     */
    public enum FieldsAppStoreVersionExperiments_buildsAppStoreVersionGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
        case appstoreversionexperimenttreatments = "appStoreVersionExperimentTreatments"
        case enddate = "endDate"
        case name = "name"
        case reviewrequired = "reviewRequired"
        case startdate = "startDate"
        case started = "started"
        case state = "state"
        case trafficproportion = "trafficProportion"
    }

    /**
     * enum for parameter fieldsAgeRatingDeclarations
     */
    public enum FieldsAgeRatingDeclarations_buildsAppStoreVersionGetToOneRelated: String { 
        case alcoholtobaccoordruguseorreferences = "alcoholTobaccoOrDrugUseOrReferences"
        case contests = "contests"
        case gambling = "gambling"
        case gamblingandcontests = "gamblingAndContests"
        case gamblingsimulated = "gamblingSimulated"
        case horrororfearthemes = "horrorOrFearThemes"
        case kidsageband = "kidsAgeBand"
        case matureorsuggestivethemes = "matureOrSuggestiveThemes"
        case medicalortreatmentinformation = "medicalOrTreatmentInformation"
        case profanityorcrudehumor = "profanityOrCrudeHumor"
        case seventeenplus = "seventeenPlus"
        case sexualcontentgraphicandnudity = "sexualContentGraphicAndNudity"
        case sexualcontentornudity = "sexualContentOrNudity"
        case unrestrictedwebaccess = "unrestrictedWebAccess"
        case violencecartoonorfantasy = "violenceCartoonOrFantasy"
        case violencerealistic = "violenceRealistic"
        case violencerealisticprolongedgraphicorsadistic = "violenceRealisticProlongedGraphicOrSadistic"
    }

    /**
     * enum for parameter fieldsAppStoreVersionSubmissions
     */
    public enum FieldsAppStoreVersionSubmissions_buildsAppStoreVersionGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreReviewDetails
     */
    public enum FieldsAppStoreReviewDetails_buildsAppStoreVersionGetToOneRelated: String { 
        case appstorereviewattachments = "appStoreReviewAttachments"
        case appstoreversion = "appStoreVersion"
        case contactemail = "contactEmail"
        case contactfirstname = "contactFirstName"
        case contactlastname = "contactLastName"
        case contactphone = "contactPhone"
        case demoaccountname = "demoAccountName"
        case demoaccountpassword = "demoAccountPassword"
        case demoaccountrequired = "demoAccountRequired"
        case notes = "notes"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_buildsAppStoreVersionGetToOneRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsAppStoreVersionGetToOneRelated: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsRoutingAppCoverages
     */
    public enum FieldsRoutingAppCoverages_buildsAppStoreVersionGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
        case assetdeliverystate = "assetDeliveryState"
        case filename = "fileName"
        case filesize = "fileSize"
        case sourcefilechecksum = "sourceFileChecksum"
        case uploadoperations = "uploadOperations"
        case uploaded = "uploaded"
    }

    /**
     * enum for parameter fieldsAppClipDefaultExperiences
     */
    public enum FieldsAppClipDefaultExperiences_buildsAppStoreVersionGetToOneRelated: String { 
        case action = "action"
        case appclip = "appClip"
        case appclipappstorereviewdetail = "appClipAppStoreReviewDetail"
        case appclipdefaultexperiencelocalizations = "appClipDefaultExperienceLocalizations"
        case appclipdefaultexperiencetemplate = "appClipDefaultExperienceTemplate"
        case releasewithappstoreversion = "releaseWithAppStoreVersion"
    }

    /**
     * enum for parameter fieldsAppStoreVersionPhasedReleases
     */
    public enum FieldsAppStoreVersionPhasedReleases_buildsAppStoreVersionGetToOneRelated: String { 
        case appstoreversion = "appStoreVersion"
        case currentdaynumber = "currentDayNumber"
        case phasedreleasestate = "phasedReleaseState"
        case startdate = "startDate"
        case totalpauseduration = "totalPauseDuration"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildsAppStoreVersionGetToOneRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter fieldsAppStoreVersionLocalizations
     */
    public enum FieldsAppStoreVersionLocalizations_buildsAppStoreVersionGetToOneRelated: String { 
        case apppreviewsets = "appPreviewSets"
        case appscreenshotsets = "appScreenshotSets"
        case appstoreversion = "appStoreVersion"
        case _description = "description"
        case keywords = "keywords"
        case locale = "locale"
        case marketingurl = "marketingUrl"
        case promotionaltext = "promotionalText"
        case supporturl = "supportUrl"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildsAppStoreVersionGetToOneRelated: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case routingappcoverage = "routingAppCoverage"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsAppStoreVersionGetToOneRelated(_id: String, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAgeRatingDeclarations: [String]? = nil, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsApps: [String]? = nil, fieldsRoutingAppCoverages: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsAppStoreVersionPhasedReleases: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsAppStoreVersionLocalizations: [String]? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: AppStoreVersionResponse?,_ error: Error?) -> Void)) {
        buildsAppStoreVersionGetToOneRelatedWithRequestBuilder(_id: _id, fieldsAppStoreVersionExperiments: fieldsAppStoreVersionExperiments, fieldsAgeRatingDeclarations: fieldsAgeRatingDeclarations, fieldsAppStoreVersionSubmissions: fieldsAppStoreVersionSubmissions, fieldsAppStoreReviewDetails: fieldsAppStoreReviewDetails, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsApps: fieldsApps, fieldsRoutingAppCoverages: fieldsRoutingAppCoverages, fieldsAppClipDefaultExperiences: fieldsAppClipDefaultExperiences, fieldsAppStoreVersionPhasedReleases: fieldsAppStoreVersionPhasedReleases, fieldsBuilds: fieldsBuilds, fieldsAppStoreVersionLocalizations: fieldsAppStoreVersionLocalizations, limitAppStoreVersionLocalizations: limitAppStoreVersionLocalizations, limitAppStoreVersionExperiments: limitAppStoreVersionExperiments, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/appStoreVersion
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        }, {
          "id" : "id",
          "type" : "appStoreVersionLocalizations"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "appStoreVersionPhasedRelease" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionPhasedReleases"
        }
      },
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      },
      "appStoreReviewDetail" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreReviewDetails"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appClipDefaultExperience" : {
        "data" : {
          "id" : "id",
          "type" : "appClipDefaultExperiences"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "appStoreVersionExperiments" : {
        "data" : [ {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        }, {
          "id" : "id",
          "type" : "appStoreVersionExperiments"
        } ]
      },
      "ageRatingDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "ageRatingDeclarations"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "routingAppCoverage" : {
        "data" : {
          "id" : "id",
          "type" : "routingAppCoverages"
        }
      },
      "appStoreVersionSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersionSubmissions"
        }
      }
    },
    "attributes" : {
      "copyright" : "copyright",
      "downloadable" : true,
      "earliestReleaseDate" : "2000-01-23T04:56:07.000+00:00",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "versionString" : "versionString",
      "releaseType" : "MANUAL",
      "appStoreState" : "ACCEPTED",
      "platform" : "IOS"
    },
    "id" : "id",
    "type" : "appStoreVersions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsAppStoreVersionExperiments: (query) the fields to include for returned resources of type appStoreVersionExperiments (optional)
     - parameter fieldsAgeRatingDeclarations: (query) the fields to include for returned resources of type ageRatingDeclarations (optional)
     - parameter fieldsAppStoreVersionSubmissions: (query) the fields to include for returned resources of type appStoreVersionSubmissions (optional)
     - parameter fieldsAppStoreReviewDetails: (query) the fields to include for returned resources of type appStoreReviewDetails (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsRoutingAppCoverages: (query) the fields to include for returned resources of type routingAppCoverages (optional)
     - parameter fieldsAppClipDefaultExperiences: (query) the fields to include for returned resources of type appClipDefaultExperiences (optional)
     - parameter fieldsAppStoreVersionPhasedReleases: (query) the fields to include for returned resources of type appStoreVersionPhasedReleases (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter fieldsAppStoreVersionLocalizations: (query) the fields to include for returned resources of type appStoreVersionLocalizations (optional)
     - parameter limitAppStoreVersionLocalizations: (query) maximum number of related appStoreVersionLocalizations returned (when they are included) (optional)
     - parameter limitAppStoreVersionExperiments: (query) maximum number of related appStoreVersionExperiments returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<AppStoreVersionResponse> 
     */
    open class func buildsAppStoreVersionGetToOneRelatedWithRequestBuilder(_id: String, fieldsAppStoreVersionExperiments: [String]? = nil, fieldsAgeRatingDeclarations: [String]? = nil, fieldsAppStoreVersionSubmissions: [String]? = nil, fieldsAppStoreReviewDetails: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsApps: [String]? = nil, fieldsRoutingAppCoverages: [String]? = nil, fieldsAppClipDefaultExperiences: [String]? = nil, fieldsAppStoreVersionPhasedReleases: [String]? = nil, fieldsBuilds: [String]? = nil, fieldsAppStoreVersionLocalizations: [String]? = nil, limitAppStoreVersionLocalizations: Int? = nil, limitAppStoreVersionExperiments: Int? = nil, include: [String]? = nil) -> RequestBuilder<AppStoreVersionResponse> {
        var path = "/v1/builds/{id}/appStoreVersion"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[appStoreVersionExperiments]": fieldsAppStoreVersionExperiments, 
                        "fields[ageRatingDeclarations]": fieldsAgeRatingDeclarations, 
                        "fields[appStoreVersionSubmissions]": fieldsAppStoreVersionSubmissions, 
                        "fields[appStoreReviewDetails]": fieldsAppStoreReviewDetails, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[apps]": fieldsApps, 
                        "fields[routingAppCoverages]": fieldsRoutingAppCoverages, 
                        "fields[appClipDefaultExperiences]": fieldsAppClipDefaultExperiences, 
                        "fields[appStoreVersionPhasedReleases]": fieldsAppStoreVersionPhasedReleases, 
                        "fields[builds]": fieldsBuilds, 
                        "fields[appStoreVersionLocalizations]": fieldsAppStoreVersionLocalizations, 
                        "limit[appStoreVersionLocalizations]": limitAppStoreVersionLocalizations?.encodeToJSON(), 
                        "limit[appStoreVersionExperiments]": limitAppStoreVersionExperiments?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<AppStoreVersionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_buildsBetaAppReviewSubmissionGetToOneRelated: String { 
        case betareviewstate = "betaReviewState"
        case build = "build"
        case submitteddate = "submittedDate"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsBetaAppReviewSubmissionGetToOneRelated(_id: String, fieldsBetaAppReviewSubmissions: [String]? = nil, completion: @escaping ((_ data: BetaAppReviewSubmissionResponse?,_ error: Error?) -> Void)) {
        buildsBetaAppReviewSubmissionGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/betaAppReviewSubmission
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "betaReviewState" : "WAITING_FOR_REVIEW",
      "submittedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaAppReviewSubmissions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)

     - returns: RequestBuilder<BetaAppReviewSubmissionResponse> 
     */
    open class func buildsBetaAppReviewSubmissionGetToOneRelatedWithRequestBuilder(_id: String, fieldsBetaAppReviewSubmissions: [String]? = nil) -> RequestBuilder<BetaAppReviewSubmissionResponse> {
        var path = "/v1/builds/{id}/betaAppReviewSubmission"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaAppReviewSubmissions]": fieldsBetaAppReviewSubmissions
        ])


        let requestBuilder: RequestBuilder<BetaAppReviewSubmissionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_buildsBetaBuildLocalizationsGetToManyRelated: String { 
        case build = "build"
        case locale = "locale"
        case whatsnew = "whatsNew"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsBetaBuildLocalizationsGetToManyRelated(_id: String, fieldsBetaBuildLocalizations: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: BetaBuildLocalizationsResponse?,_ error: Error?) -> Void)) {
        buildsBetaBuildLocalizationsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/betaBuildLocalizations
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "whatsNew" : "whatsNew",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaBuildLocalizations"
  }, {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "whatsNew" : "whatsNew",
      "locale" : "locale"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaBuildLocalizations"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BetaBuildLocalizationsResponse> 
     */
    open class func buildsBetaBuildLocalizationsGetToManyRelatedWithRequestBuilder(_id: String, fieldsBetaBuildLocalizations: [String]? = nil, limit: Int? = nil) -> RequestBuilder<BetaBuildLocalizationsResponse> {
        var path = "/v1/builds/{id}/betaBuildLocalizations"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaBuildLocalizations]": fieldsBetaBuildLocalizations, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BetaBuildLocalizationsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsBetaGroupsCreateToManyRelationship(body: BuildBetaGroupsLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        buildsBetaGroupsCreateToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/builds/{id}/relationships/betaGroups
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func buildsBetaGroupsCreateToManyRelationshipWithRequestBuilder(body: BuildBetaGroupsLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/builds/{id}/relationships/betaGroups"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsBetaGroupsDeleteToManyRelationship(body: BuildBetaGroupsLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        buildsBetaGroupsDeleteToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/builds/{id}/relationships/betaGroups
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func buildsBetaGroupsDeleteToManyRelationshipWithRequestBuilder(body: BuildBetaGroupsLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/builds/{id}/relationships/betaGroups"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildsBuildBetaDetailGetToOneRelated: String { 
        case autonotifyenabled = "autoNotifyEnabled"
        case build = "build"
        case externalbuildstate = "externalBuildState"
        case internalbuildstate = "internalBuildState"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsBuildBetaDetailGetToOneRelated(_id: String, fieldsBuildBetaDetails: [String]? = nil, completion: @escaping ((_ data: BuildBetaDetailResponse?,_ error: Error?) -> Void)) {
        buildsBuildBetaDetailGetToOneRelatedWithRequestBuilder(_id: _id, fieldsBuildBetaDetails: fieldsBuildBetaDetails).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/buildBetaDetail
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "build" : {
        "data" : {
          "id" : "id",
          "type" : "builds"
        }
      }
    },
    "attributes" : {
      "autoNotifyEnabled" : true,
      "internalBuildState" : "PROCESSING",
      "externalBuildState" : "PROCESSING"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "buildBetaDetails"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)

     - returns: RequestBuilder<BuildBetaDetailResponse> 
     */
    open class func buildsBuildBetaDetailGetToOneRelatedWithRequestBuilder(_id: String, fieldsBuildBetaDetails: [String]? = nil) -> RequestBuilder<BuildBetaDetailResponse> {
        var path = "/v1/builds/{id}/buildBetaDetail"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[buildBetaDetails]": fieldsBuildBetaDetails
        ])


        let requestBuilder: RequestBuilder<BuildBetaDetailResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterDiagnosticType
     */
    public enum FilterDiagnosticType_buildsDiagnosticSignaturesGetToManyRelated: String { 
        case diskWrites = "DISK_WRITES"
        case hangs = "HANGS"
    }

    /**
     * enum for parameter fieldsDiagnosticSignatures
     */
    public enum FieldsDiagnosticSignatures_buildsDiagnosticSignaturesGetToManyRelated: String { 
        case diagnostictype = "diagnosticType"
        case logs = "logs"
        case signature = "signature"
        case weight = "weight"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterDiagnosticType: (query) filter by attribute &#x27;diagnosticType&#x27; (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsDiagnosticSignaturesGetToManyRelated(_id: String, filterDiagnosticType: [String]? = nil, fieldsDiagnosticSignatures: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: DiagnosticSignaturesResponse?,_ error: Error?) -> Void)) {
        buildsDiagnosticSignaturesGetToManyRelatedWithRequestBuilder(_id: _id, filterDiagnosticType: filterDiagnosticType, fieldsDiagnosticSignatures: fieldsDiagnosticSignatures, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/diagnosticSignatures
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "diagnosticType" : "DISK_WRITES",
      "signature" : "signature",
      "weight" : 0.8008281904610115
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "diagnosticSignatures"
  }, {
    "attributes" : {
      "diagnosticType" : "DISK_WRITES",
      "signature" : "signature",
      "weight" : 0.8008281904610115
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "diagnosticSignatures"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterDiagnosticType: (query) filter by attribute &#x27;diagnosticType&#x27; (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<DiagnosticSignaturesResponse> 
     */
    open class func buildsDiagnosticSignaturesGetToManyRelatedWithRequestBuilder(_id: String, filterDiagnosticType: [String]? = nil, fieldsDiagnosticSignatures: [String]? = nil, limit: Int? = nil) -> RequestBuilder<DiagnosticSignaturesResponse> {
        var path = "/v1/builds/{id}/diagnosticSignatures"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[diagnosticType]": filterDiagnosticType, 
                        "fields[diagnosticSignatures]": fieldsDiagnosticSignatures, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<DiagnosticSignaturesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterBetaAppReviewSubmissionBetaReviewState
     */
    public enum FilterBetaAppReviewSubmissionBetaReviewState_buildsGetCollection: String { 
        case waitingForReview = "WAITING_FOR_REVIEW"
        case inReview = "IN_REVIEW"
        case rejected = "REJECTED"
        case approved = "APPROVED"
    }

    /**
     * enum for parameter filterBuildAudienceType
     */
    public enum FilterBuildAudienceType_buildsGetCollection: String { 
        case internalOnly = "INTERNAL_ONLY"
        case appStoreEligible = "APP_STORE_ELIGIBLE"
    }

    /**
     * enum for parameter filterPreReleaseVersionPlatform
     */
    public enum FilterPreReleaseVersionPlatform_buildsGetCollection: String { 
        case ios = "IOS"
        case macOs = "MAC_OS"
        case tvOs = "TV_OS"
    }

    /**
     * enum for parameter filterProcessingState
     */
    public enum FilterProcessingState_buildsGetCollection: String { 
        case processing = "PROCESSING"
        case failed = "FAILED"
        case invalid = "INVALID"
        case valid = "VALID"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_buildsGetCollection: String { 
        case prereleaseversion = "preReleaseVersion"
        case prereleaseversion_1 = "-preReleaseVersion"
        case uploadeddate = "uploadedDate"
        case uploadeddate_3 = "-uploadedDate"
        case version = "version"
        case version_5 = "-version"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildsGetCollection: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildsGetCollection: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case prereleaseversion = "preReleaseVersion"
    }

    /**
     * enum for parameter fieldsDiagnosticSignatures
     */
    public enum FieldsDiagnosticSignatures_buildsGetCollection: String { 
        case diagnostictype = "diagnosticType"
        case logs = "logs"
        case signature = "signature"
        case weight = "weight"
    }

    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_buildsGetCollection: String { 
        case iconasset = "iconAsset"
        case icontype = "iconType"
        case name = "name"
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildsGetCollection: String { 
        case autonotifyenabled = "autoNotifyEnabled"
        case build = "build"
        case externalbuildstate = "externalBuildState"
        case internalbuildstate = "internalBuildState"
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_buildsGetCollection: String { 
        case betareviewstate = "betaReviewState"
        case build = "build"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_buildsGetCollection: String { 
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
        case email = "email"
        case firstname = "firstName"
        case invitetype = "inviteType"
        case lastname = "lastName"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_buildsGetCollection: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_buildsGetCollection: String { 
        case build = "build"
        case locale = "locale"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_buildsGetCollection: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_buildsGetCollection: String { 
        case app = "app"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsGetCollection: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsPerfPowerMetrics
     */
    public enum FieldsPerfPowerMetrics_buildsGetCollection: String { 
        case devicetype = "deviceType"
        case metrictype = "metricType"
        case platform = "platform"
    }

    /**

     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#x27;betaAppReviewSubmission.betaReviewState&#x27; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#x27;buildAudienceType&#x27; (optional)
     - parameter filterExpired: (query) filter by attribute &#x27;expired&#x27; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#x27;preReleaseVersion.platform&#x27; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#x27;preReleaseVersion.version&#x27; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#x27;processingState&#x27; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#x27;usesNonExemptEncryption&#x27; (optional)
     - parameter filterVersion: (query) filter by attribute &#x27;version&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#x27;appStoreVersion&#x27; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#x27;betaGroups&#x27; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#x27;preReleaseVersion&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsGetCollection(filterBetaAppReviewSubmissionBetaReviewState: [String]? = nil, filterBuildAudienceType: [String]? = nil, filterExpired: [String]? = nil, filterPreReleaseVersionPlatform: [String]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterProcessingState: [String]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterVersion: [String]? = nil, filterApp: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterBetaGroups: [String]? = nil, filterPreReleaseVersion: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsBuilds: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsDiagnosticSignatures: [String]? = nil, fieldsBuildIcons: [String]? = nil, fieldsBuildBetaDetails: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, fieldsBetaTesters: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsBetaBuildLocalizations: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsAppEncryptionDeclarations: [String]? = nil, fieldsApps: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil, completion: @escaping ((_ data: BuildsResponse?,_ error: Error?) -> Void)) {
        buildsGetCollectionWithRequestBuilder(filterBetaAppReviewSubmissionBetaReviewState: filterBetaAppReviewSubmissionBetaReviewState, filterBuildAudienceType: filterBuildAudienceType, filterExpired: filterExpired, filterPreReleaseVersionPlatform: filterPreReleaseVersionPlatform, filterPreReleaseVersionVersion: filterPreReleaseVersionVersion, filterProcessingState: filterProcessingState, filterUsesNonExemptEncryption: filterUsesNonExemptEncryption, filterVersion: filterVersion, filterApp: filterApp, filterAppStoreVersion: filterAppStoreVersion, filterBetaGroups: filterBetaGroups, filterPreReleaseVersion: filterPreReleaseVersion, filterId: filterId, sort: sort, fieldsBuilds: fieldsBuilds, limit: limit, include: include, fieldsDiagnosticSignatures: fieldsDiagnosticSignatures, fieldsBuildIcons: fieldsBuildIcons, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, fieldsBetaTesters: fieldsBetaTesters, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsApps: fieldsApps, fieldsPerfPowerMetrics: fieldsPerfPowerMetrics, limitBetaBuildLocalizations: limitBetaBuildLocalizations, limitBetaGroups: limitBetaGroups, limitBuildBundles: limitBuildBundles, limitIcons: limitIcons, limitIndividualTesters: limitIndividualTesters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  }, {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter filterBetaAppReviewSubmissionBetaReviewState: (query) filter by attribute &#x27;betaAppReviewSubmission.betaReviewState&#x27; (optional)
     - parameter filterBuildAudienceType: (query) filter by attribute &#x27;buildAudienceType&#x27; (optional)
     - parameter filterExpired: (query) filter by attribute &#x27;expired&#x27; (optional)
     - parameter filterPreReleaseVersionPlatform: (query) filter by attribute &#x27;preReleaseVersion.platform&#x27; (optional)
     - parameter filterPreReleaseVersionVersion: (query) filter by attribute &#x27;preReleaseVersion.version&#x27; (optional)
     - parameter filterProcessingState: (query) filter by attribute &#x27;processingState&#x27; (optional)
     - parameter filterUsesNonExemptEncryption: (query) filter by attribute &#x27;usesNonExemptEncryption&#x27; (optional)
     - parameter filterVersion: (query) filter by attribute &#x27;version&#x27; (optional)
     - parameter filterApp: (query) filter by id(s) of related &#x27;app&#x27; (optional)
     - parameter filterAppStoreVersion: (query) filter by id(s) of related &#x27;appStoreVersion&#x27; (optional)
     - parameter filterBetaGroups: (query) filter by id(s) of related &#x27;betaGroups&#x27; (optional)
     - parameter filterPreReleaseVersion: (query) filter by id(s) of related &#x27;preReleaseVersion&#x27; (optional)
     - parameter filterId: (query) filter by id(s) (optional)
     - parameter sort: (query) comma-separated list of sort expressions; resources will be sorted as specified (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)

     - returns: RequestBuilder<BuildsResponse> 
     */
    open class func buildsGetCollectionWithRequestBuilder(filterBetaAppReviewSubmissionBetaReviewState: [String]? = nil, filterBuildAudienceType: [String]? = nil, filterExpired: [String]? = nil, filterPreReleaseVersionPlatform: [String]? = nil, filterPreReleaseVersionVersion: [String]? = nil, filterProcessingState: [String]? = nil, filterUsesNonExemptEncryption: [String]? = nil, filterVersion: [String]? = nil, filterApp: [String]? = nil, filterAppStoreVersion: [String]? = nil, filterBetaGroups: [String]? = nil, filterPreReleaseVersion: [String]? = nil, filterId: [String]? = nil, sort: [String]? = nil, fieldsBuilds: [String]? = nil, limit: Int? = nil, include: [String]? = nil, fieldsDiagnosticSignatures: [String]? = nil, fieldsBuildIcons: [String]? = nil, fieldsBuildBetaDetails: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, fieldsBetaTesters: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsBetaBuildLocalizations: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsAppEncryptionDeclarations: [String]? = nil, fieldsApps: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil) -> RequestBuilder<BuildsResponse> {
        let path = "/v1/builds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[betaAppReviewSubmission.betaReviewState]": filterBetaAppReviewSubmissionBetaReviewState, 
                        "filter[buildAudienceType]": filterBuildAudienceType, 
                        "filter[expired]": filterExpired, 
                        "filter[preReleaseVersion.platform]": filterPreReleaseVersionPlatform, 
                        "filter[preReleaseVersion.version]": filterPreReleaseVersionVersion, 
                        "filter[processingState]": filterProcessingState, 
                        "filter[usesNonExemptEncryption]": filterUsesNonExemptEncryption, 
                        "filter[version]": filterVersion, 
                        "filter[app]": filterApp, 
                        "filter[appStoreVersion]": filterAppStoreVersion, 
                        "filter[betaGroups]": filterBetaGroups, 
                        "filter[preReleaseVersion]": filterPreReleaseVersion, 
                        "filter[id]": filterId, 
                        "sort": sort, 
                        "fields[builds]": fieldsBuilds, 
                        "limit": limit?.encodeToJSON(), 
                        "include": include, 
                        "fields[diagnosticSignatures]": fieldsDiagnosticSignatures, 
                        "fields[buildIcons]": fieldsBuildIcons, 
                        "fields[buildBetaDetails]": fieldsBuildBetaDetails, 
                        "fields[betaAppReviewSubmissions]": fieldsBetaAppReviewSubmissions, 
                        "fields[betaTesters]": fieldsBetaTesters, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[betaBuildLocalizations]": fieldsBetaBuildLocalizations, 
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions, 
                        "fields[appEncryptionDeclarations]": fieldsAppEncryptionDeclarations, 
                        "fields[apps]": fieldsApps, 
                        "fields[perfPowerMetrics]": fieldsPerfPowerMetrics, 
                        "limit[betaBuildLocalizations]": limitBetaBuildLocalizations?.encodeToJSON(), 
                        "limit[betaGroups]": limitBetaGroups?.encodeToJSON(), 
                        "limit[buildBundles]": limitBuildBundles?.encodeToJSON(), 
                        "limit[icons]": limitIcons?.encodeToJSON(), 
                        "limit[individualTesters]": limitIndividualTesters?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BuildsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_buildsGetInstance: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_buildsGetInstance: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case prereleaseversion = "preReleaseVersion"
    }

    /**
     * enum for parameter fieldsDiagnosticSignatures
     */
    public enum FieldsDiagnosticSignatures_buildsGetInstance: String { 
        case diagnostictype = "diagnosticType"
        case logs = "logs"
        case signature = "signature"
        case weight = "weight"
    }

    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_buildsGetInstance: String { 
        case iconasset = "iconAsset"
        case icontype = "iconType"
        case name = "name"
    }

    /**
     * enum for parameter fieldsBuildBetaDetails
     */
    public enum FieldsBuildBetaDetails_buildsGetInstance: String { 
        case autonotifyenabled = "autoNotifyEnabled"
        case build = "build"
        case externalbuildstate = "externalBuildState"
        case internalbuildstate = "internalBuildState"
    }

    /**
     * enum for parameter fieldsBetaAppReviewSubmissions
     */
    public enum FieldsBetaAppReviewSubmissions_buildsGetInstance: String { 
        case betareviewstate = "betaReviewState"
        case build = "build"
        case submitteddate = "submittedDate"
    }

    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_buildsGetInstance: String { 
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
        case email = "email"
        case firstname = "firstName"
        case invitetype = "inviteType"
        case lastname = "lastName"
    }

    /**
     * enum for parameter fieldsAppStoreVersions
     */
    public enum FieldsAppStoreVersions_buildsGetInstance: String { 
        case ageratingdeclaration = "ageRatingDeclaration"
        case app = "app"
        case appclipdefaultexperience = "appClipDefaultExperience"
        case appstorereviewdetail = "appStoreReviewDetail"
        case appstorestate = "appStoreState"
        case appstoreversionexperiments = "appStoreVersionExperiments"
        case appstoreversionlocalizations = "appStoreVersionLocalizations"
        case appstoreversionphasedrelease = "appStoreVersionPhasedRelease"
        case appstoreversionsubmission = "appStoreVersionSubmission"
        case build = "build"
        case copyright = "copyright"
        case createddate = "createdDate"
        case customerreviews = "customerReviews"
        case downloadable = "downloadable"
        case earliestreleasedate = "earliestReleaseDate"
        case platform = "platform"
        case releasetype = "releaseType"
        case routingappcoverage = "routingAppCoverage"
        case versionstring = "versionString"
    }

    /**
     * enum for parameter fieldsBetaBuildLocalizations
     */
    public enum FieldsBetaBuildLocalizations_buildsGetInstance: String { 
        case build = "build"
        case locale = "locale"
        case whatsnew = "whatsNew"
    }

    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_buildsGetInstance: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**
     * enum for parameter fieldsAppEncryptionDeclarations
     */
    public enum FieldsAppEncryptionDeclarations_buildsGetInstance: String { 
        case app = "app"
        case appencryptiondeclarationstate = "appEncryptionDeclarationState"
        case availableonfrenchstore = "availableOnFrenchStore"
        case builds = "builds"
        case codevalue = "codeValue"
        case containsproprietarycryptography = "containsProprietaryCryptography"
        case containsthirdpartycryptography = "containsThirdPartyCryptography"
        case documentname = "documentName"
        case documenttype = "documentType"
        case documenturl = "documentUrl"
        case exempt = "exempt"
        case platform = "platform"
        case uploadeddate = "uploadedDate"
        case usesencryption = "usesEncryption"
    }

    /**
     * enum for parameter fieldsApps
     */
    public enum FieldsApps_buildsGetInstance: String { 
        case appclips = "appClips"
        case appcustomproductpages = "appCustomProductPages"
        case appevents = "appEvents"
        case appinfos = "appInfos"
        case appstoreversions = "appStoreVersions"
        case availableinnewterritories = "availableInNewTerritories"
        case availableterritories = "availableTerritories"
        case betaapplocalizations = "betaAppLocalizations"
        case betaappreviewdetail = "betaAppReviewDetail"
        case betagroups = "betaGroups"
        case betalicenseagreement = "betaLicenseAgreement"
        case betatesters = "betaTesters"
        case builds = "builds"
        case bundleid = "bundleId"
        case ciproduct = "ciProduct"
        case contentrightsdeclaration = "contentRightsDeclaration"
        case customerreviews = "customerReviews"
        case enduserlicenseagreement = "endUserLicenseAgreement"
        case gamecenterenabledversions = "gameCenterEnabledVersions"
        case inapppurchases = "inAppPurchases"
        case inapppurchasesv2 = "inAppPurchasesV2"
        case isoreverwasmadeforkids = "isOrEverWasMadeForKids"
        case name = "name"
        case perfpowermetrics = "perfPowerMetrics"
        case preorder = "preOrder"
        case prereleaseversions = "preReleaseVersions"
        case pricepoints = "pricePoints"
        case prices = "prices"
        case primarylocale = "primaryLocale"
        case promotedpurchases = "promotedPurchases"
        case reviewsubmissions = "reviewSubmissions"
        case sku = "sku"
        case subscriptiongraceperiod = "subscriptionGracePeriod"
        case subscriptiongroups = "subscriptionGroups"
        case subscriptionstatusurl = "subscriptionStatusUrl"
        case subscriptionstatusurlforsandbox = "subscriptionStatusUrlForSandbox"
        case subscriptionstatusurlversion = "subscriptionStatusUrlVersion"
        case subscriptionstatusurlversionforsandbox = "subscriptionStatusUrlVersionForSandbox"
    }

    /**
     * enum for parameter fieldsPerfPowerMetrics
     */
    public enum FieldsPerfPowerMetrics_buildsGetInstance: String { 
        case devicetype = "deviceType"
        case metrictype = "metricType"
        case platform = "platform"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsGetInstance(_id: String, fieldsBuilds: [String]? = nil, include: [String]? = nil, fieldsDiagnosticSignatures: [String]? = nil, fieldsBuildIcons: [String]? = nil, fieldsBuildBetaDetails: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, fieldsBetaTesters: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsBetaBuildLocalizations: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsAppEncryptionDeclarations: [String]? = nil, fieldsApps: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil, completion: @escaping ((_ data: BuildResponse?,_ error: Error?) -> Void)) {
        buildsGetInstanceWithRequestBuilder(_id: _id, fieldsBuilds: fieldsBuilds, include: include, fieldsDiagnosticSignatures: fieldsDiagnosticSignatures, fieldsBuildIcons: fieldsBuildIcons, fieldsBuildBetaDetails: fieldsBuildBetaDetails, fieldsBetaAppReviewSubmissions: fieldsBetaAppReviewSubmissions, fieldsBetaTesters: fieldsBetaTesters, fieldsAppStoreVersions: fieldsAppStoreVersions, fieldsBetaBuildLocalizations: fieldsBetaBuildLocalizations, fieldsPreReleaseVersions: fieldsPreReleaseVersions, fieldsAppEncryptionDeclarations: fieldsAppEncryptionDeclarations, fieldsApps: fieldsApps, fieldsPerfPowerMetrics: fieldsPerfPowerMetrics, limitBetaBuildLocalizations: limitBetaBuildLocalizations, limitBetaGroups: limitBetaGroups, limitBuildBundles: limitBuildBundles, limitIcons: limitIcons, limitIndividualTesters: limitIndividualTesters).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsDiagnosticSignatures: (query) the fields to include for returned resources of type diagnosticSignatures (optional)
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter fieldsBuildBetaDetails: (query) the fields to include for returned resources of type buildBetaDetails (optional)
     - parameter fieldsBetaAppReviewSubmissions: (query) the fields to include for returned resources of type betaAppReviewSubmissions (optional)
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter fieldsAppStoreVersions: (query) the fields to include for returned resources of type appStoreVersions (optional)
     - parameter fieldsBetaBuildLocalizations: (query) the fields to include for returned resources of type betaBuildLocalizations (optional)
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter fieldsAppEncryptionDeclarations: (query) the fields to include for returned resources of type appEncryptionDeclarations (optional)
     - parameter fieldsApps: (query) the fields to include for returned resources of type apps (optional)
     - parameter fieldsPerfPowerMetrics: (query) the fields to include for returned resources of type perfPowerMetrics (optional)
     - parameter limitBetaBuildLocalizations: (query) maximum number of related betaBuildLocalizations returned (when they are included) (optional)
     - parameter limitBetaGroups: (query) maximum number of related betaGroups returned (when they are included) (optional)
     - parameter limitBuildBundles: (query) maximum number of related buildBundles returned (when they are included) (optional)
     - parameter limitIcons: (query) maximum number of related icons returned (when they are included) (optional)
     - parameter limitIndividualTesters: (query) maximum number of related individualTesters returned (when they are included) (optional)

     - returns: RequestBuilder<BuildResponse> 
     */
    open class func buildsGetInstanceWithRequestBuilder(_id: String, fieldsBuilds: [String]? = nil, include: [String]? = nil, fieldsDiagnosticSignatures: [String]? = nil, fieldsBuildIcons: [String]? = nil, fieldsBuildBetaDetails: [String]? = nil, fieldsBetaAppReviewSubmissions: [String]? = nil, fieldsBetaTesters: [String]? = nil, fieldsAppStoreVersions: [String]? = nil, fieldsBetaBuildLocalizations: [String]? = nil, fieldsPreReleaseVersions: [String]? = nil, fieldsAppEncryptionDeclarations: [String]? = nil, fieldsApps: [String]? = nil, fieldsPerfPowerMetrics: [String]? = nil, limitBetaBuildLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuildBundles: Int? = nil, limitIcons: Int? = nil, limitIndividualTesters: Int? = nil) -> RequestBuilder<BuildResponse> {
        var path = "/v1/builds/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[builds]": fieldsBuilds, 
                        "include": include, 
                        "fields[diagnosticSignatures]": fieldsDiagnosticSignatures, 
                        "fields[buildIcons]": fieldsBuildIcons, 
                        "fields[buildBetaDetails]": fieldsBuildBetaDetails, 
                        "fields[betaAppReviewSubmissions]": fieldsBetaAppReviewSubmissions, 
                        "fields[betaTesters]": fieldsBetaTesters, 
                        "fields[appStoreVersions]": fieldsAppStoreVersions, 
                        "fields[betaBuildLocalizations]": fieldsBetaBuildLocalizations, 
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions, 
                        "fields[appEncryptionDeclarations]": fieldsAppEncryptionDeclarations, 
                        "fields[apps]": fieldsApps, 
                        "fields[perfPowerMetrics]": fieldsPerfPowerMetrics, 
                        "limit[betaBuildLocalizations]": limitBetaBuildLocalizations?.encodeToJSON(), 
                        "limit[betaGroups]": limitBetaGroups?.encodeToJSON(), 
                        "limit[buildBundles]": limitBuildBundles?.encodeToJSON(), 
                        "limit[icons]": limitIcons?.encodeToJSON(), 
                        "limit[individualTesters]": limitIndividualTesters?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BuildResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsBuildIcons
     */
    public enum FieldsBuildIcons_buildsIconsGetToManyRelated: String { 
        case iconasset = "iconAsset"
        case icontype = "iconType"
        case name = "name"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsIconsGetToManyRelated(_id: String, fieldsBuildIcons: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: BuildIconsResponse?,_ error: Error?) -> Void)) {
        buildsIconsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsBuildIcons: fieldsBuildIcons, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/icons
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "iconType" : "APP_STORE",
      "name" : "name",
      "iconAsset" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "buildIcons"
  }, {
    "attributes" : {
      "iconType" : "APP_STORE",
      "name" : "name",
      "iconAsset" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "buildIcons"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBuildIcons: (query) the fields to include for returned resources of type buildIcons (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BuildIconsResponse> 
     */
    open class func buildsIconsGetToManyRelatedWithRequestBuilder(_id: String, fieldsBuildIcons: [String]? = nil, limit: Int? = nil) -> RequestBuilder<BuildIconsResponse> {
        var path = "/v1/builds/{id}/icons"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[buildIcons]": fieldsBuildIcons, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BuildIconsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsIndividualTestersCreateToManyRelationship(body: BuildIndividualTestersLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        buildsIndividualTestersCreateToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/builds/{id}/relationships/individualTesters
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func buildsIndividualTestersCreateToManyRelationshipWithRequestBuilder(body: BuildIndividualTestersLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/builds/{id}/relationships/individualTesters"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsIndividualTestersDeleteToManyRelationship(body: BuildIndividualTestersLinkagesRequest, _id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        buildsIndividualTestersDeleteToManyRelationshipWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/builds/{id}/relationships/individualTesters
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter body: (body) List of related linkages 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func buildsIndividualTestersDeleteToManyRelationshipWithRequestBuilder(body: BuildIndividualTestersLinkagesRequest, _id: String) -> RequestBuilder<Void> {
        var path = "/v1/builds/{id}/relationships/individualTesters"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     * enum for parameter fieldsBetaTesters
     */
    public enum FieldsBetaTesters_buildsIndividualTestersGetToManyRelated: String { 
        case apps = "apps"
        case betagroups = "betaGroups"
        case builds = "builds"
        case email = "email"
        case firstname = "firstName"
        case invitetype = "inviteType"
        case lastname = "lastName"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsIndividualTestersGetToManyRelated(_id: String, fieldsBetaTesters: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: BetaTestersResponse?,_ error: Error?) -> Void)) {
        buildsIndividualTestersGetToManyRelatedWithRequestBuilder(_id: _id, fieldsBetaTesters: fieldsBetaTesters, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/individualTesters
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "apps" : {
        "data" : [ {
          "id" : "id",
          "type" : "apps"
        }, {
          "id" : "id",
          "type" : "apps"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "inviteType" : "EMAIL",
      "email" : ""
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaTesters"
  }, {
    "relationships" : {
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "apps" : {
        "data" : [ {
          "id" : "id",
          "type" : "apps"
        }, {
          "id" : "id",
          "type" : "apps"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "inviteType" : "EMAIL",
      "email" : ""
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "betaTesters"
  } ],
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsBetaTesters: (query) the fields to include for returned resources of type betaTesters (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BetaTestersResponse> 
     */
    open class func buildsIndividualTestersGetToManyRelatedWithRequestBuilder(_id: String, fieldsBetaTesters: [String]? = nil, limit: Int? = nil) -> RequestBuilder<BetaTestersResponse> {
        var path = "/v1/builds/{id}/individualTesters"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[betaTesters]": fieldsBetaTesters, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BetaTestersResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsIndividualTestersGetToManyRelationship(_id: String, limit: Int? = nil, completion: @escaping ((_ data: BuildIndividualTestersLinkagesResponse?,_ error: Error?) -> Void)) {
        buildsIndividualTestersGetToManyRelationshipWithRequestBuilder(_id: _id, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/relationships/individualTesters
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "id" : "id",
    "type" : "betaTesters"
  }, {
    "id" : "id",
    "type" : "betaTesters"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<BuildIndividualTestersLinkagesResponse> 
     */
    open class func buildsIndividualTestersGetToManyRelationshipWithRequestBuilder(_id: String, limit: Int? = nil) -> RequestBuilder<BuildIndividualTestersLinkagesResponse> {
        var path = "/v1/builds/{id}/relationships/individualTesters"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BuildIndividualTestersLinkagesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter filterMetricType
     */
    public enum FilterMetricType_buildsPerfPowerMetricsGetToManyRelated: String { 
        case disk = "DISK"
        case hang = "HANG"
        case battery = "BATTERY"
        case launch = "LAUNCH"
        case memory = "MEMORY"
        case animation = "ANIMATION"
        case termination = "TERMINATION"
    }

    /**
     * enum for parameter filterPlatform
     */
    public enum FilterPlatform_buildsPerfPowerMetricsGetToManyRelated: String { 
        case ios = "IOS"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterDeviceType: (query) filter by attribute &#x27;deviceType&#x27; (optional)
     - parameter filterMetricType: (query) filter by attribute &#x27;metricType&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsPerfPowerMetricsGetToManyRelated(_id: String, filterDeviceType: [String]? = nil, filterMetricType: [String]? = nil, filterPlatform: [String]? = nil, completion: @escaping ((_ data: XcodeMetrics?,_ error: Error?) -> Void)) {
        buildsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(_id: _id, filterDeviceType: filterDeviceType, filterMetricType: filterMetricType, filterPlatform: filterPlatform).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/perfPowerMetrics
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "insights" : {
    "trendingUp" : [ {
      "metricCategory" : "HANG",
      "latestVersion" : "latestVersion",
      "metric" : "metric",
      "summaryString" : "summaryString",
      "highImpact" : true,
      "referenceVersions" : "referenceVersions",
      "maxLatestVersionValue" : 0.8008281904610115,
      "subSystemLabel" : "subSystemLabel",
      "populations" : [ {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      }, {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      } ]
    }, {
      "metricCategory" : "HANG",
      "latestVersion" : "latestVersion",
      "metric" : "metric",
      "summaryString" : "summaryString",
      "highImpact" : true,
      "referenceVersions" : "referenceVersions",
      "maxLatestVersionValue" : 0.8008281904610115,
      "subSystemLabel" : "subSystemLabel",
      "populations" : [ {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      }, {
        "deltaPercentage" : 6.027456183070403,
        "percentile" : "percentile",
        "summaryString" : "summaryString",
        "referenceAverageValue" : 1.4658129805029452,
        "latestVersionValue" : 5.962133916683182,
        "device" : "device"
      } ]
    } ],
    "regressions" : [ null, null ]
  },
  "productData" : [ {
    "metricCategories" : [ {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    }, {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    } ],
    "platform" : "platform"
  }, {
    "metricCategories" : [ {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    }, {
      "metrics" : [ {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      }, {
        "identifier" : "identifier",
        "unit" : {
          "identifier" : "identifier",
          "displayName" : "displayName"
        },
        "datasets" : [ {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        }, {
          "filterCriteria" : {
            "percentile" : "percentile",
            "device" : "device",
            "deviceMarketingName" : "deviceMarketingName"
          },
          "points" : [ {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          }, {
            "goal" : "goal",
            "errorMargin" : 9.301444243932576,
            "version" : "version",
            "value" : 7.061401241503109,
            "percentageBreakdown" : {
              "subSystemLabel" : "subSystemLabel",
              "value" : 3.616076749251911
            }
          } ]
        } ],
        "goalKeys" : [ {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        }, {
          "upperBound" : 2,
          "goalKey" : "goalKey",
          "lowerBound" : 5
        } ]
      } ]
    } ],
    "platform" : "platform"
  } ],
  "version" : "version"
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterDeviceType: (query) filter by attribute &#x27;deviceType&#x27; (optional)
     - parameter filterMetricType: (query) filter by attribute &#x27;metricType&#x27; (optional)
     - parameter filterPlatform: (query) filter by attribute &#x27;platform&#x27; (optional)

     - returns: RequestBuilder<XcodeMetrics> 
     */
    open class func buildsPerfPowerMetricsGetToManyRelatedWithRequestBuilder(_id: String, filterDeviceType: [String]? = nil, filterMetricType: [String]? = nil, filterPlatform: [String]? = nil) -> RequestBuilder<XcodeMetrics> {
        var path = "/v1/builds/{id}/perfPowerMetrics"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[deviceType]": filterDeviceType, 
                        "filter[metricType]": filterMetricType, 
                        "filter[platform]": filterPlatform
        ])


        let requestBuilder: RequestBuilder<XcodeMetrics>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsPreReleaseVersions
     */
    public enum FieldsPreReleaseVersions_buildsPreReleaseVersionGetToOneRelated: String { 
        case app = "app"
        case builds = "builds"
        case platform = "platform"
        case version = "version"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsPreReleaseVersionGetToOneRelated(_id: String, fieldsPreReleaseVersions: [String]? = nil, completion: @escaping ((_ data: PrereleaseVersionResponse?,_ error: Error?) -> Void)) {
        buildsPreReleaseVersionGetToOneRelatedWithRequestBuilder(_id: _id, fieldsPreReleaseVersions: fieldsPreReleaseVersions).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/builds/{id}/preReleaseVersion
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      }
    },
    "attributes" : {
      "version" : "version",
      "platform" : "IOS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "preReleaseVersions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsPreReleaseVersions: (query) the fields to include for returned resources of type preReleaseVersions (optional)

     - returns: RequestBuilder<PrereleaseVersionResponse> 
     */
    open class func buildsPreReleaseVersionGetToOneRelatedWithRequestBuilder(_id: String, fieldsPreReleaseVersions: [String]? = nil) -> RequestBuilder<PrereleaseVersionResponse> {
        var path = "/v1/builds/{id}/preReleaseVersion"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[preReleaseVersions]": fieldsPreReleaseVersions
        ])


        let requestBuilder: RequestBuilder<PrereleaseVersionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) Build representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func buildsUpdateInstance(body: BuildUpdateRequest, _id: String, completion: @escaping ((_ data: BuildResponse?,_ error: Error?) -> Void)) {
        buildsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/builds/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "individualTesters" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaTesters"
        }, {
          "id" : "id",
          "type" : "betaTesters"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "betaGroups" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaGroups"
        }, {
          "id" : "id",
          "type" : "betaGroups"
        } ],
        "meta" : {
          "paging" : {
            "total" : 0,
            "limit" : 6
          }
        }
      },
      "app" : {
        "data" : {
          "id" : "id",
          "type" : "apps"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "preReleaseVersion" : {
        "data" : {
          "id" : "id",
          "type" : "preReleaseVersions"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "betaAppReviewSubmission" : {
        "data" : {
          "id" : "id",
          "type" : "betaAppReviewSubmissions"
        }
      },
      "appStoreVersion" : {
        "data" : {
          "id" : "id",
          "type" : "appStoreVersions"
        }
      },
      "appEncryptionDeclaration" : {
        "data" : {
          "id" : "id",
          "type" : "appEncryptionDeclarations"
        }
      },
      "buildBundles" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildBundles"
        }, {
          "id" : "id",
          "type" : "buildBundles"
        } ]
      },
      "buildBetaDetail" : {
        "data" : {
          "id" : "id",
          "type" : "buildBetaDetails"
        }
      },
      "icons" : {
        "data" : [ {
          "id" : "id",
          "type" : "buildIcons"
        }, {
          "id" : "id",
          "type" : "buildIcons"
        } ]
      },
      "betaBuildLocalizations" : {
        "data" : [ {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        }, {
          "id" : "id",
          "type" : "betaBuildLocalizations"
        } ]
      }
    },
    "attributes" : {
      "minOsVersion" : "minOsVersion",
      "processingState" : "PROCESSING",
      "buildAudienceType" : "INTERNAL_ONLY",
      "expired" : true,
      "lsMinimumSystemVersion" : "lsMinimumSystemVersion",
      "iconAssetToken" : {
        "width" : 6,
        "templateUrl" : "templateUrl",
        "height" : 1
      },
      "usesNonExemptEncryption" : true,
      "uploadedDate" : "2000-01-23T04:56:07.000+00:00",
      "version" : "version",
      "computedMinMacOsVersion" : "computedMinMacOsVersion",
      "expirationDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "builds"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) Build representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<BuildResponse> 
     */
    open class func buildsUpdateInstanceWithRequestBuilder(body: BuildUpdateRequest, _id: String) -> RequestBuilder<BuildResponse> {
        var path = "/v1/builds/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BuildResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
