//
// CiBuildActionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CiBuildActionsAPI {
    /**
     * enum for parameter fieldsCiArtifacts
     */
    public enum FieldsCiArtifacts_ciBuildActionsArtifactsGetToManyRelated: String { 
        case downloadurl = "downloadUrl"
        case filename = "fileName"
        case filesize = "fileSize"
        case filetype = "fileType"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiArtifacts: (query) the fields to include for returned resources of type ciArtifacts (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildActionsArtifactsGetToManyRelated(_id: String, fieldsCiArtifacts: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: CiArtifactsResponse?,_ error: Error?) -> Void)) {
        ciBuildActionsArtifactsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsCiArtifacts: fieldsCiArtifacts, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildActions/{id}/artifacts
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "fileName" : "fileName",
      "fileSize" : 0,
      "downloadUrl" : "http://example.com/aeiou",
      "fileType" : "ARCHIVE"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciArtifacts"
  }, {
    "attributes" : {
      "fileName" : "fileName",
      "fileSize" : 0,
      "downloadUrl" : "http://example.com/aeiou",
      "fileType" : "ARCHIVE"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciArtifacts"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiArtifacts: (query) the fields to include for returned resources of type ciArtifacts (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<CiArtifactsResponse> 
     */
    open class func ciBuildActionsArtifactsGetToManyRelatedWithRequestBuilder(_id: String, fieldsCiArtifacts: [String]? = nil, limit: Int? = nil) -> RequestBuilder<CiArtifactsResponse> {
        var path = "/v1/ciBuildActions/{id}/artifacts"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciArtifacts]": fieldsCiArtifacts, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CiArtifactsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciBuildActionsBuildRunGetToOneRelated: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciBuildActionsBuildRunGetToOneRelated: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciBuildActionsBuildRunGetToOneRelated: String { 
        case actions = "actions"
        case branchstartcondition = "branchStartCondition"
        case buildruns = "buildRuns"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case _description = "description"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case lastmodifieddate = "lastModifiedDate"
        case macosversion = "macOsVersion"
        case name = "name"
        case product = "product"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case repository = "repository"
        case scheduledstartcondition = "scheduledStartCondition"
        case tagstartcondition = "tagStartCondition"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter fieldsScmPullRequests
     */
    public enum FieldsScmPullRequests_ciBuildActionsBuildRunGetToOneRelated: String { 
        case destinationbranchname = "destinationBranchName"
        case destinationrepositoryname = "destinationRepositoryName"
        case destinationrepositoryowner = "destinationRepositoryOwner"
        case isclosed = "isClosed"
        case iscrossrepository = "isCrossRepository"
        case number = "number"
        case repository = "repository"
        case sourcebranchname = "sourceBranchName"
        case sourcerepositoryname = "sourceRepositoryName"
        case sourcerepositoryowner = "sourceRepositoryOwner"
        case title = "title"
        case weburl = "webUrl"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciBuildActionsBuildRunGetToOneRelated: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciBuildActionsBuildRunGetToOneRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildActionsBuildRunGetToOneRelated: String { 
        case builds = "builds"
        case destinationbranch = "destinationBranch"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case workflow = "workflow"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildActionsBuildRunGetToOneRelated(_id: String, fieldsScmGitReferences: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsScmPullRequests: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsBuilds: [String]? = nil, limitBuilds: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CiBuildRunResponse?,_ error: Error?) -> Void)) {
        ciBuildActionsBuildRunGetToOneRelatedWithRequestBuilder(_id: _id, fieldsScmGitReferences: fieldsScmGitReferences, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiWorkflows: fieldsCiWorkflows, fieldsScmPullRequests: fieldsScmPullRequests, fieldsCiProducts: fieldsCiProducts, fieldsBuilds: fieldsBuilds, limitBuilds: limitBuilds, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildActions/{id}/buildRun
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CiBuildRunResponse> 
     */
    open class func ciBuildActionsBuildRunGetToOneRelatedWithRequestBuilder(_id: String, fieldsScmGitReferences: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsScmPullRequests: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsBuilds: [String]? = nil, limitBuilds: Int? = nil, include: [String]? = nil) -> RequestBuilder<CiBuildRunResponse> {
        var path = "/v1/ciBuildActions/{id}/buildRun"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[ciWorkflows]": fieldsCiWorkflows, 
                        "fields[scmPullRequests]": fieldsScmPullRequests, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[builds]": fieldsBuilds, 
                        "limit[builds]": limitBuilds?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CiBuildRunResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCiBuildActions
     */
    public enum FieldsCiBuildActions_ciBuildActionsGetInstance: String { 
        case actiontype = "actionType"
        case artifacts = "artifacts"
        case buildrun = "buildRun"
        case completionstatus = "completionStatus"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case isrequiredtopass = "isRequiredToPass"
        case issuecounts = "issueCounts"
        case issues = "issues"
        case name = "name"
        case starteddate = "startedDate"
        case testresults = "testResults"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciBuildActionsGetInstance: String { 
        case buildrun = "buildRun"
    }

    /**
     * enum for parameter fieldsCiIssues
     */
    public enum FieldsCiIssues_ciBuildActionsGetInstance: String { 
        case category = "category"
        case filesource = "fileSource"
        case issuetype = "issueType"
        case message = "message"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciBuildActionsGetInstance: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiTestResults
     */
    public enum FieldsCiTestResults_ciBuildActionsGetInstance: String { 
        case classname = "className"
        case destinationtestresults = "destinationTestResults"
        case filesource = "fileSource"
        case message = "message"
        case name = "name"
        case status = "status"
    }

    /**
     * enum for parameter fieldsCiArtifacts
     */
    public enum FieldsCiArtifacts_ciBuildActionsGetInstance: String { 
        case downloadurl = "downloadUrl"
        case filename = "fileName"
        case filesize = "fileSize"
        case filetype = "fileType"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiIssues: (query) the fields to include for returned resources of type ciIssues (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiTestResults: (query) the fields to include for returned resources of type ciTestResults (optional)
     - parameter fieldsCiArtifacts: (query) the fields to include for returned resources of type ciArtifacts (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildActionsGetInstance(_id: String, fieldsCiBuildActions: [String]? = nil, include: [String]? = nil, fieldsCiIssues: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiTestResults: [String]? = nil, fieldsCiArtifacts: [String]? = nil, completion: @escaping ((_ data: CiBuildActionResponse?,_ error: Error?) -> Void)) {
        ciBuildActionsGetInstanceWithRequestBuilder(_id: _id, fieldsCiBuildActions: fieldsCiBuildActions, include: include, fieldsCiIssues: fieldsCiIssues, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiTestResults: fieldsCiTestResults, fieldsCiArtifacts: fieldsCiArtifacts).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildActions/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "buildRun" : {
        "data" : {
          "id" : "id",
          "type" : "ciBuildRuns"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "actionType" : "BUILD",
      "issueCounts" : {
        "analyzerWarnings" : 0,
        "testFailures" : 1,
        "warnings" : 5,
        "errors" : 6
      },
      "executionProgress" : "PENDING",
      "name" : "name",
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "completionStatus" : "SUCCEEDED",
      "isRequiredToPass" : true,
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciBuildActions"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  }, {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  } ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiBuildActions: (query) the fields to include for returned resources of type ciBuildActions (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiIssues: (query) the fields to include for returned resources of type ciIssues (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiTestResults: (query) the fields to include for returned resources of type ciTestResults (optional)
     - parameter fieldsCiArtifacts: (query) the fields to include for returned resources of type ciArtifacts (optional)

     - returns: RequestBuilder<CiBuildActionResponse> 
     */
    open class func ciBuildActionsGetInstanceWithRequestBuilder(_id: String, fieldsCiBuildActions: [String]? = nil, include: [String]? = nil, fieldsCiIssues: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiTestResults: [String]? = nil, fieldsCiArtifacts: [String]? = nil) -> RequestBuilder<CiBuildActionResponse> {
        var path = "/v1/ciBuildActions/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciBuildActions]": fieldsCiBuildActions, 
                        "include": include, 
                        "fields[ciIssues]": fieldsCiIssues, 
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[ciTestResults]": fieldsCiTestResults, 
                        "fields[ciArtifacts]": fieldsCiArtifacts
        ])


        let requestBuilder: RequestBuilder<CiBuildActionResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCiIssues
     */
    public enum FieldsCiIssues_ciBuildActionsIssuesGetToManyRelated: String { 
        case category = "category"
        case filesource = "fileSource"
        case issuetype = "issueType"
        case message = "message"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiIssues: (query) the fields to include for returned resources of type ciIssues (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildActionsIssuesGetToManyRelated(_id: String, fieldsCiIssues: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: CiIssuesResponse?,_ error: Error?) -> Void)) {
        ciBuildActionsIssuesGetToManyRelatedWithRequestBuilder(_id: _id, fieldsCiIssues: fieldsCiIssues, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildActions/{id}/issues
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "issueType" : "ANALYZER_WARNING",
      "fileSource" : {
        "path" : "path",
        "lineNumber" : 0
      },
      "message" : "message",
      "category" : "category"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciIssues"
  }, {
    "attributes" : {
      "issueType" : "ANALYZER_WARNING",
      "fileSource" : {
        "path" : "path",
        "lineNumber" : 0
      },
      "message" : "message",
      "category" : "category"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciIssues"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiIssues: (query) the fields to include for returned resources of type ciIssues (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<CiIssuesResponse> 
     */
    open class func ciBuildActionsIssuesGetToManyRelatedWithRequestBuilder(_id: String, fieldsCiIssues: [String]? = nil, limit: Int? = nil) -> RequestBuilder<CiIssuesResponse> {
        var path = "/v1/ciBuildActions/{id}/issues"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciIssues]": fieldsCiIssues, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CiIssuesResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCiTestResults
     */
    public enum FieldsCiTestResults_ciBuildActionsTestResultsGetToManyRelated: String { 
        case classname = "className"
        case destinationtestresults = "destinationTestResults"
        case filesource = "fileSource"
        case message = "message"
        case name = "name"
        case status = "status"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiTestResults: (query) the fields to include for returned resources of type ciTestResults (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciBuildActionsTestResultsGetToManyRelated(_id: String, fieldsCiTestResults: [String]? = nil, limit: Int? = nil, completion: @escaping ((_ data: CiTestResultsResponse?,_ error: Error?) -> Void)) {
        ciBuildActionsTestResultsGetToManyRelatedWithRequestBuilder(_id: _id, fieldsCiTestResults: fieldsCiTestResults, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciBuildActions/{id}/testResults
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "attributes" : {
      "name" : "name",
      "fileSource" : {
        "path" : "path",
        "lineNumber" : 0
      },
      "className" : "className",
      "destinationTestResults" : [ {
        "duration" : 0.8008281904610115,
        "osVersion" : "osVersion",
        "uuid" : "uuid",
        "deviceName" : "deviceName"
      }, {
        "duration" : 0.8008281904610115,
        "osVersion" : "osVersion",
        "uuid" : "uuid",
        "deviceName" : "deviceName"
      } ],
      "message" : "message",
      "status" : "SUCCESS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciTestResults"
  }, {
    "attributes" : {
      "name" : "name",
      "fileSource" : {
        "path" : "path",
        "lineNumber" : 0
      },
      "className" : "className",
      "destinationTestResults" : [ {
        "duration" : 0.8008281904610115,
        "osVersion" : "osVersion",
        "uuid" : "uuid",
        "deviceName" : "deviceName"
      }, {
        "duration" : 0.8008281904610115,
        "osVersion" : "osVersion",
        "uuid" : "uuid",
        "deviceName" : "deviceName"
      } ],
      "message" : "message",
      "status" : "SUCCESS"
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciTestResults"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  }
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiTestResults: (query) the fields to include for returned resources of type ciTestResults (optional)
     - parameter limit: (query) maximum resources per page (optional)

     - returns: RequestBuilder<CiTestResultsResponse> 
     */
    open class func ciBuildActionsTestResultsGetToManyRelatedWithRequestBuilder(_id: String, fieldsCiTestResults: [String]? = nil, limit: Int? = nil) -> RequestBuilder<CiTestResultsResponse> {
        var path = "/v1/ciBuildActions/{id}/testResults"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciTestResults]": fieldsCiTestResults, 
                        "limit": limit?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<CiTestResultsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
