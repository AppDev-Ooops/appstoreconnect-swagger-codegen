//
// CiWorkflowsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class CiWorkflowsAPI {
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciWorkflowsBuildRunsGetToManyRelated: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciWorkflowsBuildRunsGetToManyRelated: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciWorkflowsBuildRunsGetToManyRelated: String { 
        case actions = "actions"
        case branchstartcondition = "branchStartCondition"
        case buildruns = "buildRuns"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case _description = "description"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case lastmodifieddate = "lastModifiedDate"
        case macosversion = "macOsVersion"
        case name = "name"
        case product = "product"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case repository = "repository"
        case scheduledstartcondition = "scheduledStartCondition"
        case tagstartcondition = "tagStartCondition"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter fieldsScmPullRequests
     */
    public enum FieldsScmPullRequests_ciWorkflowsBuildRunsGetToManyRelated: String { 
        case destinationbranchname = "destinationBranchName"
        case destinationrepositoryname = "destinationRepositoryName"
        case destinationrepositoryowner = "destinationRepositoryOwner"
        case isclosed = "isClosed"
        case iscrossrepository = "isCrossRepository"
        case number = "number"
        case repository = "repository"
        case sourcebranchname = "sourceBranchName"
        case sourcerepositoryname = "sourceRepositoryName"
        case sourcerepositoryowner = "sourceRepositoryOwner"
        case title = "title"
        case weburl = "webUrl"
    }

    /**
     * enum for parameter fieldsCiProducts
     */
    public enum FieldsCiProducts_ciWorkflowsBuildRunsGetToManyRelated: String { 
        case additionalrepositories = "additionalRepositories"
        case app = "app"
        case buildruns = "buildRuns"
        case bundleid = "bundleId"
        case createddate = "createdDate"
        case name = "name"
        case primaryrepositories = "primaryRepositories"
        case producttype = "productType"
        case workflows = "workflows"
    }

    /**
     * enum for parameter fieldsBuilds
     */
    public enum FieldsBuilds_ciWorkflowsBuildRunsGetToManyRelated: String { 
        case app = "app"
        case appencryptiondeclaration = "appEncryptionDeclaration"
        case appstoreversion = "appStoreVersion"
        case betaappreviewsubmission = "betaAppReviewSubmission"
        case betabuildlocalizations = "betaBuildLocalizations"
        case betagroups = "betaGroups"
        case buildaudiencetype = "buildAudienceType"
        case buildbetadetail = "buildBetaDetail"
        case buildbundles = "buildBundles"
        case computedminmacosversion = "computedMinMacOsVersion"
        case diagnosticsignatures = "diagnosticSignatures"
        case expirationdate = "expirationDate"
        case expired = "expired"
        case iconassettoken = "iconAssetToken"
        case icons = "icons"
        case individualtesters = "individualTesters"
        case lsminimumsystemversion = "lsMinimumSystemVersion"
        case minosversion = "minOsVersion"
        case perfpowermetrics = "perfPowerMetrics"
        case prereleaseversion = "preReleaseVersion"
        case processingstate = "processingState"
        case uploadeddate = "uploadedDate"
        case usesnonexemptencryption = "usesNonExemptEncryption"
        case version = "version"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciWorkflowsBuildRunsGetToManyRelated: String { 
        case builds = "builds"
        case destinationbranch = "destinationBranch"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case workflow = "workflow"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter filterBuilds: (query) filter by id(s) of related &#x27;builds&#x27; (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciWorkflowsBuildRunsGetToManyRelated(_id: String, filterBuilds: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsScmPullRequests: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsBuilds: [String]? = nil, limit: Int? = nil, limitBuilds: Int? = nil, include: [String]? = nil, completion: @escaping ((_ data: CiBuildRunsResponse?,_ error: Error?) -> Void)) {
        ciWorkflowsBuildRunsGetToManyRelatedWithRequestBuilder(_id: _id, filterBuilds: filterBuilds, fieldsScmGitReferences: fieldsScmGitReferences, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsCiWorkflows: fieldsCiWorkflows, fieldsScmPullRequests: fieldsScmPullRequests, fieldsCiProducts: fieldsCiProducts, fieldsBuilds: fieldsBuilds, limit: limit, limitBuilds: limitBuilds, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciWorkflows/{id}/buildRuns
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : [ {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  }, {
    "relationships" : {
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "workflow" : {
        "data" : {
          "id" : "id",
          "type" : "ciWorkflows"
        }
      },
      "builds" : {
        "data" : [ {
          "id" : "id",
          "type" : "builds"
        }, {
          "id" : "id",
          "type" : "builds"
        } ]
      },
      "sourceBranchOrTag" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "pullRequest" : {
        "data" : {
          "id" : "id",
          "type" : "scmPullRequests"
        }
      }
    },
    "attributes" : {
      "number" : 5,
      "startReason" : "GIT_REF_CHANGE",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "isPullRequestBuild" : true,
      "startedDate" : "2000-01-23T04:56:07.000+00:00",
      "sourceCommit" : {
        "author" : {
          "avatarUrl" : "http://example.com/aeiou",
          "displayName" : "displayName"
        },
        "webUrl" : "http://example.com/aeiou",
        "commitSha" : "commitSha",
        "message" : "message"
      },
      "cancelReason" : "AUTOMATICALLY_BY_NEWER_BUILD",
      "finishedDate" : "2000-01-23T04:56:07.000+00:00"
    },
    "id" : "id",
    "type" : "ciBuildRuns"
  } ],
  "meta" : {
    "paging" : {
      "total" : 0,
      "limit" : 6
    }
  },
  "links" : {
    "next" : "next",
    "self" : "self",
    "first" : "first"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter filterBuilds: (query) filter by id(s) of related &#x27;builds&#x27; (optional)
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter fieldsScmPullRequests: (query) the fields to include for returned resources of type scmPullRequests (optional)
     - parameter fieldsCiProducts: (query) the fields to include for returned resources of type ciProducts (optional)
     - parameter fieldsBuilds: (query) the fields to include for returned resources of type builds (optional)
     - parameter limit: (query) maximum resources per page (optional)
     - parameter limitBuilds: (query) maximum number of related builds returned (when they are included) (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<CiBuildRunsResponse> 
     */
    open class func ciWorkflowsBuildRunsGetToManyRelatedWithRequestBuilder(_id: String, filterBuilds: [String]? = nil, fieldsScmGitReferences: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsCiWorkflows: [String]? = nil, fieldsScmPullRequests: [String]? = nil, fieldsCiProducts: [String]? = nil, fieldsBuilds: [String]? = nil, limit: Int? = nil, limitBuilds: Int? = nil, include: [String]? = nil) -> RequestBuilder<CiBuildRunsResponse> {
        var path = "/v1/ciWorkflows/{id}/buildRuns"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "filter[builds]": filterBuilds, 
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[ciWorkflows]": fieldsCiWorkflows, 
                        "fields[scmPullRequests]": fieldsScmPullRequests, 
                        "fields[ciProducts]": fieldsCiProducts, 
                        "fields[builds]": fieldsBuilds, 
                        "limit": limit?.encodeToJSON(), 
                        "limit[builds]": limitBuilds?.encodeToJSON(), 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<CiBuildRunsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) CiWorkflow representation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciWorkflowsCreateInstance(body: CiWorkflowCreateRequest, completion: @escaping ((_ data: CiWorkflowResponse?,_ error: Error?) -> Void)) {
        ciWorkflowsCreateInstanceWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/ciWorkflows
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "macOsVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciMacOsVersions"
        }
      },
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "xcodeVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciXcodeVersions"
        }
      }
    },
    "attributes" : {
      "containerFilePath" : "containerFilePath",
      "pullRequestStartCondition" : {
        "autoCancel" : true
      },
      "isLockedForEditing" : true,
      "tagStartCondition" : {
        "source" : {
          "patterns" : [ null, null ],
          "isAllMatch" : true
        },
        "autoCancel" : true
      },
      "scheduledStartCondition" : {
        "schedule" : {
          "hour" : 0,
          "timezone" : "timezone",
          "days" : [ "SUNDAY", "SUNDAY" ],
          "frequency" : "WEEKLY",
          "minute" : 6
        }
      },
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "isEnabled" : true,
      "name" : "name",
      "description" : "description",
      "clean" : true,
      "actions" : [ {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      }, {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      } ],
      "branchStartCondition" : {
        "source" : {
          "patterns" : [ {
            "pattern" : "pattern",
            "isPrefix" : true
          }, {
            "pattern" : "pattern",
            "isPrefix" : true
          } ],
          "isAllMatch" : true
        },
        "autoCancel" : true,
        "filesAndFoldersRule" : {
          "mode" : "START_IF_ANY_FILE_MATCHES",
          "matchers" : [ {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          }, {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          } ]
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciWorkflows"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) CiWorkflow representation 

     - returns: RequestBuilder<CiWorkflowResponse> 
     */
    open class func ciWorkflowsCreateInstanceWithRequestBuilder(body: CiWorkflowCreateRequest) -> RequestBuilder<CiWorkflowResponse> {
        let path = "/v1/ciWorkflows"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CiWorkflowResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciWorkflowsDeleteInstance(_id: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        ciWorkflowsDeleteInstanceWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/ciWorkflows/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<Void> 
     */
    open class func ciWorkflowsDeleteInstanceWithRequestBuilder(_id: String) -> RequestBuilder<Void> {
        var path = "/v1/ciWorkflows/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsCiWorkflows
     */
    public enum FieldsCiWorkflows_ciWorkflowsGetInstance: String { 
        case actions = "actions"
        case branchstartcondition = "branchStartCondition"
        case buildruns = "buildRuns"
        case clean = "clean"
        case containerfilepath = "containerFilePath"
        case _description = "description"
        case isenabled = "isEnabled"
        case islockedforediting = "isLockedForEditing"
        case lastmodifieddate = "lastModifiedDate"
        case macosversion = "macOsVersion"
        case name = "name"
        case product = "product"
        case pullrequeststartcondition = "pullRequestStartCondition"
        case repository = "repository"
        case scheduledstartcondition = "scheduledStartCondition"
        case tagstartcondition = "tagStartCondition"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciWorkflowsGetInstance: String { 
        case macosversion = "macOsVersion"
        case product = "product"
        case repository = "repository"
        case xcodeversion = "xcodeVersion"
    }

    /**
     * enum for parameter fieldsCiBuildRuns
     */
    public enum FieldsCiBuildRuns_ciWorkflowsGetInstance: String { 
        case actions = "actions"
        case buildrun = "buildRun"
        case builds = "builds"
        case cancelreason = "cancelReason"
        case clean = "clean"
        case completionstatus = "completionStatus"
        case createddate = "createdDate"
        case destinationbranch = "destinationBranch"
        case destinationcommit = "destinationCommit"
        case executionprogress = "executionProgress"
        case finisheddate = "finishedDate"
        case ispullrequestbuild = "isPullRequestBuild"
        case issuecounts = "issueCounts"
        case number = "number"
        case product = "product"
        case pullrequest = "pullRequest"
        case sourcebranchortag = "sourceBranchOrTag"
        case sourcecommit = "sourceCommit"
        case startreason = "startReason"
        case starteddate = "startedDate"
        case workflow = "workflow"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciWorkflowsGetInstance: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciWorkflowsGetInstance(_id: String, fieldsCiWorkflows: [String]? = nil, include: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsScmRepositories: [String]? = nil, completion: @escaping ((_ data: CiWorkflowResponse?,_ error: Error?) -> Void)) {
        ciWorkflowsGetInstanceWithRequestBuilder(_id: _id, fieldsCiWorkflows: fieldsCiWorkflows, include: include, fieldsCiBuildRuns: fieldsCiBuildRuns, fieldsScmRepositories: fieldsScmRepositories).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciWorkflows/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "macOsVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciMacOsVersions"
        }
      },
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "xcodeVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciXcodeVersions"
        }
      }
    },
    "attributes" : {
      "containerFilePath" : "containerFilePath",
      "pullRequestStartCondition" : {
        "autoCancel" : true
      },
      "isLockedForEditing" : true,
      "tagStartCondition" : {
        "source" : {
          "patterns" : [ null, null ],
          "isAllMatch" : true
        },
        "autoCancel" : true
      },
      "scheduledStartCondition" : {
        "schedule" : {
          "hour" : 0,
          "timezone" : "timezone",
          "days" : [ "SUNDAY", "SUNDAY" ],
          "frequency" : "WEEKLY",
          "minute" : 6
        }
      },
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "isEnabled" : true,
      "name" : "name",
      "description" : "description",
      "clean" : true,
      "actions" : [ {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      }, {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      } ],
      "branchStartCondition" : {
        "source" : {
          "patterns" : [ {
            "pattern" : "pattern",
            "isPrefix" : true
          }, {
            "pattern" : "pattern",
            "isPrefix" : true
          } ],
          "isAllMatch" : true
        },
        "autoCancel" : true,
        "filesAndFoldersRule" : {
          "mode" : "START_IF_ANY_FILE_MATCHES",
          "matchers" : [ {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          }, {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          } ]
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciWorkflows"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsCiWorkflows: (query) the fields to include for returned resources of type ciWorkflows (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter fieldsCiBuildRuns: (query) the fields to include for returned resources of type ciBuildRuns (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)

     - returns: RequestBuilder<CiWorkflowResponse> 
     */
    open class func ciWorkflowsGetInstanceWithRequestBuilder(_id: String, fieldsCiWorkflows: [String]? = nil, include: [String]? = nil, fieldsCiBuildRuns: [String]? = nil, fieldsScmRepositories: [String]? = nil) -> RequestBuilder<CiWorkflowResponse> {
        var path = "/v1/ciWorkflows/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[ciWorkflows]": fieldsCiWorkflows, 
                        "include": include, 
                        "fields[ciBuildRuns]": fieldsCiBuildRuns, 
                        "fields[scmRepositories]": fieldsScmRepositories
        ])


        let requestBuilder: RequestBuilder<CiWorkflowResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     * enum for parameter fieldsScmGitReferences
     */
    public enum FieldsScmGitReferences_ciWorkflowsRepositoryGetToOneRelated: String { 
        case canonicalname = "canonicalName"
        case isdeleted = "isDeleted"
        case kind = "kind"
        case name = "name"
        case repository = "repository"
    }

    /**
     * enum for parameter fieldsScmProviders
     */
    public enum FieldsScmProviders_ciWorkflowsRepositoryGetToOneRelated: String { 
        case repositories = "repositories"
        case scmprovidertype = "scmProviderType"
        case url = "url"
    }

    /**
     * enum for parameter fieldsScmRepositories
     */
    public enum FieldsScmRepositories_ciWorkflowsRepositoryGetToOneRelated: String { 
        case defaultbranch = "defaultBranch"
        case gitreferences = "gitReferences"
        case httpcloneurl = "httpCloneUrl"
        case lastaccesseddate = "lastAccessedDate"
        case ownername = "ownerName"
        case pullrequests = "pullRequests"
        case repositoryname = "repositoryName"
        case scmprovider = "scmProvider"
        case sshcloneurl = "sshCloneUrl"
    }

    /**
     * enum for parameter include
     */
    public enum Include_ciWorkflowsRepositoryGetToOneRelated: String { 
        case defaultbranch = "defaultBranch"
        case scmprovider = "scmProvider"
    }

    /**

     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciWorkflowsRepositoryGetToOneRelated(_id: String, fieldsScmGitReferences: [String]? = nil, fieldsScmProviders: [String]? = nil, fieldsScmRepositories: [String]? = nil, include: [String]? = nil, completion: @escaping ((_ data: ScmRepositoryResponse?,_ error: Error?) -> Void)) {
        ciWorkflowsRepositoryGetToOneRelatedWithRequestBuilder(_id: _id, fieldsScmGitReferences: fieldsScmGitReferences, fieldsScmProviders: fieldsScmProviders, fieldsScmRepositories: fieldsScmRepositories, include: include).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/ciWorkflows/{id}/repository
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "defaultBranch" : {
        "data" : {
          "id" : "id",
          "type" : "scmGitReferences"
        }
      },
      "scmProvider" : {
        "data" : {
          "id" : "id",
          "type" : "scmProviders"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      }
    },
    "attributes" : {
      "httpCloneUrl" : "http://example.com/aeiou",
      "sshCloneUrl" : "http://example.com/aeiou",
      "ownerName" : "ownerName",
      "lastAccessedDate" : "2000-01-23T04:56:07.000+00:00",
      "repositoryName" : "repositoryName"
    },
    "id" : "id",
    "type" : "scmRepositories"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter _id: (path) the id of the requested resource 
     - parameter fieldsScmGitReferences: (query) the fields to include for returned resources of type scmGitReferences (optional)
     - parameter fieldsScmProviders: (query) the fields to include for returned resources of type scmProviders (optional)
     - parameter fieldsScmRepositories: (query) the fields to include for returned resources of type scmRepositories (optional)
     - parameter include: (query) comma-separated list of relationships to include (optional)

     - returns: RequestBuilder<ScmRepositoryResponse> 
     */
    open class func ciWorkflowsRepositoryGetToOneRelatedWithRequestBuilder(_id: String, fieldsScmGitReferences: [String]? = nil, fieldsScmProviders: [String]? = nil, fieldsScmRepositories: [String]? = nil, include: [String]? = nil) -> RequestBuilder<ScmRepositoryResponse> {
        var path = "/v1/ciWorkflows/{id}/repository"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fields[scmGitReferences]": fieldsScmGitReferences, 
                        "fields[scmProviders]": fieldsScmProviders, 
                        "fields[scmRepositories]": fieldsScmRepositories, 
                        "include": include
        ])


        let requestBuilder: RequestBuilder<ScmRepositoryResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**

     - parameter body: (body) CiWorkflow representation 
     - parameter _id: (path) the id of the requested resource 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func ciWorkflowsUpdateInstance(body: CiWorkflowUpdateRequest, _id: String, completion: @escaping ((_ data: CiWorkflowResponse?,_ error: Error?) -> Void)) {
        ciWorkflowsUpdateInstanceWithRequestBuilder(body: body, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PATCH /v1/ciWorkflows/{id}
     - 

     - :
       - type: http
       - name: itc-bearer-token
     - examples: [{contentType=application/json, example={
  "data" : {
    "relationships" : {
      "macOsVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciMacOsVersions"
        }
      },
      "product" : {
        "data" : {
          "id" : "id",
          "type" : "ciProducts"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "repository" : {
        "data" : {
          "id" : "id",
          "type" : "scmRepositories"
        },
        "links" : {
          "related" : "related",
          "self" : "self"
        }
      },
      "xcodeVersion" : {
        "data" : {
          "id" : "id",
          "type" : "ciXcodeVersions"
        }
      }
    },
    "attributes" : {
      "containerFilePath" : "containerFilePath",
      "pullRequestStartCondition" : {
        "autoCancel" : true
      },
      "isLockedForEditing" : true,
      "tagStartCondition" : {
        "source" : {
          "patterns" : [ null, null ],
          "isAllMatch" : true
        },
        "autoCancel" : true
      },
      "scheduledStartCondition" : {
        "schedule" : {
          "hour" : 0,
          "timezone" : "timezone",
          "days" : [ "SUNDAY", "SUNDAY" ],
          "frequency" : "WEEKLY",
          "minute" : 6
        }
      },
      "lastModifiedDate" : "2000-01-23T04:56:07.000+00:00",
      "isEnabled" : true,
      "name" : "name",
      "description" : "description",
      "clean" : true,
      "actions" : [ {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      }, {
        "actionType" : "BUILD",
        "testConfiguration" : {
          "testDestinations" : [ {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          }, {
            "kind" : "SIMULATOR",
            "runtimeName" : "runtimeName",
            "deviceTypeName" : "deviceTypeName",
            "deviceTypeIdentifier" : "deviceTypeIdentifier",
            "runtimeIdentifier" : "runtimeIdentifier"
          } ],
          "kind" : "USE_SCHEME_SETTINGS",
          "testPlanName" : "testPlanName"
        },
        "scheme" : "scheme",
        "buildDistributionAudience" : "INTERNAL_ONLY",
        "name" : "name",
        "destination" : "ANY_IOS_DEVICE",
        "isRequiredToPass" : true,
        "platform" : "MACOS"
      } ],
      "branchStartCondition" : {
        "source" : {
          "patterns" : [ {
            "pattern" : "pattern",
            "isPrefix" : true
          }, {
            "pattern" : "pattern",
            "isPrefix" : true
          } ],
          "isAllMatch" : true
        },
        "autoCancel" : true,
        "filesAndFoldersRule" : {
          "mode" : "START_IF_ANY_FILE_MATCHES",
          "matchers" : [ {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          }, {
            "fileName" : "fileName",
            "fileExtension" : "fileExtension",
            "directory" : "directory"
          } ]
        }
      }
    },
    "links" : {
      "self" : "self"
    },
    "id" : "id",
    "type" : "ciWorkflows"
  },
  "links" : {
    "self" : "self"
  },
  "included" : [ "", "" ]
}}]
     - parameter body: (body) CiWorkflow representation 
     - parameter _id: (path) the id of the requested resource 

     - returns: RequestBuilder<CiWorkflowResponse> 
     */
    open class func ciWorkflowsUpdateInstanceWithRequestBuilder(body: CiWorkflowUpdateRequest, _id: String) -> RequestBuilder<CiWorkflowResponse> {
        var path = "/v1/ciWorkflows/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CiWorkflowResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
